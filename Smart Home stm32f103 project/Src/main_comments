

//void UART1_voidFunc1(void)
//{
//
//	/* Must read or write on Data Register to clear PIF */
//	DIO_TogglePin(PINA5);
//	STK_voidSetBusyWait(10000);
//}

	//	/* 		RCC 			*/
	//	RCC_voidInit();
	//	RCC_voidEnablePeripheralClock(RCC_APB2, APB2_GPIOPA);
	//	RCC_voidEnablePeripheralClock(RCC_APB2, APB2_GPIOPC);
	//	RCC_voidEnablePeripheralClock(RCC_APB2, APB2_GPIOPB);
	//	/* 		GPIO 			*/
	//	/*	A0	Input Pull UP	*/
	//	DIO_InitPin(PINA0, DIO_E_INPUT_PULL_UP);
	//	DIO_InitPin(PINA1, DIO_E_INPUT_PULL_UP);
	//	DIO_InitPin(PINA2, DIO_E_OUTPUT_2MHZ_PULL);
	//	DIO_InitPin(PINA4, DIO_E_OUTPUT_2MHZ_PULL);
	//	/* 		NVIC 			*/
	//	NVIC_voidInit();
	//	/*			PIE form NVIC  		*/
	//	NVIC_voidEnableInterrupt(EXTI9_5);
	//	NVIC_voidEnableInterrupt(EXTI1);
	//	/*Set priority of EXTI0 to xx.yy group 0 and sup group 2 */
	//	NVIC_voidSetPriority(EXTI0,0b0010);
	//	/*Set priority of EXTI0 to xx.yy group 1 and sup group 0 */
	//	NVIC_voidSetPriority(EXTI1,0b0100);
	//	/* 		EXTI 			*/
	//	EXTI_voidInit();
	//	EXTI_voidSetSignalLatch(EXTI_L0, FALLING);
	//	EXTI_voidSetSignalLatch(EXTI_L1, FALLING);
	//	/*			PIE form Peripheral  		*/
	//	EXTI_voidEnableLine(EXTI_L9);
	//	EXTI_voidEnableLine(EXTI_L1);
	//	EXTI_voidSetCallBack(EXTI_L9,EXTI_voidFunc1);
	//
	
	//UART_init_type uart2 ={ID_UART2 ,  STRTBIT_9DATA_NSTOPBIT , EVEN_PARITY,  STOP_1_BIT ,DMA_TX_DISABLE, DMA_RX_DISABLE ,RATE_9600};
	//UART_init_type uart3 ={ID_UART3 ,  STRTBIT_8DATA_NSTOPBIT , NO_PARITY,  STOP_1_BIT ,DMA_TX_DISABLE, DMA_RX_DISABLE ,RATE_9600};
        
        /*Must be after the PIE by the Peripheral NVIC PIF */
		//NVIC_voidSetPendingFlag(EXTI9_5);
		/*
		 * Notes:-
		 * 1- without clearing Pending flag SE  CA ISR non stop
		 * 2-Clear Pending flag at the end of ISR to get SE_SA
		 * 3-NVIC can Start Interrupt by setting pending flag of the peripheral
		 * 	PIF by the NVIC(SW) OR by hardware but PIE by the peripheral AND by NVIC
		 *
		 * 4- GPIO==>AFIO_EXTICR1 Register configure each line which pin pending the EXTI flag
		 *	Each Line has 4 bits Line0 [0:3]bits to select if PINA0 ,PINB0 , etc
		 *		 .. Reset val has PINA0 default
		 *5- Nesting interrupts  are on group priority  level
		 *
		*/

	/* 		RCC External Crystal	FCPU=8MHz		*/
	//	RCC_voidInit();
	//	RCC_voidEnablePeripheralClock_EntireBus(RCC_APB2);
	//
	//	/* 		GPIO 			*/
	//	DIO_InitPin(PINA0, DIO_E_INPUT_PULL_UP);
	//	DIO_InitPin(PINA1, DIO_E_INPUT_PULL_UP);
	//	DIO_InitPin(PINA2, DIO_E_OUTPUT_2MHZ_PULL);
	//	DIO_InitPin(PINA4, DIO_E_OUTPUT_2MHZ_PUSH);
	//	/*	Systick	  F=Fcpu/8 =1Mhz and tick time=1us		*/
	//	STK_voidInit();
	//STK_voidIntervalSingle(1000000, STK_voidFunc2);
	//STK_voidIntervalPeriodic(1000000, STK_voidFunc1);
	//	/*Notes:
	//	 * 	1-The NVIC does not control Core peripherals interrupts.
	//	 * 	2- PIE form core peripheral only .
	//	 * 	3- STK_voidSetBusyWait Ant used with other Systick API
	//	 * 		the same count unit...
	//	 * 	4- single IRQ for more than a Resource or more than SetBack API
	//	 * 		Must use a global flag and apply Mutual Exclusion on the IQR
	//	 * 		==> mutex or OverRide
	//	 *
	//	 */
	
	//	DIO_InitPin(PINA9 ,  DIO_E_OUTPUT_2MHZ_AF_PP); /* TX1 */
	//		DIO_InitPin(PINA10,  DIO_E_INPUT_PULL_UP);    /* RX1 */
	//		DIO_InitPin(PINA2, DIO_E_OUTPUT_2MHZ_AF_PP);   /* TX2 */
	//	 	DIO_InitPin(PINA3, DIO_E_INPUT_PULL_UP);      /* RX2 */
	
	//DIO_InitPin(PINC13,DIO_E_OUTPUT_2MHZ_PUSH);
	//DIO_WritePin(PINC13,LOW);
	
	//		y=POT_VoltReadPercent(0);
		//		z=LDR_RatioRead(1);

		//		for(i=0;i<SEG_DISPLAY_TIME;i++)
		//		{
		//			SEG_voidDisplay_D(x);
		//		}
		//		    LCD_SetCursor(0,0);
		//			LCD_WriteString("POT:");
		//			LCD_SetCursor(1,0);
		//			LCD_WriteString("LDR:");
		//			LCD_WriteNumber(x);
		//			Delay_ms(50);
		//UART_voidSendString(&uart1,"Hello");

		//x=UART_u8ReciveChar(&uart1);
		//UART_u8ReciveCharPeriodic(&UART3,data);
//        if(x=='a')
//        {
//        	DIO_WritePin(PINC13, HIGH);
//        }
//        else if(x=='b')
//        {
//        	DIO_WritePin(PINC13, LOW);
//        }
                //PWM3_CH3.duty = 5;
        		//x++;
        		//timer_voidGPWM(&PWM3_CH3);

              //  TIM3->CCR3 = 1500 ;
        		//if(x==9)
        		//{

        			//x=3;
        		//}
        		Delay_ms(2000);
		//UART_voidSendString(&UART3,str);
	    //UART_voidReciveString(&UART3,str);
//		LCD_SetCursor(0, 0);
//		LCD_WriteString("POT=");
//		POT=(((u64)ADC_u16GetValue(1)*33)/4096);
//		STK_voidSetBusyWait(50000);
//		LCD_SetCursor(0, 6);
//		LCD_WriteNumber(POT/10);
//		LCD_WriteChar('.');
//		LCD_WriteNumber(POT%10);
//		LCD_WriteString("v");
//		LCD_SetCursor(1, 0);
//		LCD_WriteString("LDR=");
//		LDR=(((u64)ADC_u16GetValue(0)*33)/4096);
//		STK_voidSetBusyWait(50000);
//		LCD_SetCursor(1, 6);
//		LCD_WriteNumber(LDR/10);
//		LCD_WriteChar('.');
//		LCD_WriteNumber(LDR%10);
//		LCD_WriteString("v");
//	}
	//DIO_TogglePin(PINA2);
	//DIO_TogglePin(PINA4);
	//STK_voidSetBusyWait(1000000);