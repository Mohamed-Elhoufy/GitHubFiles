
Sensor_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000489c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b60  08004b60  00014b70  2**0
                  CONTENTS
  4 .ARM          00000008  08004b60  08004b60  00014b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b68  08004b70  00014b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00014b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000000  08004b70  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08004b70  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00014b70  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c69  00000000  00000000  00014b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b33  00000000  00000000  00017802  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003e8  00000000  00000000  00018338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000350  00000000  00000000  00018720  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000013b5  00000000  00000000  00018a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000020d1  00000000  00000000  00019e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00006a09  00000000  00000000  0001bef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000228ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e60  00000000  00000000  0002297c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080049b4 	.word	0x080049b4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080049b4 	.word	0x080049b4

08000170 <__aeabi_ldivmod>:
 8000170:	b97b      	cbnz	r3, 8000192 <__aeabi_ldivmod+0x22>
 8000172:	b972      	cbnz	r2, 8000192 <__aeabi_ldivmod+0x22>
 8000174:	2900      	cmp	r1, #0
 8000176:	bfbe      	ittt	lt
 8000178:	2000      	movlt	r0, #0
 800017a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800017e:	e006      	blt.n	800018e <__aeabi_ldivmod+0x1e>
 8000180:	bf08      	it	eq
 8000182:	2800      	cmpeq	r0, #0
 8000184:	bf1c      	itt	ne
 8000186:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800018a:	f04f 30ff 	movne.w	r0, #4294967295
 800018e:	f000 b9a7 	b.w	80004e0 <__aeabi_idiv0>
 8000192:	f1ad 0c08 	sub.w	ip, sp, #8
 8000196:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019a:	2900      	cmp	r1, #0
 800019c:	db09      	blt.n	80001b2 <__aeabi_ldivmod+0x42>
 800019e:	2b00      	cmp	r3, #0
 80001a0:	db1a      	blt.n	80001d8 <__aeabi_ldivmod+0x68>
 80001a2:	f000 f835 	bl	8000210 <__udivmoddi4>
 80001a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ae:	b004      	add	sp, #16
 80001b0:	4770      	bx	lr
 80001b2:	4240      	negs	r0, r0
 80001b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db1b      	blt.n	80001f4 <__aeabi_ldivmod+0x84>
 80001bc:	f000 f828 	bl	8000210 <__udivmoddi4>
 80001c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001c8:	b004      	add	sp, #16
 80001ca:	4240      	negs	r0, r0
 80001cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d0:	4252      	negs	r2, r2
 80001d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001d6:	4770      	bx	lr
 80001d8:	4252      	negs	r2, r2
 80001da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001de:	f000 f817 	bl	8000210 <__udivmoddi4>
 80001e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001ea:	b004      	add	sp, #16
 80001ec:	4240      	negs	r0, r0
 80001ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f2:	4770      	bx	lr
 80001f4:	4252      	negs	r2, r2
 80001f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001fa:	f000 f809 	bl	8000210 <__udivmoddi4>
 80001fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000206:	b004      	add	sp, #16
 8000208:	4252      	negs	r2, r2
 800020a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	468c      	mov	ip, r1
 8000216:	4604      	mov	r4, r0
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0c03 	orr.w	ip, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	fbbc f7fe 	udiv	r7, ip, lr
 8000246:	fa1f f885 	uxth.w	r8, r5
 800024a:	fb0e c317 	mls	r3, lr, r7, ip
 800024e:	fb07 f908 	mul.w	r9, r7, r8
 8000252:	0c21      	lsrs	r1, r4, #16
 8000254:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000258:	4599      	cmp	r9, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 31ff 	add.w	r1, r7, #4294967295
 8000262:	f080 811c 	bcs.w	800049e <__udivmoddi4+0x28e>
 8000266:	4599      	cmp	r9, r3
 8000268:	f240 8119 	bls.w	800049e <__udivmoddi4+0x28e>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	eba3 0309 	sub.w	r3, r3, r9
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	fb00 f108 	mul.w	r1, r0, r8
 8000280:	b2a4      	uxth	r4, r4
 8000282:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000286:	42a1      	cmp	r1, r4
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	192c      	adds	r4, r5, r4
 800028c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000290:	f080 8107 	bcs.w	80004a2 <__udivmoddi4+0x292>
 8000294:	42a1      	cmp	r1, r4
 8000296:	f240 8104 	bls.w	80004a2 <__udivmoddi4+0x292>
 800029a:	3802      	subs	r0, #2
 800029c:	442c      	add	r4, r5
 800029e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a2:	2700      	movs	r7, #0
 80002a4:	1a64      	subs	r4, r4, r1
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	2300      	movs	r3, #0
 80002aa:	40d4      	lsrs	r4, r2
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ec 	beq.w	8000498 <__udivmoddi4+0x288>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d148      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fb 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	469c      	mov	ip, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4c00 	strd	r4, ip, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	2701      	movs	r7, #1
 8000304:	1b49      	subs	r1, r1, r5
 8000306:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800030a:	fa1f f985 	uxth.w	r9, r5
 800030e:	fbb1 fef8 	udiv	lr, r1, r8
 8000312:	fb08 111e 	mls	r1, r8, lr, r1
 8000316:	fb09 f00e 	mul.w	r0, r9, lr
 800031a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800031e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000322:	4298      	cmp	r0, r3
 8000324:	d907      	bls.n	8000336 <__udivmoddi4+0x126>
 8000326:	18eb      	adds	r3, r5, r3
 8000328:	f10e 31ff 	add.w	r1, lr, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x124>
 800032e:	4298      	cmp	r0, r3
 8000330:	f200 80cd 	bhi.w	80004ce <__udivmoddi4+0x2be>
 8000334:	468e      	mov	lr, r1
 8000336:	1a1b      	subs	r3, r3, r0
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	fb09 f900 	mul.w	r9, r9, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800034a:	45a1      	cmp	r9, r4
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x14e>
 800034e:	192c      	adds	r4, r5, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a1      	cmp	r9, r4
 8000358:	f200 80b6 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 800035c:	4618      	mov	r0, r3
 800035e:	eba4 0409 	sub.w	r4, r4, r9
 8000362:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000366:	e79e      	b.n	80002a6 <__udivmoddi4+0x96>
 8000368:	f1c7 0520 	rsb	r5, r7, #32
 800036c:	40bb      	lsls	r3, r7
 800036e:	fa22 fc05 	lsr.w	ip, r2, r5
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa21 f405 	lsr.w	r4, r1, r5
 800037a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800037e:	fbb4 f9fe 	udiv	r9, r4, lr
 8000382:	fa1f f88c 	uxth.w	r8, ip
 8000386:	fb0e 4419 	mls	r4, lr, r9, r4
 800038a:	fa20 f305 	lsr.w	r3, r0, r5
 800038e:	40b9      	lsls	r1, r7
 8000390:	fb09 fa08 	mul.w	sl, r9, r8
 8000394:	4319      	orrs	r1, r3
 8000396:	0c0b      	lsrs	r3, r1, #16
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	45a2      	cmp	sl, r4
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f307 	lsl.w	r3, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	45a2      	cmp	sl, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4464      	add	r4, ip
 80003c0:	eba4 040a 	sub.w	r4, r4, sl
 80003c4:	fbb4 f0fe 	udiv	r0, r4, lr
 80003c8:	fb0e 4410 	mls	r4, lr, r0, r4
 80003cc:	fb00 fa08 	mul.w	sl, r0, r8
 80003d0:	b289      	uxth	r1, r1
 80003d2:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x1dc>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e2:	d26b      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d969      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e8:	3802      	subs	r0, #2
 80003ea:	4464      	add	r4, ip
 80003ec:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f0:	fba0 8902 	umull	r8, r9, r0, r2
 80003f4:	eba4 040a 	sub.w	r4, r4, sl
 80003f8:	454c      	cmp	r4, r9
 80003fa:	4641      	mov	r1, r8
 80003fc:	46ce      	mov	lr, r9
 80003fe:	d354      	bcc.n	80004aa <__udivmoddi4+0x29a>
 8000400:	d051      	beq.n	80004a6 <__udivmoddi4+0x296>
 8000402:	2e00      	cmp	r6, #0
 8000404:	d069      	beq.n	80004da <__udivmoddi4+0x2ca>
 8000406:	1a5a      	subs	r2, r3, r1
 8000408:	eb64 040e 	sbc.w	r4, r4, lr
 800040c:	fa04 f505 	lsl.w	r5, r4, r5
 8000410:	fa22 f307 	lsr.w	r3, r2, r7
 8000414:	40fc      	lsrs	r4, r7
 8000416:	431d      	orrs	r5, r3
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	4095      	lsls	r5, r2
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	fa21 f003 	lsr.w	r0, r1, r3
 800042a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800042e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000432:	fa1f f985 	uxth.w	r9, r5
 8000436:	fb08 0017 	mls	r0, r8, r7, r0
 800043a:	fa24 f303 	lsr.w	r3, r4, r3
 800043e:	4091      	lsls	r1, r2
 8000440:	fb07 fc09 	mul.w	ip, r7, r9
 8000444:	430b      	orrs	r3, r1
 8000446:	0c19      	lsrs	r1, r3, #16
 8000448:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800044c:	458c      	cmp	ip, r1
 800044e:	fa04 f402 	lsl.w	r4, r4, r2
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x254>
 8000454:	1869      	adds	r1, r5, r1
 8000456:	f107 30ff 	add.w	r0, r7, #4294967295
 800045a:	d231      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 800045c:	458c      	cmp	ip, r1
 800045e:	d92f      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	3f02      	subs	r7, #2
 8000462:	4429      	add	r1, r5
 8000464:	eba1 010c 	sub.w	r1, r1, ip
 8000468:	fbb1 f0f8 	udiv	r0, r1, r8
 800046c:	fb08 1c10 	mls	ip, r8, r0, r1
 8000470:	fb00 fe09 	mul.w	lr, r0, r9
 8000474:	b299      	uxth	r1, r3
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	458e      	cmp	lr, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 33ff 	add.w	r3, r0, #4294967295
 8000484:	d218      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 8000486:	458e      	cmp	lr, r1
 8000488:	d916      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000496:	e73a      	b.n	800030e <__udivmoddi4+0xfe>
 8000498:	4637      	mov	r7, r6
 800049a:	4630      	mov	r0, r6
 800049c:	e708      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049e:	460f      	mov	r7, r1
 80004a0:	e6e6      	b.n	8000270 <__udivmoddi4+0x60>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6fb      	b.n	800029e <__udivmoddi4+0x8e>
 80004a6:	4543      	cmp	r3, r8
 80004a8:	d2ab      	bcs.n	8000402 <__udivmoddi4+0x1f2>
 80004aa:	ebb8 0102 	subs.w	r1, r8, r2
 80004ae:	eb69 020c 	sbc.w	r2, r9, ip
 80004b2:	3801      	subs	r0, #1
 80004b4:	4696      	mov	lr, r2
 80004b6:	e7a4      	b.n	8000402 <__udivmoddi4+0x1f2>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e7e8      	b.n	800048e <__udivmoddi4+0x27e>
 80004bc:	4608      	mov	r0, r1
 80004be:	e795      	b.n	80003ec <__udivmoddi4+0x1dc>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e7cf      	b.n	8000464 <__udivmoddi4+0x254>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3802      	subs	r0, #2
 80004ca:	442c      	add	r4, r5
 80004cc:	e747      	b.n	800035e <__udivmoddi4+0x14e>
 80004ce:	f1ae 0e02 	sub.w	lr, lr, #2
 80004d2:	442b      	add	r3, r5
 80004d4:	e72f      	b.n	8000336 <__udivmoddi4+0x126>
 80004d6:	4638      	mov	r0, r7
 80004d8:	e707      	b.n	80002ea <__udivmoddi4+0xda>
 80004da:	4637      	mov	r7, r6
 80004dc:	e6e8      	b.n	80002b0 <__udivmoddi4+0xa0>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ADC_voidInit>:




void ADC_voidInit(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	/*ADC1 Configration */
	/*Enable ADC*/
	SET_BIT(ADC -> CR2,0);
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <ADC_voidInit+0x50>)
 80004ea:	689b      	ldr	r3, [r3, #8]
 80004ec:	4a11      	ldr	r2, [pc, #68]	; (8000534 <ADC_voidInit+0x50>)
 80004ee:	f043 0301 	orr.w	r3, r3, #1
 80004f2:	6093      	str	r3, [r2, #8]
	/*ADC MODE */
#if ADC_MODE == ADC_INDEPENDENT_MODE

	CLR_BIT(ADC -> CR1 ,8);
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <ADC_voidInit+0x50>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <ADC_voidInit+0x50>)
 80004fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004fe:	6053      	str	r3, [r2, #4]
#endif


	/*DATA ALIGN */
#if ADC_DATAA_ALIGN  == ADC_RIGHT_ALIGN
	CLR_BIT(ADC -> CR2 ,11);
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <ADC_voidInit+0x50>)
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <ADC_voidInit+0x50>)
 8000506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800050a:	6093      	str	r3, [r2, #8]
#endif


	/*COUNTINUOUS OR SINGEL MODE*/
#if ADC_COUNTINUOUS_CON_MODE == ADC_SINGEL_CONVERSION
	CLR_BIT(ADC -> CR1 ,1);
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <ADC_voidInit+0x50>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4a08      	ldr	r2, [pc, #32]	; (8000534 <ADC_voidInit+0x50>)
 8000512:	f023 0302 	bic.w	r3, r3, #2
 8000516:	6053      	str	r3, [r2, #4]
	ADC ->SQR3 = (SEQUENCE_5<<25)|(SEQUENCE_4<<20)|(SEQUENCE_3<<15)|(SEQUENCE_2<<10)|(SEQUENCE_1<<5)|(SEQUENCE_0);
	ADC ->SQR2 = (SEQUENCE_9<<15)|(SEQUENCE_8<<10)|(SEQUENCE_7<<5)|(SEQUENCE_6);
*/

	/*CHOSE Length of ADC Raglaer channels*/
	ADC->  SQR1  &=0xFF0FFFFF;
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <ADC_voidInit+0x50>)
 800051a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800051c:	4a05      	ldr	r2, [pc, #20]	; (8000534 <ADC_voidInit+0x50>)
 800051e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000522:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC -> SQR1 |=( (ADC_CHANNELS_NUMBER-1) << 20 );
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <ADC_voidInit+0x50>)
 8000526:	4a03      	ldr	r2, [pc, #12]	; (8000534 <ADC_voidInit+0x50>)
 8000528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800052a:	62d3      	str	r3, [r2, #44]	; 0x2c




}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40012400 	.word	0x40012400

08000538 <ADC_u16GetValue>:
	}

}

u16 ADC_u16GetValue(u8 chanel)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	u16 temp;
	/*Start Conv*/

	ADC ->SQR3 = chanel;
 8000542:	4a13      	ldr	r2, [pc, #76]	; (8000590 <ADC_u16GetValue+0x58>)
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	6353      	str	r3, [r2, #52]	; 0x34
	SET_BIT(ADC -> CR2,0);
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <ADC_u16GetValue+0x58>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	4a10      	ldr	r2, [pc, #64]	; (8000590 <ADC_u16GetValue+0x58>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6093      	str	r3, [r2, #8]
	SET_BIT(ADC -> CR2 ,22);
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <ADC_u16GetValue+0x58>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <ADC_u16GetValue+0x58>)
 800055a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800055e:	6093      	str	r3, [r2, #8]

	while(GET_BIT(ADC -> SR,1)==0);
 8000560:	bf00      	nop
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <ADC_u16GetValue+0x58>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	085b      	lsrs	r3, r3, #1
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	2b00      	cmp	r3, #0
 800056e:	d0f8      	beq.n	8000562 <ADC_u16GetValue+0x2a>
	temp =(u16)ADC -> DR;
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <ADC_u16GetValue+0x58>)
 8000572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000574:	81fb      	strh	r3, [r7, #14]
	CLR_BIT(ADC -> SR,1);
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <ADC_u16GetValue+0x58>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a05      	ldr	r2, [pc, #20]	; (8000590 <ADC_u16GetValue+0x58>)
 800057c:	f023 0302 	bic.w	r3, r3, #2
 8000580:	6013      	str	r3, [r2, #0]
	return temp;
 8000582:	89fb      	ldrh	r3, [r7, #14]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40012400 	.word	0x40012400

08000594 <POT_PercentRead>:
	buffer=((buffer*33)/4096);
	//buffer=(((buffer * 5000)/1024));        /*Change range from 0~1024 to 0~5000mv*/
	return buffer;
}
u32 POT_PercentRead(u8 chanel)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	    u16 adc=ADC_u16GetValue(chanel);
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ffc9 	bl	8000538 <ADC_u16GetValue>
 80005a6:	4603      	mov	r3, r0
 80005a8:	81fb      	strh	r3, [r7, #14]
		u16 LdrPercent=(adc*100/4096); //not sure ???
 80005aa:	89fb      	ldrh	r3, [r7, #14]
 80005ac:	2264      	movs	r2, #100	; 0x64
 80005ae:	fb02 f303 	mul.w	r3, r2, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	da01      	bge.n	80005ba <POT_PercentRead+0x26>
 80005b6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80005ba:	131b      	asrs	r3, r3, #12
 80005bc:	81bb      	strh	r3, [r7, #12]
		return LdrPercent;
 80005be:	89bb      	ldrh	r3, [r7, #12]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <LDR_PercentRead>:
	else if(adc<300 && adc>=160)					LdrRatio=1;
	else if(adc<=150)								LdrRatio=0;
	return LdrRatio;
}
u16 LDR_PercentRead(u8 chanel)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	u16 adc=ADC_u16GetValue(chanel);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ffaf 	bl	8000538 <ADC_u16GetValue>
 80005da:	4603      	mov	r3, r0
 80005dc:	81fb      	strh	r3, [r7, #14]
	u16 LdrPercent=(adc*500/4096);
 80005de:	89fb      	ldrh	r3, [r7, #14]
 80005e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005e4:	fb02 f303 	mul.w	r3, r2, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	da01      	bge.n	80005f0 <LDR_PercentRead+0x28>
 80005ec:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80005f0:	131b      	asrs	r3, r3, #12
 80005f2:	81bb      	strh	r3, [r7, #12]
	return LdrPercent;
 80005f4:	89bb      	ldrh	r3, [r7, #12]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <EXTI0_IRQHandler>:
	/*		Task								*/
}

/*******************************External Interrupt ISR*****************************************/
void EXTI0_IRQHandler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	if(NULL!=EXTI_pfCallBack[EXTI_L0])
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <EXTI0_IRQHandler+0x24>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d008      	beq.n	800061e <EXTI0_IRQHandler+0x1e>
	{
		EXTI_pfCallBack[EXTI_L0]();
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <EXTI0_IRQHandler+0x24>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L0);
 8000612:	4b05      	ldr	r3, [pc, #20]	; (8000628 <EXTI0_IRQHandler+0x28>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4a04      	ldr	r2, [pc, #16]	; (8000628 <EXTI0_IRQHandler+0x28>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6153      	str	r3, [r2, #20]
	}
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000001c 	.word	0x2000001c
 8000628:	40010400 	.word	0x40010400

0800062c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	if(NULL!=EXTI_pfCallBack[EXTI_L1])
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <EXTI1_IRQHandler+0x24>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d008      	beq.n	800064a <EXTI1_IRQHandler+0x1e>
	{
		EXTI_pfCallBack[EXTI_L1]();
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <EXTI1_IRQHandler+0x24>)
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L1);
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <EXTI1_IRQHandler+0x28>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	4a04      	ldr	r2, [pc, #16]	; (8000654 <EXTI1_IRQHandler+0x28>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	6153      	str	r3, [r2, #20]
	}
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000001c 	.word	0x2000001c
 8000654:	40010400 	.word	0x40010400

08000658 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	if(NULL!=EXTI_pfCallBack[EXTI_L2])
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <EXTI2_IRQHandler+0x24>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d008      	beq.n	8000676 <EXTI2_IRQHandler+0x1e>
	{
		EXTI_pfCallBack[EXTI_L2]();
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <EXTI2_IRQHandler+0x24>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L2);
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <EXTI2_IRQHandler+0x28>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <EXTI2_IRQHandler+0x28>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	6153      	str	r3, [r2, #20]
	}
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000001c 	.word	0x2000001c
 8000680:	40010400 	.word	0x40010400

08000684 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	if(NULL!=EXTI_pfCallBack[EXTI_L3])
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <EXTI3_IRQHandler+0x24>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d008      	beq.n	80006a2 <EXTI3_IRQHandler+0x1e>
	{
		EXTI_pfCallBack[EXTI_L3]();
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <EXTI3_IRQHandler+0x24>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L3);
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <EXTI3_IRQHandler+0x28>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a04      	ldr	r2, [pc, #16]	; (80006ac <EXTI3_IRQHandler+0x28>)
 800069c:	f043 0308 	orr.w	r3, r3, #8
 80006a0:	6153      	str	r3, [r2, #20]
	}
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000001c 	.word	0x2000001c
 80006ac:	40010400 	.word	0x40010400

080006b0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	if(NULL!=EXTI_pfCallBack[EXTI_L4])
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <EXTI4_IRQHandler+0x24>)
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d008      	beq.n	80006ce <EXTI4_IRQHandler+0x1e>
	{
		EXTI_pfCallBack[EXTI_L4]();
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <EXTI4_IRQHandler+0x24>)
 80006be:	691b      	ldr	r3, [r3, #16]
 80006c0:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L4);
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <EXTI4_IRQHandler+0x28>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <EXTI4_IRQHandler+0x28>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	6153      	str	r3, [r2, #20]
	}
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000001c 	.word	0x2000001c
 80006d8:	40010400 	.word	0x40010400

080006dc <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

	if(GET_BIT(EXTI-> PR,EXTI_L5))
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	095b      	lsrs	r3, r3, #5
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d008      	beq.n	8000700 <EXTI9_5_IRQHandler+0x24>
	{
		EXTI_pfCallBack[EXTI_L5]();
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <EXTI9_5_IRQHandler+0xac>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L5);
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 80006f6:	695b      	ldr	r3, [r3, #20]
 80006f8:	4a22      	ldr	r2, [pc, #136]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 80006fa:	f043 0320 	orr.w	r3, r3, #32
 80006fe:	6153      	str	r3, [r2, #20]
	}
	if(GET_BIT(EXTI-> PR,EXTI_L6))
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	099b      	lsrs	r3, r3, #6
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	2b00      	cmp	r3, #0
 800070c:	d008      	beq.n	8000720 <EXTI9_5_IRQHandler+0x44>
	{
		EXTI_pfCallBack[EXTI_L6]();
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <EXTI9_5_IRQHandler+0xac>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L6);
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 8000716:	695b      	ldr	r3, [r3, #20]
 8000718:	4a1a      	ldr	r2, [pc, #104]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 800071a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800071e:	6153      	str	r3, [r2, #20]
	}
	if(GET_BIT(EXTI-> PR,EXTI_L7))
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 8000722:	695b      	ldr	r3, [r3, #20]
 8000724:	09db      	lsrs	r3, r3, #7
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	2b00      	cmp	r3, #0
 800072c:	d008      	beq.n	8000740 <EXTI9_5_IRQHandler+0x64>
	{
		EXTI_pfCallBack[EXTI_L7]();
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <EXTI9_5_IRQHandler+0xac>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L7);
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	4a12      	ldr	r2, [pc, #72]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 800073a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073e:	6153      	str	r3, [r2, #20]
	}
	if(GET_BIT(EXTI-> PR,EXTI_L8))
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	2b00      	cmp	r3, #0
 800074c:	d008      	beq.n	8000760 <EXTI9_5_IRQHandler+0x84>
	{
		EXTI_pfCallBack[EXTI_L8]();
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <EXTI9_5_IRQHandler+0xac>)
 8000750:	6a1b      	ldr	r3, [r3, #32]
 8000752:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L8);
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 800075a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800075e:	6153      	str	r3, [r2, #20]
	}
	if(GET_BIT(EXTI-> PR,EXTI_L9))
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	0a5b      	lsrs	r3, r3, #9
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	2b00      	cmp	r3, #0
 800076c:	d008      	beq.n	8000780 <EXTI9_5_IRQHandler+0xa4>
	{
		EXTI_pfCallBack[EXTI_L9]();
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <EXTI9_5_IRQHandler+0xac>)
 8000770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000772:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L9);
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	4a02      	ldr	r2, [pc, #8]	; (8000784 <EXTI9_5_IRQHandler+0xa8>)
 800077a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800077e:	6153      	str	r3, [r2, #20]
	}

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40010400 	.word	0x40010400
 8000788:	2000001c 	.word	0x2000001c

0800078c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	if(GET_BIT(EXTI-> PR,EXTI_L10))
 8000790:	4b30      	ldr	r3, [pc, #192]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	0a9b      	lsrs	r3, r3, #10
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	2b00      	cmp	r3, #0
 800079c:	d008      	beq.n	80007b0 <EXTI15_10_IRQHandler+0x24>
	{
		EXTI_pfCallBack[EXTI_L10]();
 800079e:	4b2e      	ldr	r3, [pc, #184]	; (8000858 <EXTI15_10_IRQHandler+0xcc>)
 80007a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a2:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L10);
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	4a2a      	ldr	r2, [pc, #168]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 80007aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ae:	6153      	str	r3, [r2, #20]
	}
	if(GET_BIT(EXTI-> PR,EXTI_L11))
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	0adb      	lsrs	r3, r3, #11
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d008      	beq.n	80007d0 <EXTI15_10_IRQHandler+0x44>
	{
		EXTI_pfCallBack[EXTI_L11]();
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <EXTI15_10_IRQHandler+0xcc>)
 80007c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c2:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L11);
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	4a22      	ldr	r2, [pc, #136]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 80007ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007ce:	6153      	str	r3, [r2, #20]
	}
	if(GET_BIT(EXTI-> PR,EXTI_L12))
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	0b1b      	lsrs	r3, r3, #12
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d008      	beq.n	80007f0 <EXTI15_10_IRQHandler+0x64>
	{
		EXTI_pfCallBack[EXTI_L12]();
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <EXTI15_10_IRQHandler+0xcc>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L12);
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 80007ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007ee:	6153      	str	r3, [r2, #20]
	}
	if(GET_BIT(EXTI-> PR,EXTI_L13))
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 80007f2:	695b      	ldr	r3, [r3, #20]
 80007f4:	0b5b      	lsrs	r3, r3, #13
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d008      	beq.n	8000810 <EXTI15_10_IRQHandler+0x84>
	{
		EXTI_pfCallBack[EXTI_L13]();
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <EXTI15_10_IRQHandler+0xcc>)
 8000800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000802:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L13);
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	4a12      	ldr	r2, [pc, #72]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 800080a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800080e:	6153      	str	r3, [r2, #20]
	}
	if(GET_BIT(EXTI-> PR,EXTI_L14))
 8000810:	4b10      	ldr	r3, [pc, #64]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	0b9b      	lsrs	r3, r3, #14
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	2b00      	cmp	r3, #0
 800081c:	d008      	beq.n	8000830 <EXTI15_10_IRQHandler+0xa4>
	{
		EXTI_pfCallBack[EXTI_L14]();
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <EXTI15_10_IRQHandler+0xcc>)
 8000820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000822:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L14);
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 800082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082e:	6153      	str	r3, [r2, #20]
	}
	if(GET_BIT(EXTI-> PR,EXTI_L15))
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	0bdb      	lsrs	r3, r3, #15
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	2b00      	cmp	r3, #0
 800083c:	d008      	beq.n	8000850 <EXTI15_10_IRQHandler+0xc4>
	{
		EXTI_pfCallBack[EXTI_L15]();
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <EXTI15_10_IRQHandler+0xcc>)
 8000840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000842:	4798      	blx	r3
		/*  Clear Pending flag of this ISR  */
		SET_BIT(EXTI->PR,EXTI_L15);
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	4a02      	ldr	r2, [pc, #8]	; (8000854 <EXTI15_10_IRQHandler+0xc8>)
 800084a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800084e:	6153      	str	r3, [r2, #20]
	}
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40010400 	.word	0x40010400
 8000858:	2000001c 	.word	0x2000001c

0800085c <DIO_InitPin>:
}

#elif 	DIO_FUNCTION_MODE_SELECT==ENUM

void	DIO_InitPin(DIO_Pin_type pin,DIO_PinStatus_type status)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	460a      	mov	r2, r1
 8000866:	71fb      	strb	r3, [r7, #7]
 8000868:	4613      	mov	r3, r2
 800086a:	71bb      	strb	r3, [r7, #6]
	u8 					Local_Pin_num=pin%16;
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	f003 030f 	and.w	r3, r3, #15
 8000872:	73fb      	strb	r3, [r7, #15]
	DIO_Port_type		Local_PORT_num=pin/16;
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	091b      	lsrs	r3, r3, #4
 8000878:	73bb      	strb	r3, [r7, #14]

		/*		Range Check			*/
		if(pin<TOTAL_PINS)
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b2f      	cmp	r3, #47	; 0x2f
 800087e:	f200 87c4 	bhi.w	800180a <DIO_InitPin+0xfae>
		{
			switch(Local_PORT_num)
 8000882:	7bbb      	ldrb	r3, [r7, #14]
 8000884:	2b01      	cmp	r3, #1
 8000886:	f000 82a5 	beq.w	8000dd4 <DIO_InitPin+0x578>
 800088a:	2b02      	cmp	r3, #2
 800088c:	f000 8536 	beq.w	80012fc <DIO_InitPin+0xaa0>
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <DIO_InitPin+0x3c>
				break;
			}
		}
		else{/*ERORR*/}

}
 8000894:	f000 bfb9 	b.w	800180a <DIO_InitPin+0xfae>
				if( Local_Pin_num < 8 )
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	2b07      	cmp	r3, #7
 800089c:	f200 8148 	bhi.w	8000b30 <DIO_InitPin+0x2d4>
					if(status==DIO_E_INPUT_PULL_DOWN)
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	2b8f      	cmp	r3, #143	; 0x8f
 80008a4:	d123      	bne.n	80008ee <DIO_InitPin+0x92>
						status=DIO_E_INPUT_PULL_UP;
 80008a6:	2308      	movs	r3, #8
 80008a8:	71bb      	strb	r3, [r7, #6]
						GPIOA_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 80008aa:	4b9f      	ldr	r3, [pc, #636]	; (8000b28 <DIO_InitPin+0x2cc>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	210f      	movs	r1, #15
 80008b4:	fa01 f303 	lsl.w	r3, r1, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	499b      	ldr	r1, [pc, #620]	; (8000b28 <DIO_InitPin+0x2cc>)
 80008bc:	4013      	ands	r3, r2
 80008be:	600b      	str	r3, [r1, #0]
						GPIOA_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 80008c0:	4b99      	ldr	r3, [pc, #612]	; (8000b28 <DIO_InitPin+0x2cc>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	79b9      	ldrb	r1, [r7, #6]
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	4996      	ldr	r1, [pc, #600]	; (8000b28 <DIO_InitPin+0x2cc>)
 80008d0:	4313      	orrs	r3, r2
 80008d2:	600b      	str	r3, [r1, #0]
						CLR_BIT(GPIOA_ODR,Local_Pin_num);
 80008d4:	4b95      	ldr	r3, [pc, #596]	; (8000b2c <DIO_InitPin+0x2d0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	7bfa      	ldrb	r2, [r7, #15]
 80008da:	2101      	movs	r1, #1
 80008dc:	fa01 f202 	lsl.w	r2, r1, r2
 80008e0:	43d2      	mvns	r2, r2
 80008e2:	4611      	mov	r1, r2
 80008e4:	4a91      	ldr	r2, [pc, #580]	; (8000b2c <DIO_InitPin+0x2d0>)
 80008e6:	400b      	ands	r3, r1
 80008e8:	6013      	str	r3, [r2, #0]
				break;
 80008ea:	f000 bf8e 	b.w	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_INPUT_PULL_UP)
 80008ee:	79bb      	ldrb	r3, [r7, #6]
 80008f0:	2b08      	cmp	r3, #8
 80008f2:	d120      	bne.n	8000936 <DIO_InitPin+0xda>
						GPIOA_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 80008f4:	4b8c      	ldr	r3, [pc, #560]	; (8000b28 <DIO_InitPin+0x2cc>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	210f      	movs	r1, #15
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	4988      	ldr	r1, [pc, #544]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000906:	4013      	ands	r3, r2
 8000908:	600b      	str	r3, [r1, #0]
						GPIOA_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 800090a:	4b87      	ldr	r3, [pc, #540]	; (8000b28 <DIO_InitPin+0x2cc>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	79b9      	ldrb	r1, [r7, #6]
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	fa01 f303 	lsl.w	r3, r1, r3
 8000918:	4983      	ldr	r1, [pc, #524]	; (8000b28 <DIO_InitPin+0x2cc>)
 800091a:	4313      	orrs	r3, r2
 800091c:	600b      	str	r3, [r1, #0]
						SET_BIT(GPIOA_ODR,Local_Pin_num);
 800091e:	4b83      	ldr	r3, [pc, #524]	; (8000b2c <DIO_InitPin+0x2d0>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	7bfa      	ldrb	r2, [r7, #15]
 8000924:	2101      	movs	r1, #1
 8000926:	fa01 f202 	lsl.w	r2, r1, r2
 800092a:	4611      	mov	r1, r2
 800092c:	4a7f      	ldr	r2, [pc, #508]	; (8000b2c <DIO_InitPin+0x2d0>)
 800092e:	430b      	orrs	r3, r1
 8000930:	6013      	str	r3, [r2, #0]
				break;
 8000932:	f000 bf6a 	b.w	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_2MHZ_PULL)
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	2b2f      	cmp	r3, #47	; 0x2f
 800093a:	d123      	bne.n	8000984 <DIO_InitPin+0x128>
						status =DIO_E_OUTPUT_2MHZ_PUSH;
 800093c:	2302      	movs	r3, #2
 800093e:	71bb      	strb	r3, [r7, #6]
						GPIOA_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000940:	4b79      	ldr	r3, [pc, #484]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	210f      	movs	r1, #15
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	4975      	ldr	r1, [pc, #468]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000952:	4013      	ands	r3, r2
 8000954:	600b      	str	r3, [r1, #0]
						GPIOA_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000956:	4b74      	ldr	r3, [pc, #464]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	79b9      	ldrb	r1, [r7, #6]
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	4970      	ldr	r1, [pc, #448]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000966:	4313      	orrs	r3, r2
 8000968:	600b      	str	r3, [r1, #0]
						CLR_BIT(GPIOA_ODR,Local_Pin_num);
 800096a:	4b70      	ldr	r3, [pc, #448]	; (8000b2c <DIO_InitPin+0x2d0>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	7bfa      	ldrb	r2, [r7, #15]
 8000970:	2101      	movs	r1, #1
 8000972:	fa01 f202 	lsl.w	r2, r1, r2
 8000976:	43d2      	mvns	r2, r2
 8000978:	4611      	mov	r1, r2
 800097a:	4a6c      	ldr	r2, [pc, #432]	; (8000b2c <DIO_InitPin+0x2d0>)
 800097c:	400b      	ands	r3, r1
 800097e:	6013      	str	r3, [r2, #0]
				break;
 8000980:	f000 bf43 	b.w	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_2MHZ_PUSH)
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	2b02      	cmp	r3, #2
 8000988:	d120      	bne.n	80009cc <DIO_InitPin+0x170>
						GPIOA_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 800098a:	4b67      	ldr	r3, [pc, #412]	; (8000b28 <DIO_InitPin+0x2cc>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	210f      	movs	r1, #15
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	4963      	ldr	r1, [pc, #396]	; (8000b28 <DIO_InitPin+0x2cc>)
 800099c:	4013      	ands	r3, r2
 800099e:	600b      	str	r3, [r1, #0]
						GPIOA_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 80009a0:	4b61      	ldr	r3, [pc, #388]	; (8000b28 <DIO_InitPin+0x2cc>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	79b9      	ldrb	r1, [r7, #6]
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	495e      	ldr	r1, [pc, #376]	; (8000b28 <DIO_InitPin+0x2cc>)
 80009b0:	4313      	orrs	r3, r2
 80009b2:	600b      	str	r3, [r1, #0]
						SET_BIT(GPIOA_ODR,Local_Pin_num);
 80009b4:	4b5d      	ldr	r3, [pc, #372]	; (8000b2c <DIO_InitPin+0x2d0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	7bfa      	ldrb	r2, [r7, #15]
 80009ba:	2101      	movs	r1, #1
 80009bc:	fa01 f202 	lsl.w	r2, r1, r2
 80009c0:	4611      	mov	r1, r2
 80009c2:	4a5a      	ldr	r2, [pc, #360]	; (8000b2c <DIO_InitPin+0x2d0>)
 80009c4:	430b      	orrs	r3, r1
 80009c6:	6013      	str	r3, [r2, #0]
				break;
 80009c8:	f000 bf1f 	b.w	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_10MHZ_PULL)
 80009cc:	79bb      	ldrb	r3, [r7, #6]
 80009ce:	2b1f      	cmp	r3, #31
 80009d0:	d123      	bne.n	8000a1a <DIO_InitPin+0x1be>
						status =DIO_E_OUTPUT_10MHZ_PUSH;
 80009d2:	2301      	movs	r3, #1
 80009d4:	71bb      	strb	r3, [r7, #6]
						GPIOA_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 80009d6:	4b54      	ldr	r3, [pc, #336]	; (8000b28 <DIO_InitPin+0x2cc>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	210f      	movs	r1, #15
 80009e0:	fa01 f303 	lsl.w	r3, r1, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	4950      	ldr	r1, [pc, #320]	; (8000b28 <DIO_InitPin+0x2cc>)
 80009e8:	4013      	ands	r3, r2
 80009ea:	600b      	str	r3, [r1, #0]
						GPIOA_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 80009ec:	4b4e      	ldr	r3, [pc, #312]	; (8000b28 <DIO_InitPin+0x2cc>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	79b9      	ldrb	r1, [r7, #6]
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	494b      	ldr	r1, [pc, #300]	; (8000b28 <DIO_InitPin+0x2cc>)
 80009fc:	4313      	orrs	r3, r2
 80009fe:	600b      	str	r3, [r1, #0]
						CLR_BIT(GPIOA_ODR,Local_Pin_num);
 8000a00:	4b4a      	ldr	r3, [pc, #296]	; (8000b2c <DIO_InitPin+0x2d0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	7bfa      	ldrb	r2, [r7, #15]
 8000a06:	2101      	movs	r1, #1
 8000a08:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0c:	43d2      	mvns	r2, r2
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4a46      	ldr	r2, [pc, #280]	; (8000b2c <DIO_InitPin+0x2d0>)
 8000a12:	400b      	ands	r3, r1
 8000a14:	6013      	str	r3, [r2, #0]
				break;
 8000a16:	f000 bef8 	b.w	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_10MHZ_PUSH)
 8000a1a:	79bb      	ldrb	r3, [r7, #6]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d120      	bne.n	8000a62 <DIO_InitPin+0x206>
						GPIOA_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000a20:	4b41      	ldr	r3, [pc, #260]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	210f      	movs	r1, #15
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	493d      	ldr	r1, [pc, #244]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000a32:	4013      	ands	r3, r2
 8000a34:	600b      	str	r3, [r1, #0]
						GPIOA_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000a36:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	79b9      	ldrb	r1, [r7, #6]
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	fa01 f303 	lsl.w	r3, r1, r3
 8000a44:	4938      	ldr	r1, [pc, #224]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000a46:	4313      	orrs	r3, r2
 8000a48:	600b      	str	r3, [r1, #0]
						SET_BIT(GPIOA_ODR,Local_Pin_num);
 8000a4a:	4b38      	ldr	r3, [pc, #224]	; (8000b2c <DIO_InitPin+0x2d0>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	7bfa      	ldrb	r2, [r7, #15]
 8000a50:	2101      	movs	r1, #1
 8000a52:	fa01 f202 	lsl.w	r2, r1, r2
 8000a56:	4611      	mov	r1, r2
 8000a58:	4a34      	ldr	r2, [pc, #208]	; (8000b2c <DIO_InitPin+0x2d0>)
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	6013      	str	r3, [r2, #0]
				break;
 8000a5e:	f000 bed4 	b.w	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_50MHZ_PULL)
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	2b3f      	cmp	r3, #63	; 0x3f
 8000a66:	d123      	bne.n	8000ab0 <DIO_InitPin+0x254>
						status =DIO_E_OUTPUT_50MHZ_PUSH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	71bb      	strb	r3, [r7, #6]
						GPIOA_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000a6c:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	210f      	movs	r1, #15
 8000a76:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	492a      	ldr	r1, [pc, #168]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000a7e:	4013      	ands	r3, r2
 8000a80:	600b      	str	r3, [r1, #0]
						GPIOA_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000a82:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	79b9      	ldrb	r1, [r7, #6]
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	4925      	ldr	r1, [pc, #148]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000a92:	4313      	orrs	r3, r2
 8000a94:	600b      	str	r3, [r1, #0]
						CLR_BIT(GPIOA_ODR,Local_Pin_num);
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <DIO_InitPin+0x2d0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	7bfa      	ldrb	r2, [r7, #15]
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa2:	43d2      	mvns	r2, r2
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <DIO_InitPin+0x2d0>)
 8000aa8:	400b      	ands	r3, r1
 8000aaa:	6013      	str	r3, [r2, #0]
				break;
 8000aac:	f000 bead 	b.w	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_50MHZ_PUSH)
 8000ab0:	79bb      	ldrb	r3, [r7, #6]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d120      	bne.n	8000af8 <DIO_InitPin+0x29c>
						GPIOA_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	210f      	movs	r1, #15
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	4918      	ldr	r1, [pc, #96]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000ac8:	4013      	ands	r3, r2
 8000aca:	600b      	str	r3, [r1, #0]
						GPIOA_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	79b9      	ldrb	r1, [r7, #6]
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	4913      	ldr	r1, [pc, #76]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000adc:	4313      	orrs	r3, r2
 8000ade:	600b      	str	r3, [r1, #0]
						SET_BIT(GPIOA_ODR,Local_Pin_num);
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <DIO_InitPin+0x2d0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	7bfa      	ldrb	r2, [r7, #15]
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8000aec:	4611      	mov	r1, r2
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <DIO_InitPin+0x2d0>)
 8000af0:	430b      	orrs	r3, r1
 8000af2:	6013      	str	r3, [r2, #0]
				break;
 8000af4:	f000 be89 	b.w	800180a <DIO_InitPin+0xfae>
						GPIOA_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	210f      	movs	r1, #15
 8000b02:	fa01 f303 	lsl.w	r3, r1, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	4907      	ldr	r1, [pc, #28]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	600b      	str	r3, [r1, #0]
						GPIOA_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	79b9      	ldrb	r1, [r7, #6]
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	4902      	ldr	r1, [pc, #8]	; (8000b28 <DIO_InitPin+0x2cc>)
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	600b      	str	r3, [r1, #0]
				break;
 8000b22:	f000 be72 	b.w	800180a <DIO_InitPin+0xfae>
 8000b26:	bf00      	nop
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	4001080c 	.word	0x4001080c
					Local_Pin_num -=8 ;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	3b08      	subs	r3, #8
 8000b34:	73fb      	strb	r3, [r7, #15]
					if(status==DIO_E_INPUT_PULL_DOWN)
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	2b8f      	cmp	r3, #143	; 0x8f
 8000b3a:	d124      	bne.n	8000b86 <DIO_InitPin+0x32a>
							status=DIO_E_INPUT_PULL_UP;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	71bb      	strb	r3, [r7, #6]
							GPIOA_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000b40:	4ba2      	ldr	r3, [pc, #648]	; (8000dcc <DIO_InitPin+0x570>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	210f      	movs	r1, #15
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	499e      	ldr	r1, [pc, #632]	; (8000dcc <DIO_InitPin+0x570>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	600b      	str	r3, [r1, #0]
							GPIOA_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000b56:	4b9d      	ldr	r3, [pc, #628]	; (8000dcc <DIO_InitPin+0x570>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	79b9      	ldrb	r1, [r7, #6]
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	fa01 f303 	lsl.w	r3, r1, r3
 8000b64:	4999      	ldr	r1, [pc, #612]	; (8000dcc <DIO_InitPin+0x570>)
 8000b66:	4313      	orrs	r3, r2
 8000b68:	600b      	str	r3, [r1, #0]
							CLR_BIT(GPIOA_ODR,(Local_Pin_num+8));
 8000b6a:	4b99      	ldr	r3, [pc, #612]	; (8000dd0 <DIO_InitPin+0x574>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	7bfa      	ldrb	r2, [r7, #15]
 8000b70:	3208      	adds	r2, #8
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f202 	lsl.w	r2, r1, r2
 8000b78:	43d2      	mvns	r2, r2
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4a94      	ldr	r2, [pc, #592]	; (8000dd0 <DIO_InitPin+0x574>)
 8000b7e:	400b      	ands	r3, r1
 8000b80:	6013      	str	r3, [r2, #0]
				break;
 8000b82:	f000 be42 	b.w	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_INPUT_PULL_UP)
 8000b86:	79bb      	ldrb	r3, [r7, #6]
 8000b88:	2b08      	cmp	r3, #8
 8000b8a:	d121      	bne.n	8000bd0 <DIO_InitPin+0x374>
							GPIOA_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000b8c:	4b8f      	ldr	r3, [pc, #572]	; (8000dcc <DIO_InitPin+0x570>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	210f      	movs	r1, #15
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	498b      	ldr	r1, [pc, #556]	; (8000dcc <DIO_InitPin+0x570>)
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	600b      	str	r3, [r1, #0]
							GPIOA_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000ba2:	4b8a      	ldr	r3, [pc, #552]	; (8000dcc <DIO_InitPin+0x570>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	79b9      	ldrb	r1, [r7, #6]
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	4986      	ldr	r1, [pc, #536]	; (8000dcc <DIO_InitPin+0x570>)
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	600b      	str	r3, [r1, #0]
							SET_BIT(GPIOA_ODR,(Local_Pin_num+8));
 8000bb6:	4b86      	ldr	r3, [pc, #536]	; (8000dd0 <DIO_InitPin+0x574>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	7bfa      	ldrb	r2, [r7, #15]
 8000bbc:	3208      	adds	r2, #8
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4a82      	ldr	r2, [pc, #520]	; (8000dd0 <DIO_InitPin+0x574>)
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	6013      	str	r3, [r2, #0]
				break;
 8000bcc:	f000 be1d 	b.w	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_2MHZ_PULL)
 8000bd0:	79bb      	ldrb	r3, [r7, #6]
 8000bd2:	2b2f      	cmp	r3, #47	; 0x2f
 8000bd4:	d124      	bne.n	8000c20 <DIO_InitPin+0x3c4>
							status =DIO_E_OUTPUT_2MHZ_PUSH;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	71bb      	strb	r3, [r7, #6]
							GPIOA_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000bda:	4b7c      	ldr	r3, [pc, #496]	; (8000dcc <DIO_InitPin+0x570>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	210f      	movs	r1, #15
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	4978      	ldr	r1, [pc, #480]	; (8000dcc <DIO_InitPin+0x570>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	600b      	str	r3, [r1, #0]
							GPIOA_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000bf0:	4b76      	ldr	r3, [pc, #472]	; (8000dcc <DIO_InitPin+0x570>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	79b9      	ldrb	r1, [r7, #6]
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	4973      	ldr	r1, [pc, #460]	; (8000dcc <DIO_InitPin+0x570>)
 8000c00:	4313      	orrs	r3, r2
 8000c02:	600b      	str	r3, [r1, #0]
							CLR_BIT(GPIOA_ODR,(Local_Pin_num+8));
 8000c04:	4b72      	ldr	r3, [pc, #456]	; (8000dd0 <DIO_InitPin+0x574>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	7bfa      	ldrb	r2, [r7, #15]
 8000c0a:	3208      	adds	r2, #8
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c12:	43d2      	mvns	r2, r2
 8000c14:	4611      	mov	r1, r2
 8000c16:	4a6e      	ldr	r2, [pc, #440]	; (8000dd0 <DIO_InitPin+0x574>)
 8000c18:	400b      	ands	r3, r1
 8000c1a:	6013      	str	r3, [r2, #0]
				break;
 8000c1c:	f000 bdf5 	b.w	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_2MHZ_PUSH)
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d121      	bne.n	8000c6a <DIO_InitPin+0x40e>
							GPIOA_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000c26:	4b69      	ldr	r3, [pc, #420]	; (8000dcc <DIO_InitPin+0x570>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	210f      	movs	r1, #15
 8000c30:	fa01 f303 	lsl.w	r3, r1, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	4965      	ldr	r1, [pc, #404]	; (8000dcc <DIO_InitPin+0x570>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	600b      	str	r3, [r1, #0]
							GPIOA_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000c3c:	4b63      	ldr	r3, [pc, #396]	; (8000dcc <DIO_InitPin+0x570>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	79b9      	ldrb	r1, [r7, #6]
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	4960      	ldr	r1, [pc, #384]	; (8000dcc <DIO_InitPin+0x570>)
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	600b      	str	r3, [r1, #0]
							SET_BIT(GPIOA_ODR,(Local_Pin_num+8));
 8000c50:	4b5f      	ldr	r3, [pc, #380]	; (8000dd0 <DIO_InitPin+0x574>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	7bfa      	ldrb	r2, [r7, #15]
 8000c56:	3208      	adds	r2, #8
 8000c58:	2101      	movs	r1, #1
 8000c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4a5b      	ldr	r2, [pc, #364]	; (8000dd0 <DIO_InitPin+0x574>)
 8000c62:	430b      	orrs	r3, r1
 8000c64:	6013      	str	r3, [r2, #0]
				break;
 8000c66:	f000 bdd0 	b.w	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_10MHZ_PULL)
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	2b1f      	cmp	r3, #31
 8000c6e:	d124      	bne.n	8000cba <DIO_InitPin+0x45e>
							status =DIO_E_OUTPUT_10MHZ_PUSH;
 8000c70:	2301      	movs	r3, #1
 8000c72:	71bb      	strb	r3, [r7, #6]
							GPIOA_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000c74:	4b55      	ldr	r3, [pc, #340]	; (8000dcc <DIO_InitPin+0x570>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	210f      	movs	r1, #15
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	4951      	ldr	r1, [pc, #324]	; (8000dcc <DIO_InitPin+0x570>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	600b      	str	r3, [r1, #0]
							GPIOA_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000c8a:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <DIO_InitPin+0x570>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	79b9      	ldrb	r1, [r7, #6]
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	494c      	ldr	r1, [pc, #304]	; (8000dcc <DIO_InitPin+0x570>)
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	600b      	str	r3, [r1, #0]
							CLR_BIT(GPIOA_ODR,(Local_Pin_num+8));
 8000c9e:	4b4c      	ldr	r3, [pc, #304]	; (8000dd0 <DIO_InitPin+0x574>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	7bfa      	ldrb	r2, [r7, #15]
 8000ca4:	3208      	adds	r2, #8
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cac:	43d2      	mvns	r2, r2
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4a47      	ldr	r2, [pc, #284]	; (8000dd0 <DIO_InitPin+0x574>)
 8000cb2:	400b      	ands	r3, r1
 8000cb4:	6013      	str	r3, [r2, #0]
				break;
 8000cb6:	f000 bda8 	b.w	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_10MHZ_PUSH)
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d121      	bne.n	8000d04 <DIO_InitPin+0x4a8>
							GPIOA_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000cc0:	4b42      	ldr	r3, [pc, #264]	; (8000dcc <DIO_InitPin+0x570>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	210f      	movs	r1, #15
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	493e      	ldr	r1, [pc, #248]	; (8000dcc <DIO_InitPin+0x570>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	600b      	str	r3, [r1, #0]
							GPIOA_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000cd6:	4b3d      	ldr	r3, [pc, #244]	; (8000dcc <DIO_InitPin+0x570>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	79b9      	ldrb	r1, [r7, #6]
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce4:	4939      	ldr	r1, [pc, #228]	; (8000dcc <DIO_InitPin+0x570>)
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	600b      	str	r3, [r1, #0]
							SET_BIT(GPIOA_ODR,(Local_Pin_num+8));
 8000cea:	4b39      	ldr	r3, [pc, #228]	; (8000dd0 <DIO_InitPin+0x574>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	3208      	adds	r2, #8
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4a35      	ldr	r2, [pc, #212]	; (8000dd0 <DIO_InitPin+0x574>)
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	6013      	str	r3, [r2, #0]
				break;
 8000d00:	f000 bd83 	b.w	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_50MHZ_PULL)
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	2b3f      	cmp	r3, #63	; 0x3f
 8000d08:	d124      	bne.n	8000d54 <DIO_InitPin+0x4f8>
							status =DIO_E_OUTPUT_50MHZ_PUSH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	71bb      	strb	r3, [r7, #6]
							GPIOA_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000d0e:	4b2f      	ldr	r3, [pc, #188]	; (8000dcc <DIO_InitPin+0x570>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	210f      	movs	r1, #15
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	492b      	ldr	r1, [pc, #172]	; (8000dcc <DIO_InitPin+0x570>)
 8000d20:	4013      	ands	r3, r2
 8000d22:	600b      	str	r3, [r1, #0]
							GPIOA_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000d24:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <DIO_InitPin+0x570>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	79b9      	ldrb	r1, [r7, #6]
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	4926      	ldr	r1, [pc, #152]	; (8000dcc <DIO_InitPin+0x570>)
 8000d34:	4313      	orrs	r3, r2
 8000d36:	600b      	str	r3, [r1, #0]
							CLR_BIT(GPIOA_ODR,(Local_Pin_num+8));
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <DIO_InitPin+0x574>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	3208      	adds	r2, #8
 8000d40:	2101      	movs	r1, #1
 8000d42:	fa01 f202 	lsl.w	r2, r1, r2
 8000d46:	43d2      	mvns	r2, r2
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <DIO_InitPin+0x574>)
 8000d4c:	400b      	ands	r3, r1
 8000d4e:	6013      	str	r3, [r2, #0]
				break;
 8000d50:	f000 bd5b 	b.w	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_50MHZ_PUSH)
 8000d54:	79bb      	ldrb	r3, [r7, #6]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d121      	bne.n	8000d9e <DIO_InitPin+0x542>
							GPIOA_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <DIO_InitPin+0x570>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	210f      	movs	r1, #15
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	4918      	ldr	r1, [pc, #96]	; (8000dcc <DIO_InitPin+0x570>)
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	600b      	str	r3, [r1, #0]
							GPIOA_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000d70:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <DIO_InitPin+0x570>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	79b9      	ldrb	r1, [r7, #6]
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	4913      	ldr	r1, [pc, #76]	; (8000dcc <DIO_InitPin+0x570>)
 8000d80:	4313      	orrs	r3, r2
 8000d82:	600b      	str	r3, [r1, #0]
							SET_BIT(GPIOA_ODR,(Local_Pin_num+8));
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <DIO_InitPin+0x574>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	7bfa      	ldrb	r2, [r7, #15]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d92:	4611      	mov	r1, r2
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <DIO_InitPin+0x574>)
 8000d96:	430b      	orrs	r3, r1
 8000d98:	6013      	str	r3, [r2, #0]
				break;
 8000d9a:	f000 bd36 	b.w	800180a <DIO_InitPin+0xfae>
							GPIOA_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <DIO_InitPin+0x570>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	210f      	movs	r1, #15
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	4907      	ldr	r1, [pc, #28]	; (8000dcc <DIO_InitPin+0x570>)
 8000db0:	4013      	ands	r3, r2
 8000db2:	600b      	str	r3, [r1, #0]
							GPIOA_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <DIO_InitPin+0x570>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	79b9      	ldrb	r1, [r7, #6]
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	4902      	ldr	r1, [pc, #8]	; (8000dcc <DIO_InitPin+0x570>)
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	600b      	str	r3, [r1, #0]
				break;
 8000dc8:	f000 bd1f 	b.w	800180a <DIO_InitPin+0xfae>
 8000dcc:	40010804 	.word	0x40010804
 8000dd0:	4001080c 	.word	0x4001080c
				if( Local_Pin_num < 8 )
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	2b07      	cmp	r3, #7
 8000dd8:	f200 8146 	bhi.w	8001068 <DIO_InitPin+0x80c>
					if(status==DIO_E_INPUT_PULL_DOWN)
 8000ddc:	79bb      	ldrb	r3, [r7, #6]
 8000dde:	2b8f      	cmp	r3, #143	; 0x8f
 8000de0:	d123      	bne.n	8000e2a <DIO_InitPin+0x5ce>
						status=DIO_E_INPUT_PULL_UP;
 8000de2:	2308      	movs	r3, #8
 8000de4:	71bb      	strb	r3, [r7, #6]
						GPIOB_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000de6:	4b9e      	ldr	r3, [pc, #632]	; (8001060 <DIO_InitPin+0x804>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	210f      	movs	r1, #15
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	499a      	ldr	r1, [pc, #616]	; (8001060 <DIO_InitPin+0x804>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	600b      	str	r3, [r1, #0]
						GPIOB_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000dfc:	4b98      	ldr	r3, [pc, #608]	; (8001060 <DIO_InitPin+0x804>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	79b9      	ldrb	r1, [r7, #6]
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	4995      	ldr	r1, [pc, #596]	; (8001060 <DIO_InitPin+0x804>)
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	600b      	str	r3, [r1, #0]
						CLR_BIT(GPIOB_ODR,Local_Pin_num);
 8000e10:	4b94      	ldr	r3, [pc, #592]	; (8001064 <DIO_InitPin+0x808>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	7bfa      	ldrb	r2, [r7, #15]
 8000e16:	2101      	movs	r1, #1
 8000e18:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1c:	43d2      	mvns	r2, r2
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4a90      	ldr	r2, [pc, #576]	; (8001064 <DIO_InitPin+0x808>)
 8000e22:	400b      	ands	r3, r1
 8000e24:	6013      	str	r3, [r2, #0]
				break;
 8000e26:	f000 bcf0 	b.w	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_INPUT_PULL_UP)
 8000e2a:	79bb      	ldrb	r3, [r7, #6]
 8000e2c:	2b08      	cmp	r3, #8
 8000e2e:	d120      	bne.n	8000e72 <DIO_InitPin+0x616>
						GPIOB_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000e30:	4b8b      	ldr	r3, [pc, #556]	; (8001060 <DIO_InitPin+0x804>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	210f      	movs	r1, #15
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	4987      	ldr	r1, [pc, #540]	; (8001060 <DIO_InitPin+0x804>)
 8000e42:	4013      	ands	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
						GPIOB_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000e46:	4b86      	ldr	r3, [pc, #536]	; (8001060 <DIO_InitPin+0x804>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	79b9      	ldrb	r1, [r7, #6]
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	4982      	ldr	r1, [pc, #520]	; (8001060 <DIO_InitPin+0x804>)
 8000e56:	4313      	orrs	r3, r2
 8000e58:	600b      	str	r3, [r1, #0]
						SET_BIT(GPIOB_ODR,Local_Pin_num);
 8000e5a:	4b82      	ldr	r3, [pc, #520]	; (8001064 <DIO_InitPin+0x808>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	7bfa      	ldrb	r2, [r7, #15]
 8000e60:	2101      	movs	r1, #1
 8000e62:	fa01 f202 	lsl.w	r2, r1, r2
 8000e66:	4611      	mov	r1, r2
 8000e68:	4a7e      	ldr	r2, [pc, #504]	; (8001064 <DIO_InitPin+0x808>)
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	6013      	str	r3, [r2, #0]
				break;
 8000e6e:	f000 bccc 	b.w	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_2MHZ_PULL)
 8000e72:	79bb      	ldrb	r3, [r7, #6]
 8000e74:	2b2f      	cmp	r3, #47	; 0x2f
 8000e76:	d123      	bne.n	8000ec0 <DIO_InitPin+0x664>
						status =DIO_E_OUTPUT_2MHZ_PUSH;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	71bb      	strb	r3, [r7, #6]
						GPIOB_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000e7c:	4b78      	ldr	r3, [pc, #480]	; (8001060 <DIO_InitPin+0x804>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	210f      	movs	r1, #15
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	4974      	ldr	r1, [pc, #464]	; (8001060 <DIO_InitPin+0x804>)
 8000e8e:	4013      	ands	r3, r2
 8000e90:	600b      	str	r3, [r1, #0]
						GPIOB_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000e92:	4b73      	ldr	r3, [pc, #460]	; (8001060 <DIO_InitPin+0x804>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	79b9      	ldrb	r1, [r7, #6]
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	496f      	ldr	r1, [pc, #444]	; (8001060 <DIO_InitPin+0x804>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]
						CLR_BIT(GPIOB_ODR,Local_Pin_num);
 8000ea6:	4b6f      	ldr	r3, [pc, #444]	; (8001064 <DIO_InitPin+0x808>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	7bfa      	ldrb	r2, [r7, #15]
 8000eac:	2101      	movs	r1, #1
 8000eae:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb2:	43d2      	mvns	r2, r2
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4a6b      	ldr	r2, [pc, #428]	; (8001064 <DIO_InitPin+0x808>)
 8000eb8:	400b      	ands	r3, r1
 8000eba:	6013      	str	r3, [r2, #0]
				break;
 8000ebc:	f000 bca5 	b.w	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_2MHZ_PUSH)
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d120      	bne.n	8000f08 <DIO_InitPin+0x6ac>
						GPIOB_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000ec6:	4b66      	ldr	r3, [pc, #408]	; (8001060 <DIO_InitPin+0x804>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	210f      	movs	r1, #15
 8000ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	4962      	ldr	r1, [pc, #392]	; (8001060 <DIO_InitPin+0x804>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	600b      	str	r3, [r1, #0]
						GPIOB_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000edc:	4b60      	ldr	r3, [pc, #384]	; (8001060 <DIO_InitPin+0x804>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	79b9      	ldrb	r1, [r7, #6]
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eea:	495d      	ldr	r1, [pc, #372]	; (8001060 <DIO_InitPin+0x804>)
 8000eec:	4313      	orrs	r3, r2
 8000eee:	600b      	str	r3, [r1, #0]
						SET_BIT(GPIOB_ODR,Local_Pin_num);
 8000ef0:	4b5c      	ldr	r3, [pc, #368]	; (8001064 <DIO_InitPin+0x808>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	7bfa      	ldrb	r2, [r7, #15]
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	4611      	mov	r1, r2
 8000efe:	4a59      	ldr	r2, [pc, #356]	; (8001064 <DIO_InitPin+0x808>)
 8000f00:	430b      	orrs	r3, r1
 8000f02:	6013      	str	r3, [r2, #0]
				break;
 8000f04:	f000 bc81 	b.w	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_10MHZ_PULL)
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	2b1f      	cmp	r3, #31
 8000f0c:	d123      	bne.n	8000f56 <DIO_InitPin+0x6fa>
						status =DIO_E_OUTPUT_10MHZ_PUSH;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	71bb      	strb	r3, [r7, #6]
						GPIOB_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000f12:	4b53      	ldr	r3, [pc, #332]	; (8001060 <DIO_InitPin+0x804>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	494f      	ldr	r1, [pc, #316]	; (8001060 <DIO_InitPin+0x804>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
						GPIOB_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000f28:	4b4d      	ldr	r3, [pc, #308]	; (8001060 <DIO_InitPin+0x804>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	79b9      	ldrb	r1, [r7, #6]
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	494a      	ldr	r1, [pc, #296]	; (8001060 <DIO_InitPin+0x804>)
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	600b      	str	r3, [r1, #0]
						CLR_BIT(GPIOB_ODR,Local_Pin_num);
 8000f3c:	4b49      	ldr	r3, [pc, #292]	; (8001064 <DIO_InitPin+0x808>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	2101      	movs	r1, #1
 8000f44:	fa01 f202 	lsl.w	r2, r1, r2
 8000f48:	43d2      	mvns	r2, r2
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4a45      	ldr	r2, [pc, #276]	; (8001064 <DIO_InitPin+0x808>)
 8000f4e:	400b      	ands	r3, r1
 8000f50:	6013      	str	r3, [r2, #0]
				break;
 8000f52:	f000 bc5a 	b.w	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_10MHZ_PUSH)
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d120      	bne.n	8000f9e <DIO_InitPin+0x742>
						GPIOB_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000f5c:	4b40      	ldr	r3, [pc, #256]	; (8001060 <DIO_InitPin+0x804>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	210f      	movs	r1, #15
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	493c      	ldr	r1, [pc, #240]	; (8001060 <DIO_InitPin+0x804>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]
						GPIOB_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000f72:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <DIO_InitPin+0x804>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	79b9      	ldrb	r1, [r7, #6]
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	4937      	ldr	r1, [pc, #220]	; (8001060 <DIO_InitPin+0x804>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	600b      	str	r3, [r1, #0]
						SET_BIT(GPIOB_ODR,Local_Pin_num);
 8000f86:	4b37      	ldr	r3, [pc, #220]	; (8001064 <DIO_InitPin+0x808>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	4611      	mov	r1, r2
 8000f94:	4a33      	ldr	r2, [pc, #204]	; (8001064 <DIO_InitPin+0x808>)
 8000f96:	430b      	orrs	r3, r1
 8000f98:	6013      	str	r3, [r2, #0]
				break;
 8000f9a:	f000 bc36 	b.w	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_50MHZ_PULL)
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	2b3f      	cmp	r3, #63	; 0x3f
 8000fa2:	d123      	bne.n	8000fec <DIO_InitPin+0x790>
						status =DIO_E_OUTPUT_50MHZ_PUSH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	71bb      	strb	r3, [r7, #6]
						GPIOB_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <DIO_InitPin+0x804>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	210f      	movs	r1, #15
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	4929      	ldr	r1, [pc, #164]	; (8001060 <DIO_InitPin+0x804>)
 8000fba:	4013      	ands	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]
						GPIOB_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <DIO_InitPin+0x804>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	79b9      	ldrb	r1, [r7, #6]
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	4924      	ldr	r1, [pc, #144]	; (8001060 <DIO_InitPin+0x804>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	600b      	str	r3, [r1, #0]
						CLR_BIT(GPIOB_ODR,Local_Pin_num);
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <DIO_InitPin+0x808>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	7bfa      	ldrb	r2, [r7, #15]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	fa01 f202 	lsl.w	r2, r1, r2
 8000fde:	43d2      	mvns	r2, r2
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4a20      	ldr	r2, [pc, #128]	; (8001064 <DIO_InitPin+0x808>)
 8000fe4:	400b      	ands	r3, r1
 8000fe6:	6013      	str	r3, [r2, #0]
				break;
 8000fe8:	f000 bc0f 	b.w	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_50MHZ_PUSH)
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d11f      	bne.n	8001032 <DIO_InitPin+0x7d6>
						GPIOB_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <DIO_InitPin+0x804>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	4917      	ldr	r1, [pc, #92]	; (8001060 <DIO_InitPin+0x804>)
 8001004:	4013      	ands	r3, r2
 8001006:	600b      	str	r3, [r1, #0]
						GPIOB_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <DIO_InitPin+0x804>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	79b9      	ldrb	r1, [r7, #6]
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	4912      	ldr	r1, [pc, #72]	; (8001060 <DIO_InitPin+0x804>)
 8001018:	4313      	orrs	r3, r2
 800101a:	600b      	str	r3, [r1, #0]
						SET_BIT(GPIOB_ODR,Local_Pin_num);
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <DIO_InitPin+0x808>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	2101      	movs	r1, #1
 8001024:	fa01 f202 	lsl.w	r2, r1, r2
 8001028:	4611      	mov	r1, r2
 800102a:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <DIO_InitPin+0x808>)
 800102c:	430b      	orrs	r3, r1
 800102e:	6013      	str	r3, [r2, #0]
				break;
 8001030:	e3eb      	b.n	800180a <DIO_InitPin+0xfae>
						GPIOB_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <DIO_InitPin+0x804>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	210f      	movs	r1, #15
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	4907      	ldr	r1, [pc, #28]	; (8001060 <DIO_InitPin+0x804>)
 8001044:	4013      	ands	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
						GPIOB_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <DIO_InitPin+0x804>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	79b9      	ldrb	r1, [r7, #6]
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	4902      	ldr	r1, [pc, #8]	; (8001060 <DIO_InitPin+0x804>)
 8001058:	4313      	orrs	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
				break;
 800105c:	e3d5      	b.n	800180a <DIO_InitPin+0xfae>
 800105e:	bf00      	nop
 8001060:	40010c00 	.word	0x40010c00
 8001064:	40010c0c 	.word	0x40010c0c
					Local_Pin_num -=8 ;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	3b08      	subs	r3, #8
 800106c:	73fb      	strb	r3, [r7, #15]
					if(status==DIO_E_INPUT_PULL_DOWN)
 800106e:	79bb      	ldrb	r3, [r7, #6]
 8001070:	2b8f      	cmp	r3, #143	; 0x8f
 8001072:	d123      	bne.n	80010bc <DIO_InitPin+0x860>
							status=DIO_E_INPUT_PULL_UP;
 8001074:	2308      	movs	r3, #8
 8001076:	71bb      	strb	r3, [r7, #6]
							GPIOB_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8001078:	4b9e      	ldr	r3, [pc, #632]	; (80012f4 <DIO_InitPin+0xa98>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	210f      	movs	r1, #15
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	499a      	ldr	r1, [pc, #616]	; (80012f4 <DIO_InitPin+0xa98>)
 800108a:	4013      	ands	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
							GPIOB_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 800108e:	4b99      	ldr	r3, [pc, #612]	; (80012f4 <DIO_InitPin+0xa98>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	79b9      	ldrb	r1, [r7, #6]
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	4995      	ldr	r1, [pc, #596]	; (80012f4 <DIO_InitPin+0xa98>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
							CLR_BIT(GPIOB_ODR,(Local_Pin_num+8));
 80010a2:	4b95      	ldr	r3, [pc, #596]	; (80012f8 <DIO_InitPin+0xa9c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	7bfa      	ldrb	r2, [r7, #15]
 80010a8:	3208      	adds	r2, #8
 80010aa:	2101      	movs	r1, #1
 80010ac:	fa01 f202 	lsl.w	r2, r1, r2
 80010b0:	43d2      	mvns	r2, r2
 80010b2:	4611      	mov	r1, r2
 80010b4:	4a90      	ldr	r2, [pc, #576]	; (80012f8 <DIO_InitPin+0xa9c>)
 80010b6:	400b      	ands	r3, r1
 80010b8:	6013      	str	r3, [r2, #0]
				break;
 80010ba:	e3a6      	b.n	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_INPUT_PULL_UP)
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d120      	bne.n	8001104 <DIO_InitPin+0x8a8>
							GPIOB_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 80010c2:	4b8c      	ldr	r3, [pc, #560]	; (80012f4 <DIO_InitPin+0xa98>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	210f      	movs	r1, #15
 80010cc:	fa01 f303 	lsl.w	r3, r1, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	4988      	ldr	r1, [pc, #544]	; (80012f4 <DIO_InitPin+0xa98>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
							GPIOB_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 80010d8:	4b86      	ldr	r3, [pc, #536]	; (80012f4 <DIO_InitPin+0xa98>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	79b9      	ldrb	r1, [r7, #6]
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	4983      	ldr	r1, [pc, #524]	; (80012f4 <DIO_InitPin+0xa98>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	600b      	str	r3, [r1, #0]
							SET_BIT(GPIOB_ODR,(Local_Pin_num+8));
 80010ec:	4b82      	ldr	r3, [pc, #520]	; (80012f8 <DIO_InitPin+0xa9c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	3208      	adds	r2, #8
 80010f4:	2101      	movs	r1, #1
 80010f6:	fa01 f202 	lsl.w	r2, r1, r2
 80010fa:	4611      	mov	r1, r2
 80010fc:	4a7e      	ldr	r2, [pc, #504]	; (80012f8 <DIO_InitPin+0xa9c>)
 80010fe:	430b      	orrs	r3, r1
 8001100:	6013      	str	r3, [r2, #0]
				break;
 8001102:	e382      	b.n	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_2MHZ_PULL)
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	2b2f      	cmp	r3, #47	; 0x2f
 8001108:	d123      	bne.n	8001152 <DIO_InitPin+0x8f6>
							status =DIO_E_OUTPUT_2MHZ_PUSH;
 800110a:	2302      	movs	r3, #2
 800110c:	71bb      	strb	r3, [r7, #6]
							GPIOB_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 800110e:	4b79      	ldr	r3, [pc, #484]	; (80012f4 <DIO_InitPin+0xa98>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	210f      	movs	r1, #15
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	4975      	ldr	r1, [pc, #468]	; (80012f4 <DIO_InitPin+0xa98>)
 8001120:	4013      	ands	r3, r2
 8001122:	600b      	str	r3, [r1, #0]
							GPIOB_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 8001124:	4b73      	ldr	r3, [pc, #460]	; (80012f4 <DIO_InitPin+0xa98>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	79b9      	ldrb	r1, [r7, #6]
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	4970      	ldr	r1, [pc, #448]	; (80012f4 <DIO_InitPin+0xa98>)
 8001134:	4313      	orrs	r3, r2
 8001136:	600b      	str	r3, [r1, #0]
							CLR_BIT(GPIOB_ODR,(Local_Pin_num+8));
 8001138:	4b6f      	ldr	r3, [pc, #444]	; (80012f8 <DIO_InitPin+0xa9c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	3208      	adds	r2, #8
 8001140:	2101      	movs	r1, #1
 8001142:	fa01 f202 	lsl.w	r2, r1, r2
 8001146:	43d2      	mvns	r2, r2
 8001148:	4611      	mov	r1, r2
 800114a:	4a6b      	ldr	r2, [pc, #428]	; (80012f8 <DIO_InitPin+0xa9c>)
 800114c:	400b      	ands	r3, r1
 800114e:	6013      	str	r3, [r2, #0]
				break;
 8001150:	e35b      	b.n	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_2MHZ_PUSH)
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d120      	bne.n	800119a <DIO_InitPin+0x93e>
							GPIOB_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8001158:	4b66      	ldr	r3, [pc, #408]	; (80012f4 <DIO_InitPin+0xa98>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	210f      	movs	r1, #15
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	4962      	ldr	r1, [pc, #392]	; (80012f4 <DIO_InitPin+0xa98>)
 800116a:	4013      	ands	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
							GPIOB_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 800116e:	4b61      	ldr	r3, [pc, #388]	; (80012f4 <DIO_InitPin+0xa98>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	79b9      	ldrb	r1, [r7, #6]
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	495d      	ldr	r1, [pc, #372]	; (80012f4 <DIO_InitPin+0xa98>)
 800117e:	4313      	orrs	r3, r2
 8001180:	600b      	str	r3, [r1, #0]
							SET_BIT(GPIOB_ODR,(Local_Pin_num+8));
 8001182:	4b5d      	ldr	r3, [pc, #372]	; (80012f8 <DIO_InitPin+0xa9c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	7bfa      	ldrb	r2, [r7, #15]
 8001188:	3208      	adds	r2, #8
 800118a:	2101      	movs	r1, #1
 800118c:	fa01 f202 	lsl.w	r2, r1, r2
 8001190:	4611      	mov	r1, r2
 8001192:	4a59      	ldr	r2, [pc, #356]	; (80012f8 <DIO_InitPin+0xa9c>)
 8001194:	430b      	orrs	r3, r1
 8001196:	6013      	str	r3, [r2, #0]
				break;
 8001198:	e337      	b.n	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_10MHZ_PULL)
 800119a:	79bb      	ldrb	r3, [r7, #6]
 800119c:	2b1f      	cmp	r3, #31
 800119e:	d123      	bne.n	80011e8 <DIO_InitPin+0x98c>
							status =DIO_E_OUTPUT_10MHZ_PUSH;
 80011a0:	2301      	movs	r3, #1
 80011a2:	71bb      	strb	r3, [r7, #6]
							GPIOB_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 80011a4:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <DIO_InitPin+0xa98>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	210f      	movs	r1, #15
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	494f      	ldr	r1, [pc, #316]	; (80012f4 <DIO_InitPin+0xa98>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]
							GPIOB_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 80011ba:	4b4e      	ldr	r3, [pc, #312]	; (80012f4 <DIO_InitPin+0xa98>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	79b9      	ldrb	r1, [r7, #6]
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	494a      	ldr	r1, [pc, #296]	; (80012f4 <DIO_InitPin+0xa98>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]
							CLR_BIT(GPIOB_ODR,(Local_Pin_num+8));
 80011ce:	4b4a      	ldr	r3, [pc, #296]	; (80012f8 <DIO_InitPin+0xa9c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	3208      	adds	r2, #8
 80011d6:	2101      	movs	r1, #1
 80011d8:	fa01 f202 	lsl.w	r2, r1, r2
 80011dc:	43d2      	mvns	r2, r2
 80011de:	4611      	mov	r1, r2
 80011e0:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <DIO_InitPin+0xa9c>)
 80011e2:	400b      	ands	r3, r1
 80011e4:	6013      	str	r3, [r2, #0]
				break;
 80011e6:	e310      	b.n	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_10MHZ_PUSH)
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d120      	bne.n	8001230 <DIO_InitPin+0x9d4>
							GPIOB_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <DIO_InitPin+0xa98>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	210f      	movs	r1, #15
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	493d      	ldr	r1, [pc, #244]	; (80012f4 <DIO_InitPin+0xa98>)
 8001200:	4013      	ands	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
							GPIOB_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 8001204:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <DIO_InitPin+0xa98>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	79b9      	ldrb	r1, [r7, #6]
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	4938      	ldr	r1, [pc, #224]	; (80012f4 <DIO_InitPin+0xa98>)
 8001214:	4313      	orrs	r3, r2
 8001216:	600b      	str	r3, [r1, #0]
							SET_BIT(GPIOB_ODR,(Local_Pin_num+8));
 8001218:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <DIO_InitPin+0xa9c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	3208      	adds	r2, #8
 8001220:	2101      	movs	r1, #1
 8001222:	fa01 f202 	lsl.w	r2, r1, r2
 8001226:	4611      	mov	r1, r2
 8001228:	4a33      	ldr	r2, [pc, #204]	; (80012f8 <DIO_InitPin+0xa9c>)
 800122a:	430b      	orrs	r3, r1
 800122c:	6013      	str	r3, [r2, #0]
				break;
 800122e:	e2ec      	b.n	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_50MHZ_PULL)
 8001230:	79bb      	ldrb	r3, [r7, #6]
 8001232:	2b3f      	cmp	r3, #63	; 0x3f
 8001234:	d123      	bne.n	800127e <DIO_InitPin+0xa22>
							status =DIO_E_OUTPUT_50MHZ_PUSH;
 8001236:	2303      	movs	r3, #3
 8001238:	71bb      	strb	r3, [r7, #6]
							GPIOB_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 800123a:	4b2e      	ldr	r3, [pc, #184]	; (80012f4 <DIO_InitPin+0xa98>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	210f      	movs	r1, #15
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	492a      	ldr	r1, [pc, #168]	; (80012f4 <DIO_InitPin+0xa98>)
 800124c:	4013      	ands	r3, r2
 800124e:	600b      	str	r3, [r1, #0]
							GPIOB_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <DIO_InitPin+0xa98>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	79b9      	ldrb	r1, [r7, #6]
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	4925      	ldr	r1, [pc, #148]	; (80012f4 <DIO_InitPin+0xa98>)
 8001260:	4313      	orrs	r3, r2
 8001262:	600b      	str	r3, [r1, #0]
							CLR_BIT(GPIOB_ODR,(Local_Pin_num+8));
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <DIO_InitPin+0xa9c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	7bfa      	ldrb	r2, [r7, #15]
 800126a:	3208      	adds	r2, #8
 800126c:	2101      	movs	r1, #1
 800126e:	fa01 f202 	lsl.w	r2, r1, r2
 8001272:	43d2      	mvns	r2, r2
 8001274:	4611      	mov	r1, r2
 8001276:	4a20      	ldr	r2, [pc, #128]	; (80012f8 <DIO_InitPin+0xa9c>)
 8001278:	400b      	ands	r3, r1
 800127a:	6013      	str	r3, [r2, #0]
				break;
 800127c:	e2c5      	b.n	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_50MHZ_PUSH)
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	2b03      	cmp	r3, #3
 8001282:	d120      	bne.n	80012c6 <DIO_InitPin+0xa6a>
							GPIOB_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <DIO_InitPin+0xa98>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	210f      	movs	r1, #15
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	4917      	ldr	r1, [pc, #92]	; (80012f4 <DIO_InitPin+0xa98>)
 8001296:	4013      	ands	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
							GPIOB_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <DIO_InitPin+0xa98>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	79b9      	ldrb	r1, [r7, #6]
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	4912      	ldr	r1, [pc, #72]	; (80012f4 <DIO_InitPin+0xa98>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]
							SET_BIT(GPIOB_ODR,(Local_Pin_num+8));
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <DIO_InitPin+0xa9c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	3208      	adds	r2, #8
 80012b6:	2101      	movs	r1, #1
 80012b8:	fa01 f202 	lsl.w	r2, r1, r2
 80012bc:	4611      	mov	r1, r2
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <DIO_InitPin+0xa9c>)
 80012c0:	430b      	orrs	r3, r1
 80012c2:	6013      	str	r3, [r2, #0]
				break;
 80012c4:	e2a1      	b.n	800180a <DIO_InitPin+0xfae>
							GPIOB_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <DIO_InitPin+0xa98>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	210f      	movs	r1, #15
 80012d0:	fa01 f303 	lsl.w	r3, r1, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4907      	ldr	r1, [pc, #28]	; (80012f4 <DIO_InitPin+0xa98>)
 80012d8:	4013      	ands	r3, r2
 80012da:	600b      	str	r3, [r1, #0]
							GPIOB_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <DIO_InitPin+0xa98>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	79b9      	ldrb	r1, [r7, #6]
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	4902      	ldr	r1, [pc, #8]	; (80012f4 <DIO_InitPin+0xa98>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
				break;
 80012f0:	e28b      	b.n	800180a <DIO_InitPin+0xfae>
 80012f2:	bf00      	nop
 80012f4:	40010c04 	.word	0x40010c04
 80012f8:	40010c0c 	.word	0x40010c0c
				if( Local_Pin_num < 8 )
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	2b07      	cmp	r3, #7
 8001300:	f200 813e 	bhi.w	8001580 <DIO_InitPin+0xd24>
					if(status==DIO_E_INPUT_PULL_DOWN)
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	2b8f      	cmp	r3, #143	; 0x8f
 8001308:	d122      	bne.n	8001350 <DIO_InitPin+0xaf4>
						status=DIO_E_INPUT_PULL_UP;
 800130a:	2308      	movs	r3, #8
 800130c:	71bb      	strb	r3, [r7, #6]
						GPIOC_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 800130e:	4b9a      	ldr	r3, [pc, #616]	; (8001578 <DIO_InitPin+0xd1c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	210f      	movs	r1, #15
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	4996      	ldr	r1, [pc, #600]	; (8001578 <DIO_InitPin+0xd1c>)
 8001320:	4013      	ands	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
						GPIOC_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8001324:	4b94      	ldr	r3, [pc, #592]	; (8001578 <DIO_InitPin+0xd1c>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	79b9      	ldrb	r1, [r7, #6]
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	4991      	ldr	r1, [pc, #580]	; (8001578 <DIO_InitPin+0xd1c>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
						CLR_BIT(GPIOC_ODR,Local_Pin_num);
 8001338:	4b90      	ldr	r3, [pc, #576]	; (800157c <DIO_InitPin+0xd20>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	43d2      	mvns	r2, r2
 8001346:	4611      	mov	r1, r2
 8001348:	4a8c      	ldr	r2, [pc, #560]	; (800157c <DIO_InitPin+0xd20>)
 800134a:	400b      	ands	r3, r1
 800134c:	6013      	str	r3, [r2, #0]
				break;
 800134e:	e25c      	b.n	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_INPUT_PULL_UP)
 8001350:	79bb      	ldrb	r3, [r7, #6]
 8001352:	2b08      	cmp	r3, #8
 8001354:	d11f      	bne.n	8001396 <DIO_InitPin+0xb3a>
						GPIOC_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8001356:	4b88      	ldr	r3, [pc, #544]	; (8001578 <DIO_InitPin+0xd1c>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	210f      	movs	r1, #15
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	4984      	ldr	r1, [pc, #528]	; (8001578 <DIO_InitPin+0xd1c>)
 8001368:	4013      	ands	r3, r2
 800136a:	600b      	str	r3, [r1, #0]
						GPIOC_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 800136c:	4b82      	ldr	r3, [pc, #520]	; (8001578 <DIO_InitPin+0xd1c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	79b9      	ldrb	r1, [r7, #6]
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	497f      	ldr	r1, [pc, #508]	; (8001578 <DIO_InitPin+0xd1c>)
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
						SET_BIT(GPIOC_ODR,Local_Pin_num);
 8001380:	4b7e      	ldr	r3, [pc, #504]	; (800157c <DIO_InitPin+0xd20>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	7bfa      	ldrb	r2, [r7, #15]
 8001386:	2101      	movs	r1, #1
 8001388:	fa01 f202 	lsl.w	r2, r1, r2
 800138c:	4611      	mov	r1, r2
 800138e:	4a7b      	ldr	r2, [pc, #492]	; (800157c <DIO_InitPin+0xd20>)
 8001390:	430b      	orrs	r3, r1
 8001392:	6013      	str	r3, [r2, #0]
				break;
 8001394:	e239      	b.n	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_2MHZ_PULL)
 8001396:	79bb      	ldrb	r3, [r7, #6]
 8001398:	2b2f      	cmp	r3, #47	; 0x2f
 800139a:	d122      	bne.n	80013e2 <DIO_InitPin+0xb86>
						status =DIO_E_OUTPUT_2MHZ_PUSH;
 800139c:	2302      	movs	r3, #2
 800139e:	71bb      	strb	r3, [r7, #6]
						GPIOC_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 80013a0:	4b75      	ldr	r3, [pc, #468]	; (8001578 <DIO_InitPin+0xd1c>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	210f      	movs	r1, #15
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	4971      	ldr	r1, [pc, #452]	; (8001578 <DIO_InitPin+0xd1c>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
						GPIOC_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 80013b6:	4b70      	ldr	r3, [pc, #448]	; (8001578 <DIO_InitPin+0xd1c>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	79b9      	ldrb	r1, [r7, #6]
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	fa01 f303 	lsl.w	r3, r1, r3
 80013c4:	496c      	ldr	r1, [pc, #432]	; (8001578 <DIO_InitPin+0xd1c>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	600b      	str	r3, [r1, #0]
						CLR_BIT(GPIOC_ODR,Local_Pin_num);
 80013ca:	4b6c      	ldr	r3, [pc, #432]	; (800157c <DIO_InitPin+0xd20>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	2101      	movs	r1, #1
 80013d2:	fa01 f202 	lsl.w	r2, r1, r2
 80013d6:	43d2      	mvns	r2, r2
 80013d8:	4611      	mov	r1, r2
 80013da:	4a68      	ldr	r2, [pc, #416]	; (800157c <DIO_InitPin+0xd20>)
 80013dc:	400b      	ands	r3, r1
 80013de:	6013      	str	r3, [r2, #0]
				break;
 80013e0:	e213      	b.n	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_2MHZ_PUSH)
 80013e2:	79bb      	ldrb	r3, [r7, #6]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d11f      	bne.n	8001428 <DIO_InitPin+0xbcc>
						GPIOC_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 80013e8:	4b63      	ldr	r3, [pc, #396]	; (8001578 <DIO_InitPin+0xd1c>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	210f      	movs	r1, #15
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	495f      	ldr	r1, [pc, #380]	; (8001578 <DIO_InitPin+0xd1c>)
 80013fa:	4013      	ands	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
						GPIOC_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 80013fe:	4b5e      	ldr	r3, [pc, #376]	; (8001578 <DIO_InitPin+0xd1c>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	79b9      	ldrb	r1, [r7, #6]
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	495a      	ldr	r1, [pc, #360]	; (8001578 <DIO_InitPin+0xd1c>)
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
						SET_BIT(GPIOC_ODR,Local_Pin_num);
 8001412:	4b5a      	ldr	r3, [pc, #360]	; (800157c <DIO_InitPin+0xd20>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	2101      	movs	r1, #1
 800141a:	fa01 f202 	lsl.w	r2, r1, r2
 800141e:	4611      	mov	r1, r2
 8001420:	4a56      	ldr	r2, [pc, #344]	; (800157c <DIO_InitPin+0xd20>)
 8001422:	430b      	orrs	r3, r1
 8001424:	6013      	str	r3, [r2, #0]
				break;
 8001426:	e1f0      	b.n	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_10MHZ_PULL)
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	2b1f      	cmp	r3, #31
 800142c:	d122      	bne.n	8001474 <DIO_InitPin+0xc18>
						status =DIO_E_OUTPUT_10MHZ_PUSH;
 800142e:	2301      	movs	r3, #1
 8001430:	71bb      	strb	r3, [r7, #6]
						GPIOC_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8001432:	4b51      	ldr	r3, [pc, #324]	; (8001578 <DIO_InitPin+0xd1c>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	210f      	movs	r1, #15
 800143c:	fa01 f303 	lsl.w	r3, r1, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	494d      	ldr	r1, [pc, #308]	; (8001578 <DIO_InitPin+0xd1c>)
 8001444:	4013      	ands	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
						GPIOC_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8001448:	4b4b      	ldr	r3, [pc, #300]	; (8001578 <DIO_InitPin+0xd1c>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	79b9      	ldrb	r1, [r7, #6]
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	4948      	ldr	r1, [pc, #288]	; (8001578 <DIO_InitPin+0xd1c>)
 8001458:	4313      	orrs	r3, r2
 800145a:	600b      	str	r3, [r1, #0]
						CLR_BIT(GPIOC_ODR,Local_Pin_num);
 800145c:	4b47      	ldr	r3, [pc, #284]	; (800157c <DIO_InitPin+0xd20>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f202 	lsl.w	r2, r1, r2
 8001468:	43d2      	mvns	r2, r2
 800146a:	4611      	mov	r1, r2
 800146c:	4a43      	ldr	r2, [pc, #268]	; (800157c <DIO_InitPin+0xd20>)
 800146e:	400b      	ands	r3, r1
 8001470:	6013      	str	r3, [r2, #0]
				break;
 8001472:	e1ca      	b.n	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_10MHZ_PUSH)
 8001474:	79bb      	ldrb	r3, [r7, #6]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d11f      	bne.n	80014ba <DIO_InitPin+0xc5e>
						GPIOC_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 800147a:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <DIO_InitPin+0xd1c>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	210f      	movs	r1, #15
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	493b      	ldr	r1, [pc, #236]	; (8001578 <DIO_InitPin+0xd1c>)
 800148c:	4013      	ands	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
						GPIOC_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8001490:	4b39      	ldr	r3, [pc, #228]	; (8001578 <DIO_InitPin+0xd1c>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	79b9      	ldrb	r1, [r7, #6]
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	4936      	ldr	r1, [pc, #216]	; (8001578 <DIO_InitPin+0xd1c>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
						SET_BIT(GPIOC_ODR,Local_Pin_num);
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <DIO_InitPin+0xd20>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	2101      	movs	r1, #1
 80014ac:	fa01 f202 	lsl.w	r2, r1, r2
 80014b0:	4611      	mov	r1, r2
 80014b2:	4a32      	ldr	r2, [pc, #200]	; (800157c <DIO_InitPin+0xd20>)
 80014b4:	430b      	orrs	r3, r1
 80014b6:	6013      	str	r3, [r2, #0]
				break;
 80014b8:	e1a7      	b.n	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_50MHZ_PULL)
 80014ba:	79bb      	ldrb	r3, [r7, #6]
 80014bc:	2b3f      	cmp	r3, #63	; 0x3f
 80014be:	d122      	bne.n	8001506 <DIO_InitPin+0xcaa>
						status =DIO_E_OUTPUT_50MHZ_PUSH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	71bb      	strb	r3, [r7, #6]
						GPIOC_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 80014c4:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <DIO_InitPin+0xd1c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	210f      	movs	r1, #15
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	4928      	ldr	r1, [pc, #160]	; (8001578 <DIO_InitPin+0xd1c>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
						GPIOC_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <DIO_InitPin+0xd1c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	79b9      	ldrb	r1, [r7, #6]
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	fa01 f303 	lsl.w	r3, r1, r3
 80014e8:	4923      	ldr	r1, [pc, #140]	; (8001578 <DIO_InitPin+0xd1c>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
						CLR_BIT(GPIOC_ODR,Local_Pin_num);
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <DIO_InitPin+0xd20>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f202 	lsl.w	r2, r1, r2
 80014fa:	43d2      	mvns	r2, r2
 80014fc:	4611      	mov	r1, r2
 80014fe:	4a1f      	ldr	r2, [pc, #124]	; (800157c <DIO_InitPin+0xd20>)
 8001500:	400b      	ands	r3, r1
 8001502:	6013      	str	r3, [r2, #0]
				break;
 8001504:	e181      	b.n	800180a <DIO_InitPin+0xfae>
					else if(status==DIO_E_OUTPUT_50MHZ_PUSH)
 8001506:	79bb      	ldrb	r3, [r7, #6]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d11f      	bne.n	800154c <DIO_InitPin+0xcf0>
						GPIOC_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <DIO_InitPin+0xd1c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	210f      	movs	r1, #15
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	4916      	ldr	r1, [pc, #88]	; (8001578 <DIO_InitPin+0xd1c>)
 800151e:	4013      	ands	r3, r2
 8001520:	600b      	str	r3, [r1, #0]
						GPIOC_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <DIO_InitPin+0xd1c>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	79b9      	ldrb	r1, [r7, #6]
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	4911      	ldr	r1, [pc, #68]	; (8001578 <DIO_InitPin+0xd1c>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
						SET_BIT(GPIOC_ODR,Local_Pin_num);
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <DIO_InitPin+0xd20>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	2101      	movs	r1, #1
 800153e:	fa01 f202 	lsl.w	r2, r1, r2
 8001542:	4611      	mov	r1, r2
 8001544:	4a0d      	ldr	r2, [pc, #52]	; (800157c <DIO_InitPin+0xd20>)
 8001546:	430b      	orrs	r3, r1
 8001548:	6013      	str	r3, [r2, #0]
				break;
 800154a:	e15e      	b.n	800180a <DIO_InitPin+0xfae>
						GPIOC_CRL &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <DIO_InitPin+0xd1c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	210f      	movs	r1, #15
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	4906      	ldr	r1, [pc, #24]	; (8001578 <DIO_InitPin+0xd1c>)
 800155e:	4013      	ands	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
						GPIOC_CRL |=  ((u32)(status)<<(Local_Pin_num * 4));
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <DIO_InitPin+0xd1c>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	79b9      	ldrb	r1, [r7, #6]
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	4901      	ldr	r1, [pc, #4]	; (8001578 <DIO_InitPin+0xd1c>)
 8001572:	4313      	orrs	r3, r2
 8001574:	600b      	str	r3, [r1, #0]
				break;
 8001576:	e148      	b.n	800180a <DIO_InitPin+0xfae>
 8001578:	40011000 	.word	0x40011000
 800157c:	4001100c 	.word	0x4001100c
					Local_Pin_num =Local_Pin_num-8 ;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	3b08      	subs	r3, #8
 8001584:	73fb      	strb	r3, [r7, #15]
					if(status==DIO_E_INPUT_PULL_DOWN)
 8001586:	79bb      	ldrb	r3, [r7, #6]
 8001588:	2b8f      	cmp	r3, #143	; 0x8f
 800158a:	d123      	bne.n	80015d4 <DIO_InitPin+0xd78>
							status=DIO_E_INPUT_PULL_UP;
 800158c:	2308      	movs	r3, #8
 800158e:	71bb      	strb	r3, [r7, #6]
							GPIOC_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8001590:	4ba0      	ldr	r3, [pc, #640]	; (8001814 <DIO_InitPin+0xfb8>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	210f      	movs	r1, #15
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	499c      	ldr	r1, [pc, #624]	; (8001814 <DIO_InitPin+0xfb8>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
							GPIOC_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 80015a6:	4b9b      	ldr	r3, [pc, #620]	; (8001814 <DIO_InitPin+0xfb8>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	79b9      	ldrb	r1, [r7, #6]
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	4997      	ldr	r1, [pc, #604]	; (8001814 <DIO_InitPin+0xfb8>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
							CLR_BIT(GPIOC_ODR,(Local_Pin_num+8));
 80015ba:	4b97      	ldr	r3, [pc, #604]	; (8001818 <DIO_InitPin+0xfbc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	3208      	adds	r2, #8
 80015c2:	2101      	movs	r1, #1
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	43d2      	mvns	r2, r2
 80015ca:	4611      	mov	r1, r2
 80015cc:	4a92      	ldr	r2, [pc, #584]	; (8001818 <DIO_InitPin+0xfbc>)
 80015ce:	400b      	ands	r3, r1
 80015d0:	6013      	str	r3, [r2, #0]
				break;
 80015d2:	e11a      	b.n	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_INPUT_PULL_UP)
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d120      	bne.n	800161c <DIO_InitPin+0xdc0>
							GPIOC_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 80015da:	4b8e      	ldr	r3, [pc, #568]	; (8001814 <DIO_InitPin+0xfb8>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	210f      	movs	r1, #15
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	498a      	ldr	r1, [pc, #552]	; (8001814 <DIO_InitPin+0xfb8>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	600b      	str	r3, [r1, #0]
							GPIOC_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 80015f0:	4b88      	ldr	r3, [pc, #544]	; (8001814 <DIO_InitPin+0xfb8>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	79b9      	ldrb	r1, [r7, #6]
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	4985      	ldr	r1, [pc, #532]	; (8001814 <DIO_InitPin+0xfb8>)
 8001600:	4313      	orrs	r3, r2
 8001602:	600b      	str	r3, [r1, #0]
							SET_BIT(GPIOC_ODR,(Local_Pin_num+8));
 8001604:	4b84      	ldr	r3, [pc, #528]	; (8001818 <DIO_InitPin+0xfbc>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	3208      	adds	r2, #8
 800160c:	2101      	movs	r1, #1
 800160e:	fa01 f202 	lsl.w	r2, r1, r2
 8001612:	4611      	mov	r1, r2
 8001614:	4a80      	ldr	r2, [pc, #512]	; (8001818 <DIO_InitPin+0xfbc>)
 8001616:	430b      	orrs	r3, r1
 8001618:	6013      	str	r3, [r2, #0]
				break;
 800161a:	e0f6      	b.n	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_2MHZ_PULL)
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	2b2f      	cmp	r3, #47	; 0x2f
 8001620:	d123      	bne.n	800166a <DIO_InitPin+0xe0e>
							status =DIO_E_OUTPUT_2MHZ_PUSH;
 8001622:	2302      	movs	r3, #2
 8001624:	71bb      	strb	r3, [r7, #6]
							GPIOC_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8001626:	4b7b      	ldr	r3, [pc, #492]	; (8001814 <DIO_InitPin+0xfb8>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	210f      	movs	r1, #15
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	4977      	ldr	r1, [pc, #476]	; (8001814 <DIO_InitPin+0xfb8>)
 8001638:	4013      	ands	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
							GPIOC_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 800163c:	4b75      	ldr	r3, [pc, #468]	; (8001814 <DIO_InitPin+0xfb8>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	79b9      	ldrb	r1, [r7, #6]
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	fa01 f303 	lsl.w	r3, r1, r3
 800164a:	4972      	ldr	r1, [pc, #456]	; (8001814 <DIO_InitPin+0xfb8>)
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
							CLR_BIT(GPIOC_ODR,(Local_Pin_num+8));
 8001650:	4b71      	ldr	r3, [pc, #452]	; (8001818 <DIO_InitPin+0xfbc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	3208      	adds	r2, #8
 8001658:	2101      	movs	r1, #1
 800165a:	fa01 f202 	lsl.w	r2, r1, r2
 800165e:	43d2      	mvns	r2, r2
 8001660:	4611      	mov	r1, r2
 8001662:	4a6d      	ldr	r2, [pc, #436]	; (8001818 <DIO_InitPin+0xfbc>)
 8001664:	400b      	ands	r3, r1
 8001666:	6013      	str	r3, [r2, #0]
				break;
 8001668:	e0cf      	b.n	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_2MHZ_PUSH)
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d120      	bne.n	80016b2 <DIO_InitPin+0xe56>
							GPIOC_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8001670:	4b68      	ldr	r3, [pc, #416]	; (8001814 <DIO_InitPin+0xfb8>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	210f      	movs	r1, #15
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	4964      	ldr	r1, [pc, #400]	; (8001814 <DIO_InitPin+0xfb8>)
 8001682:	4013      	ands	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
							GPIOC_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 8001686:	4b63      	ldr	r3, [pc, #396]	; (8001814 <DIO_InitPin+0xfb8>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	79b9      	ldrb	r1, [r7, #6]
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	495f      	ldr	r1, [pc, #380]	; (8001814 <DIO_InitPin+0xfb8>)
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]
							SET_BIT(GPIOC_ODR,(Local_Pin_num+8));
 800169a:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <DIO_InitPin+0xfbc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	3208      	adds	r2, #8
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f202 	lsl.w	r2, r1, r2
 80016a8:	4611      	mov	r1, r2
 80016aa:	4a5b      	ldr	r2, [pc, #364]	; (8001818 <DIO_InitPin+0xfbc>)
 80016ac:	430b      	orrs	r3, r1
 80016ae:	6013      	str	r3, [r2, #0]
				break;
 80016b0:	e0ab      	b.n	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_10MHZ_PULL)
 80016b2:	79bb      	ldrb	r3, [r7, #6]
 80016b4:	2b1f      	cmp	r3, #31
 80016b6:	d123      	bne.n	8001700 <DIO_InitPin+0xea4>
							status =DIO_E_OUTPUT_10MHZ_PUSH;
 80016b8:	2301      	movs	r3, #1
 80016ba:	71bb      	strb	r3, [r7, #6]
							GPIOC_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 80016bc:	4b55      	ldr	r3, [pc, #340]	; (8001814 <DIO_InitPin+0xfb8>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	210f      	movs	r1, #15
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	4951      	ldr	r1, [pc, #324]	; (8001814 <DIO_InitPin+0xfb8>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
							GPIOC_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 80016d2:	4b50      	ldr	r3, [pc, #320]	; (8001814 <DIO_InitPin+0xfb8>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	79b9      	ldrb	r1, [r7, #6]
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	494c      	ldr	r1, [pc, #304]	; (8001814 <DIO_InitPin+0xfb8>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]
							CLR_BIT(GPIOC_ODR,(Local_Pin_num+8));
 80016e6:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <DIO_InitPin+0xfbc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	7bfa      	ldrb	r2, [r7, #15]
 80016ec:	3208      	adds	r2, #8
 80016ee:	2101      	movs	r1, #1
 80016f0:	fa01 f202 	lsl.w	r2, r1, r2
 80016f4:	43d2      	mvns	r2, r2
 80016f6:	4611      	mov	r1, r2
 80016f8:	4a47      	ldr	r2, [pc, #284]	; (8001818 <DIO_InitPin+0xfbc>)
 80016fa:	400b      	ands	r3, r1
 80016fc:	6013      	str	r3, [r2, #0]
				break;
 80016fe:	e084      	b.n	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_10MHZ_PUSH)
 8001700:	79bb      	ldrb	r3, [r7, #6]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d120      	bne.n	8001748 <DIO_InitPin+0xeec>
							GPIOC_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8001706:	4b43      	ldr	r3, [pc, #268]	; (8001814 <DIO_InitPin+0xfb8>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	210f      	movs	r1, #15
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	493f      	ldr	r1, [pc, #252]	; (8001814 <DIO_InitPin+0xfb8>)
 8001718:	4013      	ands	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
							GPIOC_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 800171c:	4b3d      	ldr	r3, [pc, #244]	; (8001814 <DIO_InitPin+0xfb8>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	79b9      	ldrb	r1, [r7, #6]
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	493a      	ldr	r1, [pc, #232]	; (8001814 <DIO_InitPin+0xfb8>)
 800172c:	4313      	orrs	r3, r2
 800172e:	600b      	str	r3, [r1, #0]
							SET_BIT(GPIOC_ODR,(Local_Pin_num+8));
 8001730:	4b39      	ldr	r3, [pc, #228]	; (8001818 <DIO_InitPin+0xfbc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	3208      	adds	r2, #8
 8001738:	2101      	movs	r1, #1
 800173a:	fa01 f202 	lsl.w	r2, r1, r2
 800173e:	4611      	mov	r1, r2
 8001740:	4a35      	ldr	r2, [pc, #212]	; (8001818 <DIO_InitPin+0xfbc>)
 8001742:	430b      	orrs	r3, r1
 8001744:	6013      	str	r3, [r2, #0]
				break;
 8001746:	e060      	b.n	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_50MHZ_PULL)
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	2b3f      	cmp	r3, #63	; 0x3f
 800174c:	d123      	bne.n	8001796 <DIO_InitPin+0xf3a>
							status =DIO_E_OUTPUT_50MHZ_PUSH;
 800174e:	2303      	movs	r3, #3
 8001750:	71bb      	strb	r3, [r7, #6]
							GPIOC_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 8001752:	4b30      	ldr	r3, [pc, #192]	; (8001814 <DIO_InitPin+0xfb8>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	210f      	movs	r1, #15
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	492c      	ldr	r1, [pc, #176]	; (8001814 <DIO_InitPin+0xfb8>)
 8001764:	4013      	ands	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
							GPIOC_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 8001768:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <DIO_InitPin+0xfb8>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	79b9      	ldrb	r1, [r7, #6]
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	4927      	ldr	r1, [pc, #156]	; (8001814 <DIO_InitPin+0xfb8>)
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]
							CLR_BIT(GPIOC_ODR,(Local_Pin_num+8));
 800177c:	4b26      	ldr	r3, [pc, #152]	; (8001818 <DIO_InitPin+0xfbc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	3208      	adds	r2, #8
 8001784:	2101      	movs	r1, #1
 8001786:	fa01 f202 	lsl.w	r2, r1, r2
 800178a:	43d2      	mvns	r2, r2
 800178c:	4611      	mov	r1, r2
 800178e:	4a22      	ldr	r2, [pc, #136]	; (8001818 <DIO_InitPin+0xfbc>)
 8001790:	400b      	ands	r3, r1
 8001792:	6013      	str	r3, [r2, #0]
				break;
 8001794:	e039      	b.n	800180a <DIO_InitPin+0xfae>
						else if(status==DIO_E_OUTPUT_50MHZ_PUSH)
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d120      	bne.n	80017de <DIO_InitPin+0xf82>
							GPIOC_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <DIO_InitPin+0xfb8>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	210f      	movs	r1, #15
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	4919      	ldr	r1, [pc, #100]	; (8001814 <DIO_InitPin+0xfb8>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
							GPIOC_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <DIO_InitPin+0xfb8>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	79b9      	ldrb	r1, [r7, #6]
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	4914      	ldr	r1, [pc, #80]	; (8001814 <DIO_InitPin+0xfb8>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
							SET_BIT(GPIOC_ODR,(Local_Pin_num+8));
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <DIO_InitPin+0xfbc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	7bfa      	ldrb	r2, [r7, #15]
 80017cc:	3208      	adds	r2, #8
 80017ce:	2101      	movs	r1, #1
 80017d0:	fa01 f202 	lsl.w	r2, r1, r2
 80017d4:	4611      	mov	r1, r2
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <DIO_InitPin+0xfbc>)
 80017d8:	430b      	orrs	r3, r1
 80017da:	6013      	str	r3, [r2, #0]
				break;
 80017dc:	e015      	b.n	800180a <DIO_InitPin+0xfae>
							GPIOC_CRH &= ~((u32)(0b1111)<<(Local_Pin_num * 4));
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <DIO_InitPin+0xfb8>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	210f      	movs	r1, #15
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4909      	ldr	r1, [pc, #36]	; (8001814 <DIO_InitPin+0xfb8>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
							GPIOC_CRH |=  ((u32)(status)<<(Local_Pin_num * 4));
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <DIO_InitPin+0xfb8>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	79b9      	ldrb	r1, [r7, #6]
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	4904      	ldr	r1, [pc, #16]	; (8001814 <DIO_InitPin+0xfb8>)
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
				break;
 8001808:	bf00      	nop
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	40011004 	.word	0x40011004
 8001818:	4001100c 	.word	0x4001100c

0800181c <DIO_WritePin>:



void 	DIO_WritePin(DIO_Pin_type pin,DIO_Voltage_type volt)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	460a      	mov	r2, r1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	4613      	mov	r3, r2
 800182a:	71bb      	strb	r3, [r7, #6]
	u8 				Local_pin_num= pin %16;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	73fb      	strb	r3, [r7, #15]
	DIO_Port_type 	Local_port_num= pin /16;
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	091b      	lsrs	r3, r3, #4
 8001838:	73bb      	strb	r3, [r7, #14]
	/*Range Check*/
	if(pin<TOTAL_PINS)
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b2f      	cmp	r3, #47	; 0x2f
 800183e:	d861      	bhi.n	8001904 <DIO_WritePin+0xe8>
	{
		switch(Local_port_num)
 8001840:	7bbb      	ldrb	r3, [r7, #14]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d022      	beq.n	800188c <DIO_WritePin+0x70>
 8001846:	2b02      	cmp	r3, #2
 8001848:	d03e      	beq.n	80018c8 <DIO_WritePin+0xac>
 800184a:	2b00      	cmp	r3, #0
 800184c:	d000      	beq.n	8001850 <DIO_WritePin+0x34>
		}


	}
	else {/*ERROR*/}
}
 800184e:	e059      	b.n	8001904 <DIO_WritePin+0xe8>
			switch(volt)
 8001850:	79bb      	ldrb	r3, [r7, #6]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00d      	beq.n	8001872 <DIO_WritePin+0x56>
 8001856:	2b01      	cmp	r3, #1
 8001858:	d000      	beq.n	800185c <DIO_WritePin+0x40>
			break;
 800185a:	e053      	b.n	8001904 <DIO_WritePin+0xe8>
			case HIGH:		SET_BIT(GPIOA_ODR,Local_pin_num); break;
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <DIO_WritePin+0xf4>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	2101      	movs	r1, #1
 8001864:	fa01 f202 	lsl.w	r2, r1, r2
 8001868:	4611      	mov	r1, r2
 800186a:	4a29      	ldr	r2, [pc, #164]	; (8001910 <DIO_WritePin+0xf4>)
 800186c:	430b      	orrs	r3, r1
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	e00b      	b.n	800188a <DIO_WritePin+0x6e>
			case LOW:		CLR_BIT(GPIOA_ODR,Local_pin_num); break;
 8001872:	4b27      	ldr	r3, [pc, #156]	; (8001910 <DIO_WritePin+0xf4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	2101      	movs	r1, #1
 800187a:	fa01 f202 	lsl.w	r2, r1, r2
 800187e:	43d2      	mvns	r2, r2
 8001880:	4611      	mov	r1, r2
 8001882:	4a23      	ldr	r2, [pc, #140]	; (8001910 <DIO_WritePin+0xf4>)
 8001884:	400b      	ands	r3, r1
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	bf00      	nop
			break;
 800188a:	e03b      	b.n	8001904 <DIO_WritePin+0xe8>
			switch(volt)
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00d      	beq.n	80018ae <DIO_WritePin+0x92>
 8001892:	2b01      	cmp	r3, #1
 8001894:	d000      	beq.n	8001898 <DIO_WritePin+0x7c>
			break;
 8001896:	e035      	b.n	8001904 <DIO_WritePin+0xe8>
			case HIGH:		SET_BIT(GPIOB_ODR,Local_pin_num); break;
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <DIO_WritePin+0xf8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	7bfa      	ldrb	r2, [r7, #15]
 800189e:	2101      	movs	r1, #1
 80018a0:	fa01 f202 	lsl.w	r2, r1, r2
 80018a4:	4611      	mov	r1, r2
 80018a6:	4a1b      	ldr	r2, [pc, #108]	; (8001914 <DIO_WritePin+0xf8>)
 80018a8:	430b      	orrs	r3, r1
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	e00b      	b.n	80018c6 <DIO_WritePin+0xaa>
			case LOW:		CLR_BIT(GPIOB_ODR,Local_pin_num); break;
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <DIO_WritePin+0xf8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	2101      	movs	r1, #1
 80018b6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ba:	43d2      	mvns	r2, r2
 80018bc:	4611      	mov	r1, r2
 80018be:	4a15      	ldr	r2, [pc, #84]	; (8001914 <DIO_WritePin+0xf8>)
 80018c0:	400b      	ands	r3, r1
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	bf00      	nop
			break;
 80018c6:	e01d      	b.n	8001904 <DIO_WritePin+0xe8>
			switch(volt)
 80018c8:	79bb      	ldrb	r3, [r7, #6]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00d      	beq.n	80018ea <DIO_WritePin+0xce>
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d000      	beq.n	80018d4 <DIO_WritePin+0xb8>
			break;
 80018d2:	e017      	b.n	8001904 <DIO_WritePin+0xe8>
			case HIGH:		SET_BIT(GPIOC_ODR,Local_pin_num); break;
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <DIO_WritePin+0xfc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	2101      	movs	r1, #1
 80018dc:	fa01 f202 	lsl.w	r2, r1, r2
 80018e0:	4611      	mov	r1, r2
 80018e2:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <DIO_WritePin+0xfc>)
 80018e4:	430b      	orrs	r3, r1
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e00b      	b.n	8001902 <DIO_WritePin+0xe6>
			case LOW:		CLR_BIT(GPIOC_ODR,Local_pin_num); break;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <DIO_WritePin+0xfc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	7bfa      	ldrb	r2, [r7, #15]
 80018f0:	2101      	movs	r1, #1
 80018f2:	fa01 f202 	lsl.w	r2, r1, r2
 80018f6:	43d2      	mvns	r2, r2
 80018f8:	4611      	mov	r1, r2
 80018fa:	4a07      	ldr	r2, [pc, #28]	; (8001918 <DIO_WritePin+0xfc>)
 80018fc:	400b      	ands	r3, r1
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	bf00      	nop
			break;
 8001902:	bf00      	nop
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	4001080c 	.word	0x4001080c
 8001914:	40010c0c 	.word	0x40010c0c
 8001918:	4001100c 	.word	0x4001100c

0800191c <DIO_Init>:
		else{/*Error*/}
	return Local_u16_port_val;
}

void DIO_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
	/*i is index pin number or pin name*/
 	DIO_Pin_type i ;
	for(i=PINA0;i<TOTAL_PINS;i++)
 8001922:	2300      	movs	r3, #0
 8001924:	71fb      	strb	r3, [r7, #7]
 8001926:	e00a      	b.n	800193e <DIO_Init+0x22>
	{
	DIO_InitPin(i,PinsStatusArray[i]);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <DIO_Init+0x30>)
 800192c:	5cd2      	ldrb	r2, [r2, r3]
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe ff92 	bl	800085c <DIO_InitPin>
	for(i=PINA0;i<TOTAL_PINS;i++)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	3301      	adds	r3, #1
 800193c:	71fb      	strb	r3, [r7, #7]
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b2f      	cmp	r3, #47	; 0x2f
 8001942:	d9f1      	bls.n	8001928 <DIO_Init+0xc>
	}
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	08004b04 	.word	0x08004b04

08001950 <Delay_ms>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_Config.h"

static void Delay_ms(u32 Copy_u32Time)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	for(u32 i=0; i<Copy_u32Time;i++)
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	e00d      	b.n	800197a <Delay_ms+0x2a>
		{
			for(u16 j=0;j<565;j++)
 800195e:	2300      	movs	r3, #0
 8001960:	817b      	strh	r3, [r7, #10]
 8001962:	e003      	b.n	800196c <Delay_ms+0x1c>
			{
				asm("NOP");
 8001964:	bf00      	nop
			for(u16 j=0;j<565;j++)
 8001966:	897b      	ldrh	r3, [r7, #10]
 8001968:	3301      	adds	r3, #1
 800196a:	817b      	strh	r3, [r7, #10]
 800196c:	897b      	ldrh	r3, [r7, #10]
 800196e:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 8001972:	d9f7      	bls.n	8001964 <Delay_ms+0x14>
	for(u32 i=0; i<Copy_u32Time;i++)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3301      	adds	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	d3ed      	bcc.n	800195e <Delay_ms+0xe>
			}
		}

}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <LCD_WriteData>:

void LCD_WriteData(u8 data)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]

	DIO_WritePin(RS,HIGH);
 8001996:	2101      	movs	r1, #1
 8001998:	2002      	movs	r0, #2
 800199a:	f7ff ff3f 	bl	800181c <DIO_WritePin>
	DIO_WritePin(D7,GET_BIT(data,7));
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	09db      	lsrs	r3, r3, #7
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	4619      	mov	r1, r3
 80019a6:	2007      	movs	r0, #7
 80019a8:	f7ff ff38 	bl	800181c <DIO_WritePin>
	DIO_WritePin(D6,GET_BIT(data,6));
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	099b      	lsrs	r3, r3, #6
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	4619      	mov	r1, r3
 80019ba:	2006      	movs	r0, #6
 80019bc:	f7ff ff2e 	bl	800181c <DIO_WritePin>
	DIO_WritePin(D5,GET_BIT(data,5));
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	4619      	mov	r1, r3
 80019ce:	2005      	movs	r0, #5
 80019d0:	f7ff ff24 	bl	800181c <DIO_WritePin>
	DIO_WritePin(D4,GET_BIT(data,4));
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	4619      	mov	r1, r3
 80019e2:	2004      	movs	r0, #4
 80019e4:	f7ff ff1a 	bl	800181c <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
 80019e8:	2101      	movs	r1, #1
 80019ea:	2003      	movs	r0, #3
 80019ec:	f7ff ff16 	bl	800181c <DIO_WritePin>
	Delay_ms(1);
 80019f0:	2001      	movs	r0, #1
 80019f2:	f7ff ffad 	bl	8001950 <Delay_ms>
	DIO_WritePin(EN,LOW);
 80019f6:	2100      	movs	r1, #0
 80019f8:	2003      	movs	r0, #3
 80019fa:	f7ff ff0f 	bl	800181c <DIO_WritePin>
	Delay_ms(1);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff ffa6 	bl	8001950 <Delay_ms>
	DIO_WritePin(D7,GET_BIT(data,3));
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	08db      	lsrs	r3, r3, #3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	4619      	mov	r1, r3
 8001a12:	2007      	movs	r0, #7
 8001a14:	f7ff ff02 	bl	800181c <DIO_WritePin>
	DIO_WritePin(D6,GET_BIT(data,2));
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	4619      	mov	r1, r3
 8001a26:	2006      	movs	r0, #6
 8001a28:	f7ff fef8 	bl	800181c <DIO_WritePin>
	DIO_WritePin(D5,GET_BIT(data,1));
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	085b      	lsrs	r3, r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	4619      	mov	r1, r3
 8001a3a:	2005      	movs	r0, #5
 8001a3c:	f7ff feee 	bl	800181c <DIO_WritePin>
	DIO_WritePin(D4,GET_BIT(data,0));
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	4619      	mov	r1, r3
 8001a4a:	2004      	movs	r0, #4
 8001a4c:	f7ff fee6 	bl	800181c <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
 8001a50:	2101      	movs	r1, #1
 8001a52:	2003      	movs	r0, #3
 8001a54:	f7ff fee2 	bl	800181c <DIO_WritePin>
	Delay_ms(1);
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f7ff ff79 	bl	8001950 <Delay_ms>
	DIO_WritePin(EN,LOW);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2003      	movs	r0, #3
 8001a62:	f7ff fedb 	bl	800181c <DIO_WritePin>
	Delay_ms(1);
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7ff ff72 	bl	8001950 <Delay_ms>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <LCD_WriteCommand>:

void LCD_WriteCommand(u8 data)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
	DIO_WritePin(RS,LOW);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2002      	movs	r0, #2
 8001a82:	f7ff fecb 	bl	800181c <DIO_WritePin>
	DIO_WritePin(D7,GET_BIT(data,7));
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	09db      	lsrs	r3, r3, #7
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	2007      	movs	r0, #7
 8001a90:	f7ff fec4 	bl	800181c <DIO_WritePin>
	DIO_WritePin(D6,GET_BIT(data,6));
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	099b      	lsrs	r3, r3, #6
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	2006      	movs	r0, #6
 8001aa4:	f7ff feba 	bl	800181c <DIO_WritePin>
	DIO_WritePin(D5,GET_BIT(data,5));
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	2005      	movs	r0, #5
 8001ab8:	f7ff feb0 	bl	800181c <DIO_WritePin>
	DIO_WritePin(D4,GET_BIT(data,4));
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4619      	mov	r1, r3
 8001aca:	2004      	movs	r0, #4
 8001acc:	f7ff fea6 	bl	800181c <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	2003      	movs	r0, #3
 8001ad4:	f7ff fea2 	bl	800181c <DIO_WritePin>
	Delay_ms(1);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff39 	bl	8001950 <Delay_ms>
	DIO_WritePin(EN,LOW);
 8001ade:	2100      	movs	r1, #0
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f7ff fe9b 	bl	800181c <DIO_WritePin>
	Delay_ms(1);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f7ff ff32 	bl	8001950 <Delay_ms>
	DIO_WritePin(D7,GET_BIT(data,3));
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	08db      	lsrs	r3, r3, #3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	4619      	mov	r1, r3
 8001afa:	2007      	movs	r0, #7
 8001afc:	f7ff fe8e 	bl	800181c <DIO_WritePin>
	DIO_WritePin(D6,GET_BIT(data,2));
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	2006      	movs	r0, #6
 8001b10:	f7ff fe84 	bl	800181c <DIO_WritePin>
	DIO_WritePin(D5,GET_BIT(data,1));
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	085b      	lsrs	r3, r3, #1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	4619      	mov	r1, r3
 8001b22:	2005      	movs	r0, #5
 8001b24:	f7ff fe7a 	bl	800181c <DIO_WritePin>
	DIO_WritePin(D4,GET_BIT(data,0));
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	4619      	mov	r1, r3
 8001b32:	2004      	movs	r0, #4
 8001b34:	f7ff fe72 	bl	800181c <DIO_WritePin>
	DIO_WritePin(EN,HIGH);
 8001b38:	2101      	movs	r1, #1
 8001b3a:	2003      	movs	r0, #3
 8001b3c:	f7ff fe6e 	bl	800181c <DIO_WritePin>
	Delay_ms(1);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f7ff ff05 	bl	8001950 <Delay_ms>
	DIO_WritePin(EN,LOW);
 8001b46:	2100      	movs	r1, #0
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f7ff fe67 	bl	800181c <DIO_WritePin>
	Delay_ms(1);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f7ff fefe 	bl	8001950 <Delay_ms>

}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <LCD_Init>:
void LCD_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
	Delay_ms(50);
 8001b60:	2032      	movs	r0, #50	; 0x32
 8001b62:	f7ff fef5 	bl	8001950 <Delay_ms>
	LCD_WriteCommand(0x02);
 8001b66:	2002      	movs	r0, #2
 8001b68:	f7ff ff84 	bl	8001a74 <LCD_WriteCommand>
	Delay_ms(50);
 8001b6c:	2032      	movs	r0, #50	; 0x32
 8001b6e:	f7ff feef 	bl	8001950 <Delay_ms>
	LCD_WriteCommand(0x28);//8 bit mode ,font 5*7 , 2 line
 8001b72:	2028      	movs	r0, #40	; 0x28
 8001b74:	f7ff ff7e 	bl	8001a74 <LCD_WriteCommand>
	Delay_ms(1);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f7ff fee9 	bl	8001950 <Delay_ms>
	LCD_WriteCommand(0x0c);//0x0f ,0x0e display ,cursor
 8001b7e:	200c      	movs	r0, #12
 8001b80:	f7ff ff78 	bl	8001a74 <LCD_WriteCommand>
	Delay_ms(1);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff fee3 	bl	8001950 <Delay_ms>
	LCD_WriteCommand(0x01);//Clear screen
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7ff ff72 	bl	8001a74 <LCD_WriteCommand>
	Delay_ms(2);
 8001b90:	2002      	movs	r0, #2
 8001b92:	f7ff fedd 	bl	8001950 <Delay_ms>
	LCD_WriteCommand(0x06);//increas ddram address no
 8001b96:	2006      	movs	r0, #6
 8001b98:	f7ff ff6c 	bl	8001a74 <LCD_WriteCommand>
	Delay_ms(2);
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f7ff fed7 	bl	8001950 <Delay_ms>

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <LCD_WriteChar>:

void LCD_WriteChar(u8 ch)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
	LCD_WriteData(ch);
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff feea 	bl	800198c <LCD_WriteData>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <LCD_WriteString>:
void LCD_WriteString(u8* str)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	u8 i=0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
	while(str[i]!=0)
 8001bcc:	e009      	b.n	8001be2 <LCD_WriteString+0x22>
	{

		LCD_WriteChar(str[i]);
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ffe5 	bl	8001ba6 <LCD_WriteChar>

		i++;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	3301      	adds	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
	while(str[i]!=0)
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	4413      	add	r3, r2
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1ef      	bne.n	8001bce <LCD_WriteString+0xe>

	}

}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <LCD_WriteNumber>:
void LCD_WriteNumber(s64 num)
{
 8001bf6:	b590      	push	{r4, r7, lr}
 8001bf8:	b089      	sub	sp, #36	; 0x24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	e9c7 0100 	strd	r0, r1, [r7]
	u8 ch[16]={0};
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
	u8 i=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	77fb      	strb	r3, [r7, #31]
	u8 j=0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	77bb      	strb	r3, [r7, #30]
	if(num==0)
 8001c16:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c1a:	4323      	orrs	r3, r4
 8001c1c:	d103      	bne.n	8001c26 <LCD_WriteNumber+0x30>
	{
		LCD_WriteChar('0');
 8001c1e:	2030      	movs	r0, #48	; 0x30
 8001c20:	f7ff ffc1 	bl	8001ba6 <LCD_WriteChar>

	}



}
 8001c24:	e090      	b.n	8001d48 <LCD_WriteNumber+0x152>
	else if(num>0)
 8001c26:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	f174 0300 	sbcs.w	r3, r4, #0
 8001c30:	db3b      	blt.n	8001caa <LCD_WriteNumber+0xb4>
		while(num!=0)
 8001c32:	e021      	b.n	8001c78 <LCD_WriteNumber+0x82>
			ch[i]=num%10;
 8001c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c38:	f04f 020a 	mov.w	r2, #10
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	f7fe fa96 	bl	8000170 <__aeabi_ldivmod>
 8001c44:	461c      	mov	r4, r3
 8001c46:	4613      	mov	r3, r2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	7ffb      	ldrb	r3, [r7, #31]
 8001c4e:	b2ca      	uxtb	r2, r1
 8001c50:	f107 0120 	add.w	r1, r7, #32
 8001c54:	440b      	add	r3, r1
 8001c56:	f803 2c14 	strb.w	r2, [r3, #-20]
			num=num/10;
 8001c5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c5e:	f04f 020a 	mov.w	r2, #10
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	f7fe fa83 	bl	8000170 <__aeabi_ldivmod>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460c      	mov	r4, r1
 8001c6e:	e9c7 3400 	strd	r3, r4, [r7]
			i++;
 8001c72:	7ffb      	ldrb	r3, [r7, #31]
 8001c74:	3301      	adds	r3, #1
 8001c76:	77fb      	strb	r3, [r7, #31]
		while(num!=0)
 8001c78:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c7c:	4323      	orrs	r3, r4
 8001c7e:	d1d9      	bne.n	8001c34 <LCD_WriteNumber+0x3e>
		for(j=i-1;j>=0;j--)
 8001c80:	7ffb      	ldrb	r3, [r7, #31]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	77bb      	strb	r3, [r7, #30]
			LCD_WriteChar(ch[j]+'0');
 8001c86:	7fbb      	ldrb	r3, [r7, #30]
 8001c88:	f107 0220 	add.w	r2, r7, #32
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001c92:	3330      	adds	r3, #48	; 0x30
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff85 	bl	8001ba6 <LCD_WriteChar>
			if(j==0) break;
 8001c9c:	7fbb      	ldrb	r3, [r7, #30]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d04f      	beq.n	8001d42 <LCD_WriteNumber+0x14c>
		for(j=i-1;j>=0;j--)
 8001ca2:	7fbb      	ldrb	r3, [r7, #30]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	77bb      	strb	r3, [r7, #30]
			LCD_WriteChar(ch[j]+'0');
 8001ca8:	e7ed      	b.n	8001c86 <LCD_WriteNumber+0x90>
	else if(num<0)
 8001caa:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f174 0300 	sbcs.w	r3, r4, #0
 8001cb4:	da48      	bge.n	8001d48 <LCD_WriteNumber+0x152>
		LCD_WriteChar('-');
 8001cb6:	202d      	movs	r0, #45	; 0x2d
 8001cb8:	f7ff ff75 	bl	8001ba6 <LCD_WriteChar>
		num=num*(-1);
 8001cbc:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001cc0:	425b      	negs	r3, r3
 8001cc2:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8001cc6:	e9c7 3400 	strd	r3, r4, [r7]
			while(num!=0)
 8001cca:	e021      	b.n	8001d10 <LCD_WriteNumber+0x11a>
				ch[i]=num%10;
 8001ccc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cd0:	f04f 020a 	mov.w	r2, #10
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	f7fe fa4a 	bl	8000170 <__aeabi_ldivmod>
 8001cdc:	461c      	mov	r4, r3
 8001cde:	4613      	mov	r3, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	7ffb      	ldrb	r3, [r7, #31]
 8001ce6:	b2ca      	uxtb	r2, r1
 8001ce8:	f107 0120 	add.w	r1, r7, #32
 8001cec:	440b      	add	r3, r1
 8001cee:	f803 2c14 	strb.w	r2, [r3, #-20]
				num=num/10;
 8001cf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cf6:	f04f 020a 	mov.w	r2, #10
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	f7fe fa37 	bl	8000170 <__aeabi_ldivmod>
 8001d02:	4603      	mov	r3, r0
 8001d04:	460c      	mov	r4, r1
 8001d06:	e9c7 3400 	strd	r3, r4, [r7]
				i++;
 8001d0a:	7ffb      	ldrb	r3, [r7, #31]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	77fb      	strb	r3, [r7, #31]
			while(num!=0)
 8001d10:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d14:	4323      	orrs	r3, r4
 8001d16:	d1d9      	bne.n	8001ccc <LCD_WriteNumber+0xd6>
			for(j=i-1;j>=0;j--)
 8001d18:	7ffb      	ldrb	r3, [r7, #31]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	77bb      	strb	r3, [r7, #30]
				LCD_WriteChar(ch[j]+'0');
 8001d1e:	7fbb      	ldrb	r3, [r7, #30]
 8001d20:	f107 0220 	add.w	r2, r7, #32
 8001d24:	4413      	add	r3, r2
 8001d26:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001d2a:	3330      	adds	r3, #48	; 0x30
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff39 	bl	8001ba6 <LCD_WriteChar>
				if(j==0) break;
 8001d34:	7fbb      	ldrb	r3, [r7, #30]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <LCD_WriteNumber+0x150>
			for(j=i-1;j>=0;j--)
 8001d3a:	7fbb      	ldrb	r3, [r7, #30]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	77bb      	strb	r3, [r7, #30]
				LCD_WriteChar(ch[j]+'0');
 8001d40:	e7ed      	b.n	8001d1e <LCD_WriteNumber+0x128>
			if(j==0) break;
 8001d42:	bf00      	nop
 8001d44:	e000      	b.n	8001d48 <LCD_WriteNumber+0x152>
				if(j==0) break;
 8001d46:	bf00      	nop
}
 8001d48:	bf00      	nop
 8001d4a:	3724      	adds	r7, #36	; 0x24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd90      	pop	{r4, r7, pc}

08001d50 <LCD_SetCursor>:
		LCD_WriteData((num/1)+'0');


}
void LCD_SetCursor(u8 row,u8 colm)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	460a      	mov	r2, r1
 8001d5a:	71fb      	strb	r3, [r7, #7]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	71bb      	strb	r3, [r7, #6]
	if(row==0)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d106      	bne.n	8001d74 <LCD_SetCursor+0x24>
	{
		LCD_WriteCommand(0x80+colm);
 8001d66:	79bb      	ldrb	r3, [r7, #6]
 8001d68:	3b80      	subs	r3, #128	; 0x80
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fe81 	bl	8001a74 <LCD_WriteCommand>
	else if(row==1)
	{

		LCD_WriteCommand(0x40+0x80+colm);
	}
}
 8001d72:	e008      	b.n	8001d86 <LCD_SetCursor+0x36>
	else if(row==1)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d105      	bne.n	8001d86 <LCD_SetCursor+0x36>
		LCD_WriteCommand(0x40+0x80+colm);
 8001d7a:	79bb      	ldrb	r3, [r7, #6]
 8001d7c:	3b40      	subs	r3, #64	; 0x40
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fe77 	bl	8001a74 <LCD_WriteCommand>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <LCD_WriteCharXY>:
	}
	LCD_WriteCommand(0x80);// return to DDRAM , then user can set corser as he like
}

void LCD_WriteCharXY (u8 row, u8 cell, u8 ch)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	71bb      	strb	r3, [r7, #6]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	717b      	strb	r3, [r7, #5]
	LCD_SetCursor(row,cell);
 8001da0:	79ba      	ldrb	r2, [r7, #6]
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	4611      	mov	r1, r2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ffd2 	bl	8001d50 <LCD_SetCursor>
	LCD_WriteChar(ch);
 8001dac:	797b      	ldrb	r3, [r7, #5]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fef9 	bl	8001ba6 <LCD_WriteChar>
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <LCD_WriteStringXY>:
void LCD_WriteStringXY (u8 row, u8 cell, u8* str)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	603a      	str	r2, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	71bb      	strb	r3, [r7, #6]
	LCD_SetCursor(row,cell);
 8001dcc:	79ba      	ldrb	r2, [r7, #6]
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ffbc 	bl	8001d50 <LCD_SetCursor>
	LCD_WriteString(str);
 8001dd8:	6838      	ldr	r0, [r7, #0]
 8001dda:	f7ff fef1 	bl	8001bc0 <LCD_WriteString>
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <LCD_WriteNumberXY>:
void LCD_WriteNumberXY (u8 row, u8 cell, s64 num)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	e9c7 2300 	strd	r2, r3, [r7]
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	460b      	mov	r3, r1
 8001df6:	73bb      	strb	r3, [r7, #14]
	LCD_SetCursor(row,cell);
 8001df8:	7bba      	ldrb	r2, [r7, #14]
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ffa6 	bl	8001d50 <LCD_SetCursor>
    LCD_WriteNumber(num);
 8001e04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e08:	f7ff fef5 	bl	8001bf6 <LCD_WriteNumber>
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <RCC_voidInit>:
#include "RCC_private.h"
#include "RCC_config.h"


void RCC_voidInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
	u32 Local_u32TimeOut= 0 ;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]

	/*		System Buses prescallers			 */
	/*		 AHB		PRESCALER					*/
#if		AHB_PRESCALLER	==	SYSCLK_DIV_1
			CLR_BIT(RCC_CFGR,7);
 8001e1e:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a2f      	ldr	r2, [pc, #188]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e28:	6013      	str	r3, [r2, #0]
			SET_BIT(RCC_CFGR,5);
			SET_BIT(RCC_CFGR,4);
#endif
/*		 APB1		PRESCALER					*/
#if		ABP1_PRESCALLER ==  HCLK_DIV_1
			CLR_BIT(RCC_CFGR,10);
 8001e2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2c      	ldr	r2, [pc, #176]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001e30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e34:	6013      	str	r3, [r2, #0]
			SET_BIT(RCC_CFGR,8);

#endif
/*		 APB2		PRESCALER					*/
#if		ABP1_PRESCALLER ==  HCLK_DIV_1
			CLR_BIT(RCC_CFGR,13);
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a29      	ldr	r2, [pc, #164]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e40:	6013      	str	r3, [r2, #0]

#if    ADC_PRESCALLER ==	PCLK2_DIV_2
			CLR_BIT(RCC_CFGR,14);
			CLR_BIT(RCC_CFGR,15);
#elif	ADC_PRESCALLER ==	PCLK2_DIV_4
			SET_BIT(RCC_CFGR,14);
 8001e42:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a26      	ldr	r2, [pc, #152]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6013      	str	r3, [r2, #0]
			CLR_BIT(RCC_CFGR,15);
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a23      	ldr	r2, [pc, #140]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001e54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e58:	6013      	str	r3, [r2, #0]
			{
				Local_u32TimeOut++;
			}
	#elif		CLOCK_TYPE == RCC_HSE
		/*	System Clock Switch		*/
			SET_BIT(RCC_CFGR,0);
 8001e5a:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a20      	ldr	r2, [pc, #128]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6013      	str	r3, [r2, #0]
			CLR_BIT(RCC_CFGR,1);
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001e6c:	f023 0302 	bic.w	r3, r3, #2
 8001e70:	6013      	str	r3, [r2, #0]
		/*	HSE is Crystal or RC   */
		#if		RCC_HSE_SOURCE== RCC_HSE_CRYSTAL
			/*0   dont bypass crystal   */
				CLR_BIT(RCC_CR,18);
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <RCC_voidInit+0xd0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1b      	ldr	r2, [pc, #108]	; (8001ee4 <RCC_voidInit+0xd0>)
 8001e78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7c:	6013      	str	r3, [r2, #0]
		#elif  RCC_HSE_SOURCE== RCC_HSE_RC
				/*1 bypass crystal*/
				SET_BIT(RCC_CR,18);
		#endif
/*			HSE ON		Check on BYPASS BIT	*/
				SET_BIT(RCC_CR,16);
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <RCC_voidInit+0xd0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <RCC_voidInit+0xd0>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]

		/*		HSE is Ready ?	//POLLING	*/
			while(!GET_BIT(RCC_CR,17) && Local_u32TimeOut !=10000)
 8001e8a:	e002      	b.n	8001e92 <RCC_voidInit+0x7e>
			{
				Local_u32TimeOut++;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	607b      	str	r3, [r7, #4]
			while(!GET_BIT(RCC_CR,17) && Local_u32TimeOut !=10000)
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <RCC_voidInit+0xd0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d104      	bne.n	8001ea8 <RCC_voidInit+0x94>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d1f1      	bne.n	8001e8c <RCC_voidInit+0x78>
			}
			/*       POLLING ON SWS			 */ Local_u32TimeOut=0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	607b      	str	r3, [r7, #4]
			while(!GET_BIT(RCC_CFGR,2) && GET_BIT(RCC_CFGR,3)&&Local_u32TimeOut !=10000)
 8001eac:	e002      	b.n	8001eb4 <RCC_voidInit+0xa0>
			{
				Local_u32TimeOut++;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	607b      	str	r3, [r7, #4]
			while(!GET_BIT(RCC_CFGR,2) && GET_BIT(RCC_CFGR,3)&&Local_u32TimeOut !=10000)
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10a      	bne.n	8001ed6 <RCC_voidInit+0xc2>
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <RCC_voidInit+0xcc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d004      	beq.n	8001ed6 <RCC_voidInit+0xc2>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d1eb      	bne.n	8001eae <RCC_voidInit+0x9a>
				#error "Wrong clock system choice!"

	#endif


}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr
 8001ee0:	40021004 	.word	0x40021004
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <RCC_voidEnablePeripheralClock_EntireBus>:
	}
	else{/*		Return ERROR	*/}
}
/*Update by placing Hexa in the EN Register*/
void RCC_voidEnablePeripheralClock_EntireBus(u8 Copy_u8BusID)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8BusID<3)
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d849      	bhi.n	8001f8c <RCC_voidEnablePeripheralClock_EntireBus+0xa4>
	{
		switch(Copy_u8BusID)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d030      	beq.n	8001f60 <RCC_voidEnablePeripheralClock_EntireBus+0x78>
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d018      	beq.n	8001f34 <RCC_voidEnablePeripheralClock_EntireBus+0x4c>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d000      	beq.n	8001f08 <RCC_voidEnablePeripheralClock_EntireBus+0x20>
		}
	}
	else{/*Error*/}


}
 8001f06:	e041      	b.n	8001f8c <RCC_voidEnablePeripheralClock_EntireBus+0xa4>
			for(Prephiral_Id_type i=AHB_FIRST_PREPHERIAL;i<=AHB_TOTAL;i++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	e00e      	b.n	8001f2c <RCC_voidEnablePeripheralClock_EntireBus+0x44>
				SET_BIT( RCC_AHBENR,AHB_Bus_On_Off_Array[i]);
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <RCC_voidEnablePeripheralClock_EntireBus+0xb0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	4921      	ldr	r1, [pc, #132]	; (8001f9c <RCC_voidEnablePeripheralClock_EntireBus+0xb4>)
 8001f16:	5c8a      	ldrb	r2, [r1, r2]
 8001f18:	4611      	mov	r1, r2
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	408a      	lsls	r2, r1
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <RCC_voidEnablePeripheralClock_EntireBus+0xb0>)
 8001f22:	430b      	orrs	r3, r1
 8001f24:	6013      	str	r3, [r2, #0]
			for(Prephiral_Id_type i=AHB_FIRST_PREPHERIAL;i<=AHB_TOTAL;i++)
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	2b09      	cmp	r3, #9
 8001f30:	d9ed      	bls.n	8001f0e <RCC_voidEnablePeripheralClock_EntireBus+0x26>
			break;
 8001f32:	e02b      	b.n	8001f8c <RCC_voidEnablePeripheralClock_EntireBus+0xa4>
			for(Prephiral_Id_type i=APB2_FIRST_PREPHERIAL;i <= APB2_TOTAL;i++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	73bb      	strb	r3, [r7, #14]
 8001f38:	e00e      	b.n	8001f58 <RCC_voidEnablePeripheralClock_EntireBus+0x70>
				SET_BIT( RCC_APB2ENR,APB2_Bus_On_Off_Array[i]);
 8001f3a:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <RCC_voidEnablePeripheralClock_EntireBus+0xb8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	7bba      	ldrb	r2, [r7, #14]
 8001f40:	4918      	ldr	r1, [pc, #96]	; (8001fa4 <RCC_voidEnablePeripheralClock_EntireBus+0xbc>)
 8001f42:	5c8a      	ldrb	r2, [r1, r2]
 8001f44:	4611      	mov	r1, r2
 8001f46:	2201      	movs	r2, #1
 8001f48:	408a      	lsls	r2, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <RCC_voidEnablePeripheralClock_EntireBus+0xb8>)
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	6013      	str	r3, [r2, #0]
			for(Prephiral_Id_type i=APB2_FIRST_PREPHERIAL;i <= APB2_TOTAL;i++)
 8001f52:	7bbb      	ldrb	r3, [r7, #14]
 8001f54:	3301      	adds	r3, #1
 8001f56:	73bb      	strb	r3, [r7, #14]
 8001f58:	7bbb      	ldrb	r3, [r7, #14]
 8001f5a:	2b0b      	cmp	r3, #11
 8001f5c:	d9ed      	bls.n	8001f3a <RCC_voidEnablePeripheralClock_EntireBus+0x52>
			break;
 8001f5e:	e015      	b.n	8001f8c <RCC_voidEnablePeripheralClock_EntireBus+0xa4>
			for(Prephiral_Id_type i=APB1_FIRST_PREPHERIAL;i<=APB1_TOTAL;i++)
 8001f60:	2300      	movs	r3, #0
 8001f62:	737b      	strb	r3, [r7, #13]
 8001f64:	e00e      	b.n	8001f84 <RCC_voidEnablePeripheralClock_EntireBus+0x9c>
				SET_BIT( RCC_APB1ENR,APB1_Bus_On_Off_Array[i]);
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <RCC_voidEnablePeripheralClock_EntireBus+0xc0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	7b7a      	ldrb	r2, [r7, #13]
 8001f6c:	490f      	ldr	r1, [pc, #60]	; (8001fac <RCC_voidEnablePeripheralClock_EntireBus+0xc4>)
 8001f6e:	5c8a      	ldrb	r2, [r1, r2]
 8001f70:	4611      	mov	r1, r2
 8001f72:	2201      	movs	r2, #1
 8001f74:	408a      	lsls	r2, r1
 8001f76:	4611      	mov	r1, r2
 8001f78:	4a0b      	ldr	r2, [pc, #44]	; (8001fa8 <RCC_voidEnablePeripheralClock_EntireBus+0xc0>)
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	6013      	str	r3, [r2, #0]
			for(Prephiral_Id_type i=APB1_FIRST_PREPHERIAL;i<=APB1_TOTAL;i++)
 8001f7e:	7b7b      	ldrb	r3, [r7, #13]
 8001f80:	3301      	adds	r3, #1
 8001f82:	737b      	strb	r3, [r7, #13]
 8001f84:	7b7b      	ldrb	r3, [r7, #13]
 8001f86:	2b14      	cmp	r3, #20
 8001f88:	d9ed      	bls.n	8001f66 <RCC_voidEnablePeripheralClock_EntireBus+0x7e>
			break;
 8001f8a:	bf00      	nop
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40021014 	.word	0x40021014
 8001f9c:	08004b34 	.word	0x08004b34
 8001fa0:	40021018 	.word	0x40021018
 8001fa4:	08004b40 	.word	0x08004b40
 8001fa8:	4002101c 	.word	0x4002101c
 8001fac:	08004b4c 	.word	0x08004b4c

08001fb0 <STK_voidInit>:


static void (*STK_PfCallBack)(void) = NULL;
static u8 STK_u8IntervalMode;
void STK_voidInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
	/*		STK Clock = Processor Clock			*/
	STK -> CTRL = 0x00000004;
	//SET_BIT(STK -> CTRL , 2);
#elif	STK_PRESCALLER	==	STK_AHB_DIV_8
	/*		Processor clock divided by 8			*/
	STK -> CTRL = 0x00000000;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <STK_voidInit+0x14>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
	//CLR_BIT(STK -> CTRL , 2);
#else
	#error "Wrong Choice of SysTick Prescaller!"
#endif

}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <STK_voidSetBusyWait>:
void STK_voidSetBusyWait(u32 Copy_u32Ticks)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	/*		Range check on 24 Bits		*/
	if(Copy_u32Ticks <= 16777216)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd6:	d81d      	bhi.n	8002014 <STK_voidSetBusyWait+0x4c>
	{
		/*		Load Number Of ticks		*/
		STK -> LOAD = Copy_u32Ticks;
 8001fd8:	4a11      	ldr	r2, [pc, #68]	; (8002020 <STK_voidSetBusyWait+0x58>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6053      	str	r3, [r2, #4]
		/*		Start Timer					*/
		SET_BIT(STK -> CTRL,0);
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <STK_voidSetBusyWait+0x58>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <STK_voidSetBusyWait+0x58>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6013      	str	r3, [r2, #0]
		/*		Wait the Flag				*/
		while((GET_BIT(STK -> CTRL , 16)) == 0)
 8001fea:	e000      	b.n	8001fee <STK_voidSetBusyWait+0x26>
		{
			asm("NOP");
 8001fec:	bf00      	nop
		while((GET_BIT(STK -> CTRL , 16)) == 0)
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <STK_voidSetBusyWait+0x58>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0c1b      	lsrs	r3, r3, #16
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f7      	beq.n	8001fec <STK_voidSetBusyWait+0x24>
		}
		/*		Stop Timer					*/
		CLR_BIT( STK -> CTRL , 0 );
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <STK_voidSetBusyWait+0x58>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a07      	ldr	r2, [pc, #28]	; (8002020 <STK_voidSetBusyWait+0x58>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6013      	str	r3, [r2, #0]
		STK -> LOAD = 0;
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <STK_voidSetBusyWait+0x58>)
 800200a:	2200      	movs	r2, #0
 800200c:	605a      	str	r2, [r3, #4]
		STK -> VAL = 0;
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <STK_voidSetBusyWait+0x58>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
	}
	else
	{	/*		Return ERROR	*/	}
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e010 	.word	0xe000e010

08002024 <SysTick_Handler>:
	Local_u32Remaining = STK -> VAL;
	return Local_u32Remaining;
}

void SysTick_Handler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
	u8 Local_u8Temp;
	if(STK_u8IntervalMode == STK_SINGLE_INTERVAL)
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <SysTick_Handler+0x50>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d111      	bne.n	8002056 <SysTick_Handler+0x32>
	{
		/*		Disable Interrupt			*/
		CLR_BIT( STK -> CTRL , 1 );
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <SysTick_Handler+0x54>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a10      	ldr	r2, [pc, #64]	; (8002078 <SysTick_Handler+0x54>)
 8002038:	f023 0302 	bic.w	r3, r3, #2
 800203c:	6013      	str	r3, [r2, #0]
		/*		Stop Timer			*/
		CLR_BIT( STK -> CTRL , 0 );
 800203e:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <SysTick_Handler+0x54>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <SysTick_Handler+0x54>)
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	6013      	str	r3, [r2, #0]
		STK -> LOAD = 0;
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <SysTick_Handler+0x54>)
 800204c:	2200      	movs	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
		STK -> VAL = 0;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <SysTick_Handler+0x54>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
	}
	/*	Do Whatever you do when Interrupt Fired		*/
	STK_PfCallBack();
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <SysTick_Handler+0x58>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4798      	blx	r3
	/*	Clear the Flag by reading the Flag			*/
	Local_u8Temp = GET_BIT(STK -> CTRL , 16);
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <SysTick_Handler+0x54>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	71fb      	strb	r3, [r7, #7]
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000060 	.word	0x20000060
 8002078:	e000e010 	.word	0xe000e010
 800207c:	2000005c 	.word	0x2000005c

08002080 <TimerInit>:

static void (*TIM_pfCallBack[_TOTLA_USED_TIMERS])(void) ={ NULL };


void TimerInit(Timer_Config_type* timer)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	/* Pre config  Enable RCC and GPIO */
	switch(timer->ID)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b03      	cmp	r3, #3
 800208e:	f200 80e0 	bhi.w	8002252 <TimerInit+0x1d2>
 8002092:	a201      	add	r2, pc, #4	; (adr r2, 8002098 <TimerInit+0x18>)
 8002094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002098:	080021ed 	.word	0x080021ed
 800209c:	080020a9 	.word	0x080020a9
 80020a0:	08002121 	.word	0x08002121
 80020a4:	08002187 	.word	0x08002187
	{
	case _TIM2:
		/*Auto or preload*/
		TIM2->CR1 |= (timer->LOADING << 7) ;
 80020a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	7852      	ldrb	r2, [r2, #1]
 80020b2:	01d2      	lsls	r2, r2, #7
 80020b4:	4611      	mov	r1, r2
 80020b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020ba:	430b      	orrs	r3, r1
 80020bc:	6013      	str	r3, [r2, #0]
		/*Timer mode*/
		if((timer->MODE==UPCOUNTER) ||(timer->MODE==DOWNCOUNTER))  TIM2->CR1 |= (timer->MODE << 4) ;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	789b      	ldrb	r3, [r3, #2]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <TimerInit+0x4e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	789b      	ldrb	r3, [r3, #2]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d10b      	bne.n	80020e6 <TimerInit+0x66>
 80020ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	7892      	ldrb	r2, [r2, #2]
 80020d8:	0112      	lsls	r2, r2, #4
 80020da:	4611      	mov	r1, r2
 80020dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e0:	430b      	orrs	r3, r1
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	e00a      	b.n	80020fc <TimerInit+0x7c>
		else   TIM2->CR1 |= (timer->MODE << 5) ;
 80020e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	7892      	ldrb	r2, [r2, #2]
 80020f0:	0152      	lsls	r2, r2, #5
 80020f2:	4611      	mov	r1, r2
 80020f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020f8:	430b      	orrs	r3, r1
 80020fa:	6013      	str	r3, [r2, #0]
		/*One Pulse mode*/
		TIM2->CR1 |= (timer->ONEPULSE << 3) ;
 80020fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	78d2      	ldrb	r2, [r2, #3]
 8002106:	00d2      	lsls	r2, r2, #3
 8002108:	4611      	mov	r1, r2
 800210a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800210e:	430b      	orrs	r3, r1
 8002110:	6013      	str	r3, [r2, #0]
		/*Timer clock */
		TIM2->PSC =(timer->preScaler+1);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	889b      	ldrh	r3, [r3, #4]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800211c:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 800211e:	e098      	b.n	8002252 <TimerInit+0x1d2>
	case _TIM3:
		/*Auto or preload*/
		TIM3->CR1 |= (timer->LOADING << 7) ;
 8002120:	4b4e      	ldr	r3, [pc, #312]	; (800225c <TimerInit+0x1dc>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	7852      	ldrb	r2, [r2, #1]
 8002128:	01d2      	lsls	r2, r2, #7
 800212a:	4611      	mov	r1, r2
 800212c:	4a4b      	ldr	r2, [pc, #300]	; (800225c <TimerInit+0x1dc>)
 800212e:	430b      	orrs	r3, r1
 8002130:	6013      	str	r3, [r2, #0]
		/*Timer mode*/
		if((timer->MODE==UPCOUNTER) ||(timer->MODE==DOWNCOUNTER))  TIM3->CR1 |= (timer->MODE << 4) ;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	789b      	ldrb	r3, [r3, #2]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <TimerInit+0xc2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	789b      	ldrb	r3, [r3, #2]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d109      	bne.n	8002156 <TimerInit+0xd6>
 8002142:	4b46      	ldr	r3, [pc, #280]	; (800225c <TimerInit+0x1dc>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	7892      	ldrb	r2, [r2, #2]
 800214a:	0112      	lsls	r2, r2, #4
 800214c:	4611      	mov	r1, r2
 800214e:	4a43      	ldr	r2, [pc, #268]	; (800225c <TimerInit+0x1dc>)
 8002150:	430b      	orrs	r3, r1
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	e008      	b.n	8002168 <TimerInit+0xe8>
		else   TIM3->CR1 |= (timer->MODE << 5) ;
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <TimerInit+0x1dc>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	7892      	ldrb	r2, [r2, #2]
 800215e:	0152      	lsls	r2, r2, #5
 8002160:	4611      	mov	r1, r2
 8002162:	4a3e      	ldr	r2, [pc, #248]	; (800225c <TimerInit+0x1dc>)
 8002164:	430b      	orrs	r3, r1
 8002166:	6013      	str	r3, [r2, #0]
		/*One Pulse mode*/
		TIM3->CR1 |= (timer->ONEPULSE << 3) ;
 8002168:	4b3c      	ldr	r3, [pc, #240]	; (800225c <TimerInit+0x1dc>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	78d2      	ldrb	r2, [r2, #3]
 8002170:	00d2      	lsls	r2, r2, #3
 8002172:	4611      	mov	r1, r2
 8002174:	4a39      	ldr	r2, [pc, #228]	; (800225c <TimerInit+0x1dc>)
 8002176:	430b      	orrs	r3, r1
 8002178:	6013      	str	r3, [r2, #0]
		/*Timer clock */
		TIM3->PSC =(timer->preScaler+1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	889b      	ldrh	r3, [r3, #4]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	4b36      	ldr	r3, [pc, #216]	; (800225c <TimerInit+0x1dc>)
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8002184:	e065      	b.n	8002252 <TimerInit+0x1d2>
	case _TIM4:
		/*Auto or preload*/
		TIM4->CR1 |= (timer->LOADING << 7) ;
 8002186:	4b36      	ldr	r3, [pc, #216]	; (8002260 <TimerInit+0x1e0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	7852      	ldrb	r2, [r2, #1]
 800218e:	01d2      	lsls	r2, r2, #7
 8002190:	4611      	mov	r1, r2
 8002192:	4a33      	ldr	r2, [pc, #204]	; (8002260 <TimerInit+0x1e0>)
 8002194:	430b      	orrs	r3, r1
 8002196:	6013      	str	r3, [r2, #0]
		/*Timer mode*/
		if((timer->MODE==UPCOUNTER) ||(timer->MODE==DOWNCOUNTER))  TIM4->CR1 |= (timer->MODE << 4) ;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	789b      	ldrb	r3, [r3, #2]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <TimerInit+0x128>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	789b      	ldrb	r3, [r3, #2]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d109      	bne.n	80021bc <TimerInit+0x13c>
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <TimerInit+0x1e0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	7892      	ldrb	r2, [r2, #2]
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	4611      	mov	r1, r2
 80021b4:	4a2a      	ldr	r2, [pc, #168]	; (8002260 <TimerInit+0x1e0>)
 80021b6:	430b      	orrs	r3, r1
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e008      	b.n	80021ce <TimerInit+0x14e>
		else   TIM4->CR1 |= (timer->MODE << 5) ;
 80021bc:	4b28      	ldr	r3, [pc, #160]	; (8002260 <TimerInit+0x1e0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	7892      	ldrb	r2, [r2, #2]
 80021c4:	0152      	lsls	r2, r2, #5
 80021c6:	4611      	mov	r1, r2
 80021c8:	4a25      	ldr	r2, [pc, #148]	; (8002260 <TimerInit+0x1e0>)
 80021ca:	430b      	orrs	r3, r1
 80021cc:	6013      	str	r3, [r2, #0]
		/*One Pulse mode*/
		TIM4->CR1 |= (timer->ONEPULSE << 3) ;
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <TimerInit+0x1e0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	78d2      	ldrb	r2, [r2, #3]
 80021d6:	00d2      	lsls	r2, r2, #3
 80021d8:	4611      	mov	r1, r2
 80021da:	4a21      	ldr	r2, [pc, #132]	; (8002260 <TimerInit+0x1e0>)
 80021dc:	430b      	orrs	r3, r1
 80021de:	6013      	str	r3, [r2, #0]
		/*Timer clock */
		TIM4->PSC =(timer->preScaler+1);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	889b      	ldrh	r3, [r3, #4]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <TimerInit+0x1e0>)
 80021e8:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80021ea:	e032      	b.n	8002252 <TimerInit+0x1d2>
	case _TIM1:
		/*Auto or preload*/
		TIM1->CR1 |= (timer->LOADING << 7) ;
 80021ec:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <TimerInit+0x1e4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	7852      	ldrb	r2, [r2, #1]
 80021f4:	01d2      	lsls	r2, r2, #7
 80021f6:	4611      	mov	r1, r2
 80021f8:	4a1a      	ldr	r2, [pc, #104]	; (8002264 <TimerInit+0x1e4>)
 80021fa:	430b      	orrs	r3, r1
 80021fc:	6013      	str	r3, [r2, #0]
		/*Timer mode*/
		if((timer->MODE==UPCOUNTER) ||(timer->MODE==DOWNCOUNTER))  TIM1->CR1 |= (timer->MODE << 4) ;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	789b      	ldrb	r3, [r3, #2]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <TimerInit+0x18e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	789b      	ldrb	r3, [r3, #2]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d109      	bne.n	8002222 <TimerInit+0x1a2>
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <TimerInit+0x1e4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	7892      	ldrb	r2, [r2, #2]
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	4611      	mov	r1, r2
 800221a:	4a12      	ldr	r2, [pc, #72]	; (8002264 <TimerInit+0x1e4>)
 800221c:	430b      	orrs	r3, r1
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	e008      	b.n	8002234 <TimerInit+0x1b4>
		else   TIM1->CR1 |= (timer->MODE << 5) ;
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <TimerInit+0x1e4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	7892      	ldrb	r2, [r2, #2]
 800222a:	0152      	lsls	r2, r2, #5
 800222c:	4611      	mov	r1, r2
 800222e:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <TimerInit+0x1e4>)
 8002230:	430b      	orrs	r3, r1
 8002232:	6013      	str	r3, [r2, #0]
		/*One Pulse mode*/
		TIM1->CR1 |= (timer->ONEPULSE << 3) ;
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <TimerInit+0x1e4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	78d2      	ldrb	r2, [r2, #3]
 800223c:	00d2      	lsls	r2, r2, #3
 800223e:	4611      	mov	r1, r2
 8002240:	4a08      	ldr	r2, [pc, #32]	; (8002264 <TimerInit+0x1e4>)
 8002242:	430b      	orrs	r3, r1
 8002244:	6013      	str	r3, [r2, #0]
		/*Timer clock */
		TIM1->PSC =(timer->preScaler+1);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	889b      	ldrh	r3, [r3, #4]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <TimerInit+0x1e4>)
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8002250:	bf00      	nop
	default:;

	}
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40000400 	.word	0x40000400
 8002260:	40000800 	.word	0x40000800
 8002264:	40012c00 	.word	0x40012c00

08002268 <timer_voidGPWM>:
		}
}


void timer_voidGPWM(PWM_Config_type * PWM )
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	u16 autoReload=0 , Compare=0;
 8002270:	2300      	movs	r3, #0
 8002272:	81fb      	strh	r3, [r7, #14]
 8002274:	2300      	movs	r3, #0
 8002276:	81bb      	strh	r3, [r7, #12]
	switch(PWM->ID)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b03      	cmp	r3, #3
 800227e:	f201 801a 	bhi.w	80032b6 <timer_voidGPWM+0x104e>
 8002282:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <timer_voidGPWM+0x20>)
 8002284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002288:	08002299 	.word	0x08002299
 800228c:	08002677 	.word	0x08002677
 8002290:	08002b0d 	.word	0x08002b0d
 8002294:	08002ed3 	.word	0x08002ed3
	{
	case _TIM1:
		/*Update Request source from UG or Counter overflow/underflow*/
		CLR_BIT(TIM1->CR1 ,2);
 8002298:	4b7f      	ldr	r3, [pc, #508]	; (8002498 <timer_voidGPWM+0x230>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a7e      	ldr	r2, [pc, #504]	; (8002498 <timer_voidGPWM+0x230>)
 800229e:	f023 0304 	bic.w	r3, r3, #4
 80022a2:	6013      	str	r3, [r2, #0]
		/* PWM type  Edge align or center align */
		if(PWM->PWMtype == EDGE_ALIGN)	 TIM1->CR1 |= (PWM->PWMtype << 4) ;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	789b      	ldrb	r3, [r3, #2]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d109      	bne.n	80022c0 <timer_voidGPWM+0x58>
 80022ac:	4b7a      	ldr	r3, [pc, #488]	; (8002498 <timer_voidGPWM+0x230>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	7892      	ldrb	r2, [r2, #2]
 80022b4:	0112      	lsls	r2, r2, #4
 80022b6:	4611      	mov	r1, r2
 80022b8:	4a77      	ldr	r2, [pc, #476]	; (8002498 <timer_voidGPWM+0x230>)
 80022ba:	430b      	orrs	r3, r1
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e008      	b.n	80022d2 <timer_voidGPWM+0x6a>
		else 							 TIM1->CR1 |= (PWM->PWMtype << 5) ;
 80022c0:	4b75      	ldr	r3, [pc, #468]	; (8002498 <timer_voidGPWM+0x230>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	7892      	ldrb	r2, [r2, #2]
 80022c8:	0152      	lsls	r2, r2, #5
 80022ca:	4611      	mov	r1, r2
 80022cc:	4a72      	ldr	r2, [pc, #456]	; (8002498 <timer_voidGPWM+0x230>)
 80022ce:	430b      	orrs	r3, r1
 80022d0:	6013      	str	r3, [r2, #0]
		/*Check on Channel wanted to output the PWM*/
		if(PWM->chaannel==TIM_CHANNEL1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	785b      	ldrb	r3, [r3, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d16d      	bne.n	80023b6 <timer_voidGPWM+0x14e>
		{
			/*Channel is configuerd as output */
			CLR_BIT(TIM1->CCMR1,0);
 80022da:	4b6f      	ldr	r3, [pc, #444]	; (8002498 <timer_voidGPWM+0x230>)
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	4a6e      	ldr	r2, [pc, #440]	; (8002498 <timer_voidGPWM+0x230>)
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	6193      	str	r3, [r2, #24]
			CLR_BIT(TIM1->CCMR1,1);
 80022e6:	4b6c      	ldr	r3, [pc, #432]	; (8002498 <timer_voidGPWM+0x230>)
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	4a6b      	ldr	r2, [pc, #428]	; (8002498 <timer_voidGPWM+0x230>)
 80022ec:	f023 0302 	bic.w	r3, r3, #2
 80022f0:	6193      	str	r3, [r2, #24]
			/*  PWM Mode Start High or LOW Then Toggle at  compare Event mode1 or mode 2 toggel at overflow or under flow event*/
			TIM1->CCMR1 |= (PWM->PWMmode<<4);
 80022f2:	4b69      	ldr	r3, [pc, #420]	; (8002498 <timer_voidGPWM+0x230>)
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	78d2      	ldrb	r2, [r2, #3]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	4611      	mov	r1, r2
 80022fe:	4a66      	ldr	r2, [pc, #408]	; (8002498 <timer_voidGPWM+0x230>)
 8002300:	430b      	orrs	r3, r1
 8002302:	6193      	str	r3, [r2, #24]
			/*Enable preload of CCR1 To get valid behavior when writing on this register */
			SET_BIT(TIM1->CCMR1,3);
 8002304:	4b64      	ldr	r3, [pc, #400]	; (8002498 <timer_voidGPWM+0x230>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4a63      	ldr	r2, [pc, #396]	; (8002498 <timer_voidGPWM+0x230>)
 800230a:	f043 0308 	orr.w	r3, r3, #8
 800230e:	6193      	str	r3, [r2, #24]
			/*Enable Auto Reload Register AAR*/
			SET_BIT(TIM1->CR1,7);
 8002310:	4b61      	ldr	r3, [pc, #388]	; (8002498 <timer_voidGPWM+0x230>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a60      	ldr	r2, [pc, #384]	; (8002498 <timer_voidGPWM+0x230>)
 8002316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231a:	6013      	str	r3, [r2, #0]
			 * PWM frequency  = 1 / PeriodicTime
			 * Then  ARR = 1 / PWM frequency * TickTime of the counter
			 *
			 * note: the higher the ticktime the lower frequancy you can get .
			 */
			autoReload= 1000000/(u32)(PWM->Freq)*(PWM->TickTime);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a5e      	ldr	r2, [pc, #376]	; (800249c <timer_voidGPWM+0x234>)
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	b29b      	uxth	r3, r3
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	8892      	ldrh	r2, [r2, #4]
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	81fb      	strh	r3, [r7, #14]
			TIM1->ARR=(u16)autoReload;
 8002332:	4a59      	ldr	r2, [pc, #356]	; (8002498 <timer_voidGPWM+0x230>)
 8002334:	89fb      	ldrh	r3, [r7, #14]
 8002336:	62d3      	str	r3, [r2, #44]	; 0x2c
			 * PWM output DutyCycle = ( (ARR-CCR) / ARR  ) * 100  // Ton/Ttotal or   Ttotal-Toff/Ttotal  *100
			 * Then CCR =  ARR - ( (DutyCycle  *  ARR ) /100)
			 *
			 *
			 */
			if(PWM->PWMmode==MODE1_START_HIGH)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	78db      	ldrb	r3, [r3, #3]
 800233c:	2b06      	cmp	r3, #6
 800233e:	d10f      	bne.n	8002360 <timer_voidGPWM+0xf8>
			{
				 Compare = (u32)((PWM->duty) * autoReload)/100 ;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7b1b      	ldrb	r3, [r3, #12]
 8002344:	461a      	mov	r2, r3
 8002346:	89fb      	ldrh	r3, [r7, #14]
 8002348:	fb03 f302 	mul.w	r3, r3, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <timer_voidGPWM+0x238>)
 8002350:	fba3 2302 	umull	r2, r3, r3, r2
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	81bb      	strh	r3, [r7, #12]
				 TIM1->CCR1 = Compare ;
 8002358:	4a4f      	ldr	r2, [pc, #316]	; (8002498 <timer_voidGPWM+0x230>)
 800235a:	89bb      	ldrh	r3, [r7, #12]
 800235c:	6353      	str	r3, [r2, #52]	; 0x34
 800235e:	e010      	b.n	8002382 <timer_voidGPWM+0x11a>
			}
			else
			{
				 Compare = autoReload-(((u32)(PWM->duty)* autoReload)/100) ;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7b1b      	ldrb	r3, [r3, #12]
 8002364:	461a      	mov	r2, r3
 8002366:	89fb      	ldrh	r3, [r7, #14]
 8002368:	fb03 f302 	mul.w	r3, r3, r2
 800236c:	4a4c      	ldr	r2, [pc, #304]	; (80024a0 <timer_voidGPWM+0x238>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	b29b      	uxth	r3, r3
 8002376:	89fa      	ldrh	r2, [r7, #14]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	81bb      	strh	r3, [r7, #12]
				 TIM1->CCR1 = Compare ;
 800237c:	4a46      	ldr	r2, [pc, #280]	; (8002498 <timer_voidGPWM+0x230>)
 800237e:	89bb      	ldrh	r3, [r7, #12]
 8002380:	6353      	str	r3, [r2, #52]	; 0x34
			}


			/* Enable Update Event generation and Start count from 0 or new loaded value ==> Mode */
			SET_BIT(TIM1->EGR,0);
 8002382:	4b45      	ldr	r3, [pc, #276]	; (8002498 <timer_voidGPWM+0x230>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	4a44      	ldr	r2, [pc, #272]	; (8002498 <timer_voidGPWM+0x230>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6153      	str	r3, [r2, #20]
			/* Chose polarity of enabling Channel as active High , Enable output Channel  */
			CLR_BIT(TIM1->CCER,1);
 800238e:	4b42      	ldr	r3, [pc, #264]	; (8002498 <timer_voidGPWM+0x230>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4a41      	ldr	r2, [pc, #260]	; (8002498 <timer_voidGPWM+0x230>)
 8002394:	f023 0302 	bic.w	r3, r3, #2
 8002398:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM1->CCER,0);
 800239a:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <timer_voidGPWM+0x230>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4a3e      	ldr	r2, [pc, #248]	; (8002498 <timer_voidGPWM+0x230>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6213      	str	r3, [r2, #32]
			/*Start Counter*/
			SET_BIT(TIM1->CR1,0);
 80023a6:	4b3c      	ldr	r3, [pc, #240]	; (8002498 <timer_voidGPWM+0x230>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a3b      	ldr	r2, [pc, #236]	; (8002498 <timer_voidGPWM+0x230>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM1->CCER,12);
			/*Start Counter*/
			SET_BIT(TIM1->CR1,0);
		}

		break;
 80023b2:	f000 bf7b 	b.w	80032ac <timer_voidGPWM+0x1044>
	  else if(PWM->chaannel==TIM_CHANNEL2)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	785b      	ldrb	r3, [r3, #1]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d172      	bne.n	80024a4 <timer_voidGPWM+0x23c>
			 CLR_BIT(TIM1->CCMR1,8);
 80023be:	4b36      	ldr	r3, [pc, #216]	; (8002498 <timer_voidGPWM+0x230>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	4a35      	ldr	r2, [pc, #212]	; (8002498 <timer_voidGPWM+0x230>)
 80023c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023c8:	6193      	str	r3, [r2, #24]
			 CLR_BIT(TIM1->CCMR1,9);
 80023ca:	4b33      	ldr	r3, [pc, #204]	; (8002498 <timer_voidGPWM+0x230>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	4a32      	ldr	r2, [pc, #200]	; (8002498 <timer_voidGPWM+0x230>)
 80023d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023d4:	6193      	str	r3, [r2, #24]
			TIM1->CCMR1 |= (PWM->PWMmode<<12);
 80023d6:	4b30      	ldr	r3, [pc, #192]	; (8002498 <timer_voidGPWM+0x230>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	78d2      	ldrb	r2, [r2, #3]
 80023de:	0312      	lsls	r2, r2, #12
 80023e0:	4611      	mov	r1, r2
 80023e2:	4a2d      	ldr	r2, [pc, #180]	; (8002498 <timer_voidGPWM+0x230>)
 80023e4:	430b      	orrs	r3, r1
 80023e6:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1,11);
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <timer_voidGPWM+0x230>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	4a2a      	ldr	r2, [pc, #168]	; (8002498 <timer_voidGPWM+0x230>)
 80023ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023f2:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CR1,7);
 80023f4:	4b28      	ldr	r3, [pc, #160]	; (8002498 <timer_voidGPWM+0x230>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a27      	ldr	r2, [pc, #156]	; (8002498 <timer_voidGPWM+0x230>)
 80023fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023fe:	6013      	str	r3, [r2, #0]
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	8892      	ldrh	r2, [r2, #4]
 8002408:	fb02 f303 	mul.w	r3, r2, r3
 800240c:	4a23      	ldr	r2, [pc, #140]	; (800249c <timer_voidGPWM+0x234>)
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	81fb      	strh	r3, [r7, #14]
			TIM1->ARR=autoReload;
 8002414:	4a20      	ldr	r2, [pc, #128]	; (8002498 <timer_voidGPWM+0x230>)
 8002416:	89fb      	ldrh	r3, [r7, #14]
 8002418:	62d3      	str	r3, [r2, #44]	; 0x2c
			if(PWM->PWMmode==MODE1_START_HIGH)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	78db      	ldrb	r3, [r3, #3]
 800241e:	2b06      	cmp	r3, #6
 8002420:	d10f      	bne.n	8002442 <timer_voidGPWM+0x1da>
				 Compare = (u32)((PWM->duty) * autoReload)/100 ;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	7b1b      	ldrb	r3, [r3, #12]
 8002426:	461a      	mov	r2, r3
 8002428:	89fb      	ldrh	r3, [r7, #14]
 800242a:	fb03 f302 	mul.w	r3, r3, r2
 800242e:	461a      	mov	r2, r3
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <timer_voidGPWM+0x238>)
 8002432:	fba3 2302 	umull	r2, r3, r3, r2
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	81bb      	strh	r3, [r7, #12]
				 TIM1->CCR2 = Compare ;
 800243a:	4a17      	ldr	r2, [pc, #92]	; (8002498 <timer_voidGPWM+0x230>)
 800243c:	89bb      	ldrh	r3, [r7, #12]
 800243e:	6393      	str	r3, [r2, #56]	; 0x38
 8002440:	e010      	b.n	8002464 <timer_voidGPWM+0x1fc>
				 Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7b1b      	ldrb	r3, [r3, #12]
 8002446:	461a      	mov	r2, r3
 8002448:	89fb      	ldrh	r3, [r7, #14]
 800244a:	fb03 f302 	mul.w	r3, r3, r2
 800244e:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <timer_voidGPWM+0x238>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	b29b      	uxth	r3, r3
 8002458:	89fa      	ldrh	r2, [r7, #14]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	81bb      	strh	r3, [r7, #12]
				 TIM1->CCR2 = Compare ;
 800245e:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <timer_voidGPWM+0x230>)
 8002460:	89bb      	ldrh	r3, [r7, #12]
 8002462:	6393      	str	r3, [r2, #56]	; 0x38
			SET_BIT(TIM1->EGR,0);
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <timer_voidGPWM+0x230>)
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <timer_voidGPWM+0x230>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM1->CCER,5);
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <timer_voidGPWM+0x230>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	4a08      	ldr	r2, [pc, #32]	; (8002498 <timer_voidGPWM+0x230>)
 8002476:	f023 0320 	bic.w	r3, r3, #32
 800247a:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM1->CCER,4);
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <timer_voidGPWM+0x230>)
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4a05      	ldr	r2, [pc, #20]	; (8002498 <timer_voidGPWM+0x230>)
 8002482:	f043 0310 	orr.w	r3, r3, #16
 8002486:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM1->CR1,0);
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <timer_voidGPWM+0x230>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a02      	ldr	r2, [pc, #8]	; (8002498 <timer_voidGPWM+0x230>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6013      	str	r3, [r2, #0]
		break;
 8002494:	f000 bf0a 	b.w	80032ac <timer_voidGPWM+0x1044>
 8002498:	40012c00 	.word	0x40012c00
 800249c:	000f4240 	.word	0x000f4240
 80024a0:	51eb851f 	.word	0x51eb851f
	  else if(PWM->chaannel==TIM_CHANNEL3)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d172      	bne.n	8002592 <timer_voidGPWM+0x32a>
			CLR_BIT(TIM1->CCMR2,0);
 80024ac:	4b7e      	ldr	r3, [pc, #504]	; (80026a8 <timer_voidGPWM+0x440>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	4a7d      	ldr	r2, [pc, #500]	; (80026a8 <timer_voidGPWM+0x440>)
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	61d3      	str	r3, [r2, #28]
			CLR_BIT(TIM1->CCMR2,1);
 80024b8:	4b7b      	ldr	r3, [pc, #492]	; (80026a8 <timer_voidGPWM+0x440>)
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	4a7a      	ldr	r2, [pc, #488]	; (80026a8 <timer_voidGPWM+0x440>)
 80024be:	f023 0302 	bic.w	r3, r3, #2
 80024c2:	61d3      	str	r3, [r2, #28]
			TIM1->CCMR2 |= (PWM->PWMmode<<4);
 80024c4:	4b78      	ldr	r3, [pc, #480]	; (80026a8 <timer_voidGPWM+0x440>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	78d2      	ldrb	r2, [r2, #3]
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	4611      	mov	r1, r2
 80024d0:	4a75      	ldr	r2, [pc, #468]	; (80026a8 <timer_voidGPWM+0x440>)
 80024d2:	430b      	orrs	r3, r1
 80024d4:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM1->CCMR2,3);
 80024d6:	4b74      	ldr	r3, [pc, #464]	; (80026a8 <timer_voidGPWM+0x440>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a73      	ldr	r2, [pc, #460]	; (80026a8 <timer_voidGPWM+0x440>)
 80024dc:	f043 0308 	orr.w	r3, r3, #8
 80024e0:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM1->CR1,7);
 80024e2:	4b71      	ldr	r3, [pc, #452]	; (80026a8 <timer_voidGPWM+0x440>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a70      	ldr	r2, [pc, #448]	; (80026a8 <timer_voidGPWM+0x440>)
 80024e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ec:	6013      	str	r3, [r2, #0]
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	8892      	ldrh	r2, [r2, #4]
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	4a6c      	ldr	r2, [pc, #432]	; (80026ac <timer_voidGPWM+0x444>)
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	81fb      	strh	r3, [r7, #14]
			TIM1->ARR=autoReload;
 8002502:	4a69      	ldr	r2, [pc, #420]	; (80026a8 <timer_voidGPWM+0x440>)
 8002504:	89fb      	ldrh	r3, [r7, #14]
 8002506:	62d3      	str	r3, [r2, #44]	; 0x2c
			if(PWM->PWMmode==MODE1_START_HIGH)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	78db      	ldrb	r3, [r3, #3]
 800250c:	2b06      	cmp	r3, #6
 800250e:	d10f      	bne.n	8002530 <timer_voidGPWM+0x2c8>
				 Compare = (u32)((PWM->duty) * autoReload)/100 ;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	7b1b      	ldrb	r3, [r3, #12]
 8002514:	461a      	mov	r2, r3
 8002516:	89fb      	ldrh	r3, [r7, #14]
 8002518:	fb03 f302 	mul.w	r3, r3, r2
 800251c:	461a      	mov	r2, r3
 800251e:	4b64      	ldr	r3, [pc, #400]	; (80026b0 <timer_voidGPWM+0x448>)
 8002520:	fba3 2302 	umull	r2, r3, r3, r2
 8002524:	095b      	lsrs	r3, r3, #5
 8002526:	81bb      	strh	r3, [r7, #12]
				 TIM1->CCR3 = Compare ;
 8002528:	4a5f      	ldr	r2, [pc, #380]	; (80026a8 <timer_voidGPWM+0x440>)
 800252a:	89bb      	ldrh	r3, [r7, #12]
 800252c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800252e:	e010      	b.n	8002552 <timer_voidGPWM+0x2ea>
				 Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7b1b      	ldrb	r3, [r3, #12]
 8002534:	461a      	mov	r2, r3
 8002536:	89fb      	ldrh	r3, [r7, #14]
 8002538:	fb03 f302 	mul.w	r3, r3, r2
 800253c:	4a5c      	ldr	r2, [pc, #368]	; (80026b0 <timer_voidGPWM+0x448>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	b29b      	uxth	r3, r3
 8002546:	89fa      	ldrh	r2, [r7, #14]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	81bb      	strh	r3, [r7, #12]
				 TIM1->CCR3 = Compare ;
 800254c:	4a56      	ldr	r2, [pc, #344]	; (80026a8 <timer_voidGPWM+0x440>)
 800254e:	89bb      	ldrh	r3, [r7, #12]
 8002550:	63d3      	str	r3, [r2, #60]	; 0x3c
			CLR_BIT(TIM1->CR1 ,1);
 8002552:	4b55      	ldr	r3, [pc, #340]	; (80026a8 <timer_voidGPWM+0x440>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a54      	ldr	r2, [pc, #336]	; (80026a8 <timer_voidGPWM+0x440>)
 8002558:	f023 0302 	bic.w	r3, r3, #2
 800255c:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM1->EGR,0);
 800255e:	4b52      	ldr	r3, [pc, #328]	; (80026a8 <timer_voidGPWM+0x440>)
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	4a51      	ldr	r2, [pc, #324]	; (80026a8 <timer_voidGPWM+0x440>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM1->CCER,9);
 800256a:	4b4f      	ldr	r3, [pc, #316]	; (80026a8 <timer_voidGPWM+0x440>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a4e      	ldr	r2, [pc, #312]	; (80026a8 <timer_voidGPWM+0x440>)
 8002570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002574:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM1->CCER,8);
 8002576:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <timer_voidGPWM+0x440>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4a4b      	ldr	r2, [pc, #300]	; (80026a8 <timer_voidGPWM+0x440>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002580:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM1->CR1,0);
 8002582:	4b49      	ldr	r3, [pc, #292]	; (80026a8 <timer_voidGPWM+0x440>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a48      	ldr	r2, [pc, #288]	; (80026a8 <timer_voidGPWM+0x440>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6013      	str	r3, [r2, #0]
		break;
 800258e:	f000 be8d 	b.w	80032ac <timer_voidGPWM+0x1044>
	  else if(PWM->chaannel==TIM_CHANNEL4)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	2b03      	cmp	r3, #3
 8002598:	f040 8688 	bne.w	80032ac <timer_voidGPWM+0x1044>
			 CLR_BIT(TIM1->CCMR2,8);
 800259c:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <timer_voidGPWM+0x440>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	4a41      	ldr	r2, [pc, #260]	; (80026a8 <timer_voidGPWM+0x440>)
 80025a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a6:	61d3      	str	r3, [r2, #28]
			 CLR_BIT(TIM1->CCMR2,9);
 80025a8:	4b3f      	ldr	r3, [pc, #252]	; (80026a8 <timer_voidGPWM+0x440>)
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	4a3e      	ldr	r2, [pc, #248]	; (80026a8 <timer_voidGPWM+0x440>)
 80025ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025b2:	61d3      	str	r3, [r2, #28]
			TIM1->CCMR2 |= (PWM->PWMmode<<12);
 80025b4:	4b3c      	ldr	r3, [pc, #240]	; (80026a8 <timer_voidGPWM+0x440>)
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	78d2      	ldrb	r2, [r2, #3]
 80025bc:	0312      	lsls	r2, r2, #12
 80025be:	4611      	mov	r1, r2
 80025c0:	4a39      	ldr	r2, [pc, #228]	; (80026a8 <timer_voidGPWM+0x440>)
 80025c2:	430b      	orrs	r3, r1
 80025c4:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM1->CCMR2,11);
 80025c6:	4b38      	ldr	r3, [pc, #224]	; (80026a8 <timer_voidGPWM+0x440>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	4a37      	ldr	r2, [pc, #220]	; (80026a8 <timer_voidGPWM+0x440>)
 80025cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025d0:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM1->CR1,7);
 80025d2:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <timer_voidGPWM+0x440>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a34      	ldr	r2, [pc, #208]	; (80026a8 <timer_voidGPWM+0x440>)
 80025d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025dc:	6013      	str	r3, [r2, #0]
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	8892      	ldrh	r2, [r2, #4]
 80025e6:	fb02 f303 	mul.w	r3, r2, r3
 80025ea:	4a30      	ldr	r2, [pc, #192]	; (80026ac <timer_voidGPWM+0x444>)
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	81fb      	strh	r3, [r7, #14]
			TIM1->ARR=autoReload;
 80025f2:	4a2d      	ldr	r2, [pc, #180]	; (80026a8 <timer_voidGPWM+0x440>)
 80025f4:	89fb      	ldrh	r3, [r7, #14]
 80025f6:	62d3      	str	r3, [r2, #44]	; 0x2c
			if(PWM->PWMmode==MODE1_START_HIGH)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	78db      	ldrb	r3, [r3, #3]
 80025fc:	2b06      	cmp	r3, #6
 80025fe:	d10f      	bne.n	8002620 <timer_voidGPWM+0x3b8>
				 Compare = (u32)((PWM->duty) * autoReload)/100 ;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7b1b      	ldrb	r3, [r3, #12]
 8002604:	461a      	mov	r2, r3
 8002606:	89fb      	ldrh	r3, [r7, #14]
 8002608:	fb03 f302 	mul.w	r3, r3, r2
 800260c:	461a      	mov	r2, r3
 800260e:	4b28      	ldr	r3, [pc, #160]	; (80026b0 <timer_voidGPWM+0x448>)
 8002610:	fba3 2302 	umull	r2, r3, r3, r2
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	81bb      	strh	r3, [r7, #12]
				 TIM1->CCR4 = Compare ;
 8002618:	4a23      	ldr	r2, [pc, #140]	; (80026a8 <timer_voidGPWM+0x440>)
 800261a:	89bb      	ldrh	r3, [r7, #12]
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	e010      	b.n	8002642 <timer_voidGPWM+0x3da>
				 Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7b1b      	ldrb	r3, [r3, #12]
 8002624:	461a      	mov	r2, r3
 8002626:	89fb      	ldrh	r3, [r7, #14]
 8002628:	fb03 f302 	mul.w	r3, r3, r2
 800262c:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <timer_voidGPWM+0x448>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	b29b      	uxth	r3, r3
 8002636:	89fa      	ldrh	r2, [r7, #14]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	81bb      	strh	r3, [r7, #12]
				 TIM1->CCR4 = Compare ;
 800263c:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <timer_voidGPWM+0x440>)
 800263e:	89bb      	ldrh	r3, [r7, #12]
 8002640:	6413      	str	r3, [r2, #64]	; 0x40
			SET_BIT(TIM1->EGR,0);
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <timer_voidGPWM+0x440>)
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	4a18      	ldr	r2, [pc, #96]	; (80026a8 <timer_voidGPWM+0x440>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM1->CCER,13);
 800264e:	4b16      	ldr	r3, [pc, #88]	; (80026a8 <timer_voidGPWM+0x440>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a15      	ldr	r2, [pc, #84]	; (80026a8 <timer_voidGPWM+0x440>)
 8002654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002658:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM1->CCER,12);
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <timer_voidGPWM+0x440>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <timer_voidGPWM+0x440>)
 8002660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002664:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM1->CR1,0);
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <timer_voidGPWM+0x440>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <timer_voidGPWM+0x440>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6013      	str	r3, [r2, #0]
		break;
 8002672:	f000 be1b 	b.w	80032ac <timer_voidGPWM+0x1044>
	case _TIM2:

		/*Update Request source from UG or Counter overflow/underflow*/
		CLR_BIT(TIM2->CR1 ,2);
 8002676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	6013      	str	r3, [r2, #0]
		/* PWM type  Edge align or center align */
		if(PWM->PWMtype == EDGE_ALIGN)	 TIM2->CR1 |= (PWM->PWMtype << 4) ;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	789b      	ldrb	r3, [r3, #2]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d112      	bne.n	80026b4 <timer_voidGPWM+0x44c>
 800268e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	7892      	ldrb	r2, [r2, #2]
 8002698:	0112      	lsls	r2, r2, #4
 800269a:	4611      	mov	r1, r2
 800269c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026a0:	430b      	orrs	r3, r1
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	e011      	b.n	80026ca <timer_voidGPWM+0x462>
 80026a6:	bf00      	nop
 80026a8:	40012c00 	.word	0x40012c00
 80026ac:	000f4240 	.word	0x000f4240
 80026b0:	51eb851f 	.word	0x51eb851f
		else 							 TIM2->CR1 |= (PWM->PWMtype << 5) ;
 80026b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	7892      	ldrb	r2, [r2, #2]
 80026be:	0152      	lsls	r2, r2, #5
 80026c0:	4611      	mov	r1, r2
 80026c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026c6:	430b      	orrs	r3, r1
 80026c8:	6013      	str	r3, [r2, #0]
		/*Check on Channel wanted to output the PWM*/
		if(PWM->chaannel==TIM_CHANNEL1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	785b      	ldrb	r3, [r3, #1]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 8083 	bne.w	80027da <timer_voidGPWM+0x572>
		{
			/*Channel is configuerd as output */
			CLR_BIT(TIM2->CCMR1,0);
 80026d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	6193      	str	r3, [r2, #24]
			CLR_BIT(TIM2->CCMR1,1);
 80026e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	6193      	str	r3, [r2, #24]
			/*  PWM Mode Start High or LOW Then Toggle at  compare Event mode1 or mode 2 toggel at overflow or under flow event*/
			TIM2->CCMR1 |= (PWM->PWMmode<<4);
 80026f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	78d2      	ldrb	r2, [r2, #3]
 80026fe:	0112      	lsls	r2, r2, #4
 8002700:	4611      	mov	r1, r2
 8002702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002706:	430b      	orrs	r3, r1
 8002708:	6193      	str	r3, [r2, #24]
			/*Enable preload of CCR1 To get valid behavior when writing on this register */
			SET_BIT(TIM2->CCMR1,3);
 800270a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002714:	f043 0308 	orr.w	r3, r3, #8
 8002718:	6193      	str	r3, [r2, #24]
			/*Enable Auto Reload Register AAR*/
			SET_BIT(TIM2->CR1,7);
 800271a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002728:	6013      	str	r3, [r2, #0]
			 * PWM frequency  = 1 / PeriodicTime
			 * Then  ARR = 1 / PWM frequency * TickTime of the counter
			 *
			 * note: the higher the ticktime the lower frequancy you can get .
			 */
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	8892      	ldrh	r2, [r2, #4]
 8002732:	fb02 f303 	mul.w	r3, r2, r3
 8002736:	4ab0      	ldr	r2, [pc, #704]	; (80029f8 <timer_voidGPWM+0x790>)
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	81fb      	strh	r3, [r7, #14]
			TIM2->ARR=autoReload;
 800273e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002742:	89fb      	ldrh	r3, [r7, #14]
 8002744:	62d3      	str	r3, [r2, #44]	; 0x2c
			 * PWM output DutyCycle = ( (ARR-CCR) / ARR  ) * 100  // Ton/Ttotal or   Ttotal-Toff/Ttotal  *100
			 * Then CCR =  ARR - ( (DutyCycle  *  ARR ) /100)
			 *
			 *
			 */
			if(PWM->PWMmode==MODE1_START_HIGH)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	78db      	ldrb	r3, [r3, #3]
 800274a:	2b06      	cmp	r3, #6
 800274c:	d111      	bne.n	8002772 <timer_voidGPWM+0x50a>
			{
				Compare = ((PWM->duty) * autoReload)/100 ;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	7b1b      	ldrb	r3, [r3, #12]
 8002752:	461a      	mov	r2, r3
 8002754:	89fb      	ldrh	r3, [r7, #14]
 8002756:	fb03 f302 	mul.w	r3, r3, r2
 800275a:	4aa8      	ldr	r2, [pc, #672]	; (80029fc <timer_voidGPWM+0x794>)
 800275c:	fb82 1203 	smull	r1, r2, r2, r3
 8002760:	1152      	asrs	r2, r2, #5
 8002762:	17db      	asrs	r3, r3, #31
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	81bb      	strh	r3, [r7, #12]
				 TIM2->CCR1 = Compare ;
 8002768:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800276c:	89bb      	ldrh	r3, [r7, #12]
 800276e:	6353      	str	r3, [r2, #52]	; 0x34
 8002770:	e011      	b.n	8002796 <timer_voidGPWM+0x52e>
			}
			else
			{
				 Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	7b1b      	ldrb	r3, [r3, #12]
 8002776:	461a      	mov	r2, r3
 8002778:	89fb      	ldrh	r3, [r7, #14]
 800277a:	fb03 f302 	mul.w	r3, r3, r2
 800277e:	4a9f      	ldr	r2, [pc, #636]	; (80029fc <timer_voidGPWM+0x794>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	b29b      	uxth	r3, r3
 8002788:	89fa      	ldrh	r2, [r7, #14]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	81bb      	strh	r3, [r7, #12]
				 TIM2->CCR1 = Compare ;
 800278e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002792:	89bb      	ldrh	r3, [r7, #12]
 8002794:	6353      	str	r3, [r2, #52]	; 0x34
			}


			/* Enable Update Event generation and Start count from 0 or new loaded value ==> Mode */
			SET_BIT(TIM2->EGR,0);
 8002796:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6153      	str	r3, [r2, #20]
			/* Chose polarity of enabling Channel as active High , Enable output Channel  */
			CLR_BIT(TIM2->CCER,1);
 80027a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027b0:	f023 0302 	bic.w	r3, r3, #2
 80027b4:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM2->CCER,0);
 80027b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6213      	str	r3, [r2, #32]
			/*Start Counter*/
			SET_BIT(TIM2->CR1,0);
 80027c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM2->CCER,12);
			/*Start Counter*/
			SET_BIT(TIM2->CR1,0);
		}

		break;
 80027d6:	f000 bd6b 	b.w	80032b0 <timer_voidGPWM+0x1048>
	  else if(PWM->chaannel==TIM_CHANNEL2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	785b      	ldrb	r3, [r3, #1]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	f040 8082 	bne.w	80028e8 <timer_voidGPWM+0x680>
			 CLR_BIT(TIM2->CCMR1,8);
 80027e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027f2:	6193      	str	r3, [r2, #24]
			 CLR_BIT(TIM2->CCMR1,9);
 80027f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002802:	6193      	str	r3, [r2, #24]
			TIM2->CCMR1 |= (PWM->PWMmode<<12);
 8002804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	78d2      	ldrb	r2, [r2, #3]
 800280e:	0312      	lsls	r2, r2, #12
 8002810:	4611      	mov	r1, r2
 8002812:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002816:	430b      	orrs	r3, r1
 8002818:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM2->CCMR1,11);
 800281a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002828:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM2->CR1,7);
 800282a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002838:	6013      	str	r3, [r2, #0]
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	8892      	ldrh	r2, [r2, #4]
 8002842:	fb02 f303 	mul.w	r3, r2, r3
 8002846:	4a6c      	ldr	r2, [pc, #432]	; (80029f8 <timer_voidGPWM+0x790>)
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	81fb      	strh	r3, [r7, #14]
			TIM2->ARR=autoReload;
 800284e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002852:	89fb      	ldrh	r3, [r7, #14]
 8002854:	62d3      	str	r3, [r2, #44]	; 0x2c
			if(PWM->PWMmode==MODE1_START_HIGH)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	78db      	ldrb	r3, [r3, #3]
 800285a:	2b06      	cmp	r3, #6
 800285c:	d110      	bne.n	8002880 <timer_voidGPWM+0x618>
				 Compare = (u32)((PWM->duty) * autoReload)/100 ;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7b1b      	ldrb	r3, [r3, #12]
 8002862:	461a      	mov	r2, r3
 8002864:	89fb      	ldrh	r3, [r7, #14]
 8002866:	fb03 f302 	mul.w	r3, r3, r2
 800286a:	461a      	mov	r2, r3
 800286c:	4b63      	ldr	r3, [pc, #396]	; (80029fc <timer_voidGPWM+0x794>)
 800286e:	fba3 2302 	umull	r2, r3, r3, r2
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	81bb      	strh	r3, [r7, #12]
				 TIM2->CCR2 = Compare ;
 8002876:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800287a:	89bb      	ldrh	r3, [r7, #12]
 800287c:	6393      	str	r3, [r2, #56]	; 0x38
 800287e:	e011      	b.n	80028a4 <timer_voidGPWM+0x63c>
				 Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	7b1b      	ldrb	r3, [r3, #12]
 8002884:	461a      	mov	r2, r3
 8002886:	89fb      	ldrh	r3, [r7, #14]
 8002888:	fb03 f302 	mul.w	r3, r3, r2
 800288c:	4a5b      	ldr	r2, [pc, #364]	; (80029fc <timer_voidGPWM+0x794>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	b29b      	uxth	r3, r3
 8002896:	89fa      	ldrh	r2, [r7, #14]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	81bb      	strh	r3, [r7, #12]
				 TIM2->CCR2 = Compare ;
 800289c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028a0:	89bb      	ldrh	r3, [r7, #12]
 80028a2:	6393      	str	r3, [r2, #56]	; 0x38
			SET_BIT(TIM2->EGR,0);
 80028a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM2->CCER,5);
 80028b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028be:	f023 0320 	bic.w	r3, r3, #32
 80028c2:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM2->CCER,4);
 80028c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028ce:	f043 0310 	orr.w	r3, r3, #16
 80028d2:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM2->CR1,0);
 80028d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6013      	str	r3, [r2, #0]
		break;
 80028e4:	f000 bce4 	b.w	80032b0 <timer_voidGPWM+0x1048>
	  else if(PWM->chaannel==TIM_CHANNEL3)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	785b      	ldrb	r3, [r3, #1]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	f040 8087 	bne.w	8002a00 <timer_voidGPWM+0x798>
			CLR_BIT(TIM2->CCMR2,0);
 80028f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	61d3      	str	r3, [r2, #28]
			CLR_BIT(TIM2->CCMR2,1);
 8002902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800290c:	f023 0302 	bic.w	r3, r3, #2
 8002910:	61d3      	str	r3, [r2, #28]
			TIM2->CCMR2 |= (PWM->PWMmode<<4);
 8002912:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	78d2      	ldrb	r2, [r2, #3]
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	4611      	mov	r1, r2
 8002920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002924:	430b      	orrs	r3, r1
 8002926:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM2->CCMR2,3);
 8002928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002932:	f043 0308 	orr.w	r3, r3, #8
 8002936:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM2->CR1,7);
 8002938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002946:	6013      	str	r3, [r2, #0]
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	8892      	ldrh	r2, [r2, #4]
 8002950:	fb02 f303 	mul.w	r3, r2, r3
 8002954:	4a28      	ldr	r2, [pc, #160]	; (80029f8 <timer_voidGPWM+0x790>)
 8002956:	fbb2 f3f3 	udiv	r3, r2, r3
 800295a:	81fb      	strh	r3, [r7, #14]
			TIM2->ARR=autoReload;
 800295c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002960:	89fb      	ldrh	r3, [r7, #14]
 8002962:	62d3      	str	r3, [r2, #44]	; 0x2c
			if(PWM->PWMmode==MODE1_START_HIGH)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	78db      	ldrb	r3, [r3, #3]
 8002968:	2b06      	cmp	r3, #6
 800296a:	d110      	bne.n	800298e <timer_voidGPWM+0x726>
				 Compare = (u32)((PWM->duty) * autoReload)/100 ;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7b1b      	ldrb	r3, [r3, #12]
 8002970:	461a      	mov	r2, r3
 8002972:	89fb      	ldrh	r3, [r7, #14]
 8002974:	fb03 f302 	mul.w	r3, r3, r2
 8002978:	461a      	mov	r2, r3
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <timer_voidGPWM+0x794>)
 800297c:	fba3 2302 	umull	r2, r3, r3, r2
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	81bb      	strh	r3, [r7, #12]
				 TIM2->CCR3 = Compare ;
 8002984:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002988:	89bb      	ldrh	r3, [r7, #12]
 800298a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800298c:	e011      	b.n	80029b2 <timer_voidGPWM+0x74a>
				Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	7b1b      	ldrb	r3, [r3, #12]
 8002992:	461a      	mov	r2, r3
 8002994:	89fb      	ldrh	r3, [r7, #14]
 8002996:	fb03 f302 	mul.w	r3, r3, r2
 800299a:	4a18      	ldr	r2, [pc, #96]	; (80029fc <timer_voidGPWM+0x794>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	89fa      	ldrh	r2, [r7, #14]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	81bb      	strh	r3, [r7, #12]
				 TIM2->CCR3 = Compare ;
 80029aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029ae:	89bb      	ldrh	r3, [r7, #12]
 80029b0:	63d3      	str	r3, [r2, #60]	; 0x3c
			SET_BIT(TIM2->EGR,0);
 80029b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM2->CCER,9);
 80029c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029d0:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM2->CCER,8);
 80029d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e0:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM2->CR1,0);
 80029e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6013      	str	r3, [r2, #0]
		break;
 80029f2:	f000 bc5d 	b.w	80032b0 <timer_voidGPWM+0x1048>
 80029f6:	bf00      	nop
 80029f8:	000f4240 	.word	0x000f4240
 80029fc:	51eb851f 	.word	0x51eb851f
	  else if(PWM->chaannel==TIM_CHANNEL4)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	785b      	ldrb	r3, [r3, #1]
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	f040 8453 	bne.w	80032b0 <timer_voidGPWM+0x1048>
			 CLR_BIT(TIM2->CCMR2,8);
 8002a0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a18:	61d3      	str	r3, [r2, #28]
			 CLR_BIT(TIM2->CCMR2,9);
 8002a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a28:	61d3      	str	r3, [r2, #28]
			TIM2->CCMR2 |= (PWM->PWMmode<<12);
 8002a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	78d2      	ldrb	r2, [r2, #3]
 8002a34:	0312      	lsls	r2, r2, #12
 8002a36:	4611      	mov	r1, r2
 8002a38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM2->CCMR2,11);
 8002a40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a4e:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM2->CR1,7);
 8002a50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a5e:	6013      	str	r3, [r2, #0]
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	8892      	ldrh	r2, [r2, #4]
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	4a91      	ldr	r2, [pc, #580]	; (8002cb4 <timer_voidGPWM+0xa4c>)
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	81fb      	strh	r3, [r7, #14]
			TIM2->ARR=autoReload;
 8002a74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a78:	89fb      	ldrh	r3, [r7, #14]
 8002a7a:	62d3      	str	r3, [r2, #44]	; 0x2c
			if(PWM->PWMmode==MODE1_START_HIGH)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	78db      	ldrb	r3, [r3, #3]
 8002a80:	2b06      	cmp	r3, #6
 8002a82:	d110      	bne.n	8002aa6 <timer_voidGPWM+0x83e>
				 Compare = (u32)((PWM->duty) * autoReload)/100 ;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	7b1b      	ldrb	r3, [r3, #12]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	89fb      	ldrh	r3, [r7, #14]
 8002a8c:	fb03 f302 	mul.w	r3, r3, r2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b89      	ldr	r3, [pc, #548]	; (8002cb8 <timer_voidGPWM+0xa50>)
 8002a94:	fba3 2302 	umull	r2, r3, r3, r2
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	81bb      	strh	r3, [r7, #12]
				 TIM2->CCR4 = Compare ;
 8002a9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aa0:	89bb      	ldrh	r3, [r7, #12]
 8002aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa4:	e011      	b.n	8002aca <timer_voidGPWM+0x862>
				 Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	7b1b      	ldrb	r3, [r3, #12]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	89fb      	ldrh	r3, [r7, #14]
 8002aae:	fb03 f302 	mul.w	r3, r3, r2
 8002ab2:	4a81      	ldr	r2, [pc, #516]	; (8002cb8 <timer_voidGPWM+0xa50>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	89fa      	ldrh	r2, [r7, #14]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	81bb      	strh	r3, [r7, #12]
				 TIM2->CCR4 = Compare ;
 8002ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ac6:	89bb      	ldrh	r3, [r7, #12]
 8002ac8:	6413      	str	r3, [r2, #64]	; 0x40
			SET_BIT(TIM2->EGR,0);
 8002aca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM2->CCER,13);
 8002ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ae4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ae8:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM2->CCER,12);
 8002aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002af8:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM2->CR1,0);
 8002afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6013      	str	r3, [r2, #0]
		break;
 8002b0a:	e3d1      	b.n	80032b0 <timer_voidGPWM+0x1048>
	case _TIM3:
		/*Update Request source from UG or Counter overflow/underflow*/
		CLR_BIT(TIM3->CR1 ,2);
 8002b0c:	4b6b      	ldr	r3, [pc, #428]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a6a      	ldr	r2, [pc, #424]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b12:	f023 0304 	bic.w	r3, r3, #4
 8002b16:	6013      	str	r3, [r2, #0]
		/* PWM type  Edge align or center align */
		if(PWM->PWMtype == EDGE_ALIGN)	 TIM3->CR1 |= (PWM->PWMtype << 4) ;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	789b      	ldrb	r3, [r3, #2]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <timer_voidGPWM+0x8cc>
 8002b20:	4b66      	ldr	r3, [pc, #408]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	7892      	ldrb	r2, [r2, #2]
 8002b28:	0112      	lsls	r2, r2, #4
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4a63      	ldr	r2, [pc, #396]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	e008      	b.n	8002b46 <timer_voidGPWM+0x8de>
		else 							 TIM3->CR1 |= (PWM->PWMtype << 5) ;
 8002b34:	4b61      	ldr	r3, [pc, #388]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	7892      	ldrb	r2, [r2, #2]
 8002b3c:	0152      	lsls	r2, r2, #5
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4a5e      	ldr	r2, [pc, #376]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b42:	430b      	orrs	r3, r1
 8002b44:	6013      	str	r3, [r2, #0]
		/*Check on Channel wanted to output the PWM*/
		if(PWM->chaannel==TIM_CHANNEL1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d16b      	bne.n	8002c26 <timer_voidGPWM+0x9be>
		{
			/*Channel is configuerd as output */
			CLR_BIT(TIM3->CCMR1,0);
 8002b4e:	4b5b      	ldr	r3, [pc, #364]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	4a5a      	ldr	r2, [pc, #360]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6193      	str	r3, [r2, #24]
			CLR_BIT(TIM3->CCMR1,1);
 8002b5a:	4b58      	ldr	r3, [pc, #352]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	4a57      	ldr	r2, [pc, #348]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b60:	f023 0302 	bic.w	r3, r3, #2
 8002b64:	6193      	str	r3, [r2, #24]
			/*  PWM Mode Start High or LOW Then Toggle at  compare Event mode1 or mode 2 toggel at overflow or under flow event*/
			TIM3->CCMR1 |= (PWM->PWMmode<<4);
 8002b66:	4b55      	ldr	r3, [pc, #340]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	78d2      	ldrb	r2, [r2, #3]
 8002b6e:	0112      	lsls	r2, r2, #4
 8002b70:	4611      	mov	r1, r2
 8002b72:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6193      	str	r3, [r2, #24]
			/*Enable preload of CCR1 To get valid behavior when writing on this register */
			SET_BIT(TIM3->CCMR1,3);
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4a4f      	ldr	r2, [pc, #316]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b7e:	f043 0308 	orr.w	r3, r3, #8
 8002b82:	6193      	str	r3, [r2, #24]
			/*Enable Auto Reload Register AAR*/
			SET_BIT(TIM3->CR1,7);
 8002b84:	4b4d      	ldr	r3, [pc, #308]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a4c      	ldr	r2, [pc, #304]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8e:	6013      	str	r3, [r2, #0]
			 * PWM frequency  = 1 / PeriodicTime
			 * Then  ARR = 1 / PWM frequency * TickTime of the counter
			 *
			 * note: the higher the ticktime the lower frequancy you can get .
			 */
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	8892      	ldrh	r2, [r2, #4]
 8002b98:	fb02 f303 	mul.w	r3, r2, r3
 8002b9c:	4a45      	ldr	r2, [pc, #276]	; (8002cb4 <timer_voidGPWM+0xa4c>)
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	81fb      	strh	r3, [r7, #14]
			TIM3->ARR=autoReload;
 8002ba4:	4a45      	ldr	r2, [pc, #276]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002ba6:	89fb      	ldrh	r3, [r7, #14]
 8002ba8:	62d3      	str	r3, [r2, #44]	; 0x2c
			 * PWM output DutyCycle = ( (ARR-CCR) / ARR  ) * 100  // Ton/Ttotal or   Ttotal-Toff/Ttotal  *100
			 * Then CCR =  ARR - ( (DutyCycle  *  ARR ) /100)
			 *
			 *
			 */
			if(PWM->PWMmode==MODE1_START_HIGH)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	78db      	ldrb	r3, [r3, #3]
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d10f      	bne.n	8002bd2 <timer_voidGPWM+0x96a>
			{
				 Compare = (u32)((PWM->duty) * autoReload)/100 ;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	7b1b      	ldrb	r3, [r3, #12]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	89fb      	ldrh	r3, [r7, #14]
 8002bba:	fb03 f302 	mul.w	r3, r3, r2
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <timer_voidGPWM+0xa50>)
 8002bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	81bb      	strh	r3, [r7, #12]
				 TIM3->CCR1 = Compare ;
 8002bca:	4a3c      	ldr	r2, [pc, #240]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002bcc:	89bb      	ldrh	r3, [r7, #12]
 8002bce:	6353      	str	r3, [r2, #52]	; 0x34
 8002bd0:	e010      	b.n	8002bf4 <timer_voidGPWM+0x98c>
			}
			else
			{
				 Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7b1b      	ldrb	r3, [r3, #12]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	89fb      	ldrh	r3, [r7, #14]
 8002bda:	fb03 f302 	mul.w	r3, r3, r2
 8002bde:	4a36      	ldr	r2, [pc, #216]	; (8002cb8 <timer_voidGPWM+0xa50>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	095b      	lsrs	r3, r3, #5
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	89fa      	ldrh	r2, [r7, #14]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	81bb      	strh	r3, [r7, #12]
				 TIM3->CCR1 = Compare ;
 8002bee:	4a33      	ldr	r2, [pc, #204]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002bf0:	89bb      	ldrh	r3, [r7, #12]
 8002bf2:	6353      	str	r3, [r2, #52]	; 0x34
			}


			/* Enable Update Event generation and Start count from 0 or new loaded value ==> Mode */
			SET_BIT(TIM3->EGR,0);
 8002bf4:	4b31      	ldr	r3, [pc, #196]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	4a30      	ldr	r2, [pc, #192]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6153      	str	r3, [r2, #20]
			/* Chose polarity of enabling Channel as active High , Enable output Channel  */
			CLR_BIT(TIM3->CCER,1);
 8002c00:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	4a2d      	ldr	r2, [pc, #180]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c06:	f023 0302 	bic.w	r3, r3, #2
 8002c0a:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM3->CCER,0);
 8002c0c:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	4a2a      	ldr	r2, [pc, #168]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6213      	str	r3, [r2, #32]
			/*Start Counter*/
			SET_BIT(TIM3->CR1,0);
 8002c18:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a27      	ldr	r2, [pc, #156]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	e155      	b.n	8002ed2 <timer_voidGPWM+0xc6a>
		}

	  else if(PWM->chaannel==TIM_CHANNEL2)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	785b      	ldrb	r3, [r3, #1]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d172      	bne.n	8002d14 <timer_voidGPWM+0xaac>
		{
			/*Channel is configuerd as output */
			 CLR_BIT(TIM3->CCMR1,8);
 8002c2e:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	4a22      	ldr	r2, [pc, #136]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c38:	6193      	str	r3, [r2, #24]
			 CLR_BIT(TIM3->CCMR1,9);
 8002c3a:	4b20      	ldr	r3, [pc, #128]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	4a1f      	ldr	r2, [pc, #124]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c44:	6193      	str	r3, [r2, #24]
			/*  PWM Mode Start High or LOW Then Toggle at  compare Event mode1 or mode 2 toggel at overflow or under flow event*/
			TIM3->CCMR1 |= (PWM->PWMmode<<12);
 8002c46:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	78d2      	ldrb	r2, [r2, #3]
 8002c4e:	0312      	lsls	r2, r2, #12
 8002c50:	4611      	mov	r1, r2
 8002c52:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c54:	430b      	orrs	r3, r1
 8002c56:	6193      	str	r3, [r2, #24]
			/*Enable preload of CCR1 To get valid behavior when writing on this register */
			SET_BIT(TIM3->CCMR1,11);
 8002c58:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4a17      	ldr	r2, [pc, #92]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c62:	6193      	str	r3, [r2, #24]
			/*Enable Auto Reload Register AAR*/
			SET_BIT(TIM3->CR1,7);
 8002c64:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a14      	ldr	r2, [pc, #80]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6e:	6013      	str	r3, [r2, #0]
			 * PWM frequency  = 1 / PeriodicTime
			 * Then  ARR = 1 / PWM frequency * TickTime of the counter
			 *
			 * note: the higher the ticktime the lower frequancy you can get .
			 */
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	8892      	ldrh	r2, [r2, #4]
 8002c78:	fb02 f303 	mul.w	r3, r2, r3
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <timer_voidGPWM+0xa4c>)
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	81fb      	strh	r3, [r7, #14]
			TIM3->ARR=autoReload;
 8002c84:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002c86:	89fb      	ldrh	r3, [r7, #14]
 8002c88:	62d3      	str	r3, [r2, #44]	; 0x2c
			 * PWM output DutyCycle = ( (ARR-CRR) / ARR  ) * 100  // Ton/Ttotal or   Ttotal-Toff/Ttotal  *100
			 * Then CCR =  ARR - ( (DutyCycle  *  ARR ) /100)
			 *
			 *
			 */
			if(PWM->PWMmode==MODE1_START_HIGH)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	78db      	ldrb	r3, [r3, #3]
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d116      	bne.n	8002cc0 <timer_voidGPWM+0xa58>
			{
				Compare = (u32)((PWM->duty) * autoReload)/100 ;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7b1b      	ldrb	r3, [r3, #12]
 8002c96:	461a      	mov	r2, r3
 8002c98:	89fb      	ldrh	r3, [r7, #14]
 8002c9a:	fb03 f302 	mul.w	r3, r3, r2
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <timer_voidGPWM+0xa50>)
 8002ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	81bb      	strh	r3, [r7, #12]
				 TIM3->CCR2 = Compare ;
 8002caa:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <timer_voidGPWM+0xa54>)
 8002cac:	89bb      	ldrh	r3, [r7, #12]
 8002cae:	6393      	str	r3, [r2, #56]	; 0x38
 8002cb0:	e017      	b.n	8002ce2 <timer_voidGPWM+0xa7a>
 8002cb2:	bf00      	nop
 8002cb4:	000f4240 	.word	0x000f4240
 8002cb8:	51eb851f 	.word	0x51eb851f
 8002cbc:	40000400 	.word	0x40000400
			}
			else
			{
				 Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	7b1b      	ldrb	r3, [r3, #12]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	89fb      	ldrh	r3, [r7, #14]
 8002cc8:	fb03 f302 	mul.w	r3, r3, r2
 8002ccc:	4a8b      	ldr	r2, [pc, #556]	; (8002efc <timer_voidGPWM+0xc94>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	89fa      	ldrh	r2, [r7, #14]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	81bb      	strh	r3, [r7, #12]
				 TIM3->CCR2 = Compare ;
 8002cdc:	4a88      	ldr	r2, [pc, #544]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002cde:	89bb      	ldrh	r3, [r7, #12]
 8002ce0:	6393      	str	r3, [r2, #56]	; 0x38
			}


			/* Enable Update Event generation and Start count from 0 or new loaded value ==> Mode */
			SET_BIT(TIM3->EGR,0);
 8002ce2:	4b87      	ldr	r3, [pc, #540]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	4a86      	ldr	r2, [pc, #536]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6153      	str	r3, [r2, #20]
			/* Chose polarity of enabling Channel as active High , Enable output Channel  */
			CLR_BIT(TIM3->CCER,5);
 8002cee:	4b84      	ldr	r3, [pc, #528]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a83      	ldr	r2, [pc, #524]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002cf4:	f023 0320 	bic.w	r3, r3, #32
 8002cf8:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM3->CCER,4);
 8002cfa:	4b81      	ldr	r3, [pc, #516]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a80      	ldr	r2, [pc, #512]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d00:	f043 0310 	orr.w	r3, r3, #16
 8002d04:	6213      	str	r3, [r2, #32]
			/*Start Counter*/
			SET_BIT(TIM3->CR1,0);
 8002d06:	4b7e      	ldr	r3, [pc, #504]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7d      	ldr	r2, [pc, #500]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e0de      	b.n	8002ed2 <timer_voidGPWM+0xc6a>
		}
	  else if(PWM->chaannel==TIM_CHANNEL3)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d16b      	bne.n	8002df4 <timer_voidGPWM+0xb8c>
		{
			/*Channel is configuerd as output */
			CLR_BIT(TIM3->CCMR2,0);
 8002d1c:	4b78      	ldr	r3, [pc, #480]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	4a77      	ldr	r2, [pc, #476]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	61d3      	str	r3, [r2, #28]
			CLR_BIT(TIM3->CCMR2,1);
 8002d28:	4b75      	ldr	r3, [pc, #468]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	4a74      	ldr	r2, [pc, #464]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d2e:	f023 0302 	bic.w	r3, r3, #2
 8002d32:	61d3      	str	r3, [r2, #28]
			/*  PWM Mode Start High or LOW Then Toggle at  compare Event mode1 or mode 2 toggel at overflow or under flow event*/
			TIM3->CCMR2 |= (PWM->PWMmode<<4);
 8002d34:	4b72      	ldr	r3, [pc, #456]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	78d2      	ldrb	r2, [r2, #3]
 8002d3c:	0112      	lsls	r2, r2, #4
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4a6f      	ldr	r2, [pc, #444]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d42:	430b      	orrs	r3, r1
 8002d44:	61d3      	str	r3, [r2, #28]
			/*Enable preload of CCR1 To get valid behavior when writing on this register */
			SET_BIT(TIM3->CCMR2,3);
 8002d46:	4b6e      	ldr	r3, [pc, #440]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4a6d      	ldr	r2, [pc, #436]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	61d3      	str	r3, [r2, #28]
			/*Enable Auto Reload Register AAR*/
			SET_BIT(TIM3->CR1,7);
 8002d52:	4b6b      	ldr	r3, [pc, #428]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a6a      	ldr	r2, [pc, #424]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d5c:	6013      	str	r3, [r2, #0]
			 * PWM frequency  = 1 / PeriodicTime
			 * Then  ARR = 1 / PWM frequency * TickTime of the counter
			 *
			 * note: the higher the ticktime the lower frequancy you can get .
			 */
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	8892      	ldrh	r2, [r2, #4]
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	4a66      	ldr	r2, [pc, #408]	; (8002f04 <timer_voidGPWM+0xc9c>)
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	81fb      	strh	r3, [r7, #14]
			TIM3->ARR=autoReload;
 8002d72:	4a63      	ldr	r2, [pc, #396]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d74:	89fb      	ldrh	r3, [r7, #14]
 8002d76:	62d3      	str	r3, [r2, #44]	; 0x2c
			 * PWM output DutyCycle = ( (ARR-CCR) / ARR  ) * 100  // Ton/Ttotal or   Ttotal-Toff/Ttotal  *100
			 * Then CCR =  ARR - ( (DutyCycle  *  ARR ) /100)
			 *
			 *
			 */
			if(PWM->PWMmode==MODE1_START_HIGH)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	78db      	ldrb	r3, [r3, #3]
 8002d7c:	2b06      	cmp	r3, #6
 8002d7e:	d10f      	bne.n	8002da0 <timer_voidGPWM+0xb38>
			{
				Compare = (u32)((PWM->duty) * autoReload)/100 ;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	7b1b      	ldrb	r3, [r3, #12]
 8002d84:	461a      	mov	r2, r3
 8002d86:	89fb      	ldrh	r3, [r7, #14]
 8002d88:	fb03 f302 	mul.w	r3, r3, r2
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b5b      	ldr	r3, [pc, #364]	; (8002efc <timer_voidGPWM+0xc94>)
 8002d90:	fba3 2302 	umull	r2, r3, r3, r2
 8002d94:	095b      	lsrs	r3, r3, #5
 8002d96:	81bb      	strh	r3, [r7, #12]
				 TIM3->CCR3 = Compare ;
 8002d98:	4a59      	ldr	r2, [pc, #356]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002d9a:	89bb      	ldrh	r3, [r7, #12]
 8002d9c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002d9e:	e010      	b.n	8002dc2 <timer_voidGPWM+0xb5a>
			}
			else
			{
				 Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	7b1b      	ldrb	r3, [r3, #12]
 8002da4:	461a      	mov	r2, r3
 8002da6:	89fb      	ldrh	r3, [r7, #14]
 8002da8:	fb03 f302 	mul.w	r3, r3, r2
 8002dac:	4a53      	ldr	r2, [pc, #332]	; (8002efc <timer_voidGPWM+0xc94>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	89fa      	ldrh	r2, [r7, #14]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	81bb      	strh	r3, [r7, #12]
				 TIM3->CCR3 = Compare ;
 8002dbc:	4a50      	ldr	r2, [pc, #320]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002dbe:	89bb      	ldrh	r3, [r7, #12]
 8002dc0:	63d3      	str	r3, [r2, #60]	; 0x3c
			}


			/* Enable Update Event generation and Start count from 0 or new loaded value ==> Mode */
			SET_BIT(TIM3->EGR,0);
 8002dc2:	4b4f      	ldr	r3, [pc, #316]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	4a4e      	ldr	r2, [pc, #312]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	6153      	str	r3, [r2, #20]
			/* Chose polarity of enabling Channel as active High , Enable output Channel  */
			CLR_BIT(TIM3->CCER,9);
 8002dce:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	4a4b      	ldr	r2, [pc, #300]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dd8:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM3->CCER,8);
 8002dda:	4b49      	ldr	r3, [pc, #292]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4a48      	ldr	r2, [pc, #288]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de4:	6213      	str	r3, [r2, #32]
			/*Start Counter*/
			SET_BIT(TIM3->CR1,0);
 8002de6:	4b46      	ldr	r3, [pc, #280]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a45      	ldr	r2, [pc, #276]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e06e      	b.n	8002ed2 <timer_voidGPWM+0xc6a>
		}

	  else if(PWM->chaannel==TIM_CHANNEL4)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	785b      	ldrb	r3, [r3, #1]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d16a      	bne.n	8002ed2 <timer_voidGPWM+0xc6a>
		{
			/*Channel is configuerd as output */
			 CLR_BIT(TIM3->CCMR2,8);
 8002dfc:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	4a3f      	ldr	r2, [pc, #252]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002e02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e06:	61d3      	str	r3, [r2, #28]
			 CLR_BIT(TIM3->CCMR2,9);
 8002e08:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	4a3c      	ldr	r2, [pc, #240]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002e0e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e12:	61d3      	str	r3, [r2, #28]
			/*  PWM Mode Start High or LOW Then Toggle at  compare Event mode1 or mode 2 toggel at overflow or under flow event*/
			TIM3->CCMR2 |= (PWM->PWMmode<<12);
 8002e14:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	78d2      	ldrb	r2, [r2, #3]
 8002e1c:	0312      	lsls	r2, r2, #12
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4a37      	ldr	r2, [pc, #220]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002e22:	430b      	orrs	r3, r1
 8002e24:	61d3      	str	r3, [r2, #28]
			/*Enable preload of CCR1 To get valid behavior when writing on this register */
			SET_BIT(TIM3->CCMR2,11);
 8002e26:	4b36      	ldr	r3, [pc, #216]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	4a35      	ldr	r2, [pc, #212]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002e2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e30:	61d3      	str	r3, [r2, #28]
			/*Enable Auto Reload Register AAR*/
			SET_BIT(TIM3->CR1,7);
 8002e32:	4b33      	ldr	r3, [pc, #204]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a32      	ldr	r2, [pc, #200]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3c:	6013      	str	r3, [r2, #0]
			 * PWM frequency  = 1 / PeriodicTime
			 * Then  ARR = 1 / PWM frequency * TickTime of the counter
			 *
			 * note: the higher the ticktime the lower frequancy you can get .
			 */
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	8892      	ldrh	r2, [r2, #4]
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	4a2e      	ldr	r2, [pc, #184]	; (8002f04 <timer_voidGPWM+0xc9c>)
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	81fb      	strh	r3, [r7, #14]
			TIM3->ARR=autoReload;
 8002e52:	4a2b      	ldr	r2, [pc, #172]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002e54:	89fb      	ldrh	r3, [r7, #14]
 8002e56:	62d3      	str	r3, [r2, #44]	; 0x2c
			 * PWM output DutyCycle = ( (ARR-CRR) / ARR  ) * 100  // Ton/Ttotal or   Ttotal-Toff/Ttotal  *100
			 * Then CCR =  ARR - ( (DutyCycle  *  ARR ) /100)
			 *
			 *
			 */
			if(PWM->PWMmode==MODE1_START_HIGH)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	78db      	ldrb	r3, [r3, #3]
 8002e5c:	2b06      	cmp	r3, #6
 8002e5e:	d10f      	bne.n	8002e80 <timer_voidGPWM+0xc18>
			{
				 Compare = (u32)((PWM->duty) * autoReload)/100 ;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	7b1b      	ldrb	r3, [r3, #12]
 8002e64:	461a      	mov	r2, r3
 8002e66:	89fb      	ldrh	r3, [r7, #14]
 8002e68:	fb03 f302 	mul.w	r3, r3, r2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4b23      	ldr	r3, [pc, #140]	; (8002efc <timer_voidGPWM+0xc94>)
 8002e70:	fba3 2302 	umull	r2, r3, r3, r2
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	81bb      	strh	r3, [r7, #12]
				 TIM3->CCR4 = Compare ;
 8002e78:	4a21      	ldr	r2, [pc, #132]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002e7a:	89bb      	ldrh	r3, [r7, #12]
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7e:	e010      	b.n	8002ea2 <timer_voidGPWM+0xc3a>
			}
			else
			{
				 Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	7b1b      	ldrb	r3, [r3, #12]
 8002e84:	461a      	mov	r2, r3
 8002e86:	89fb      	ldrh	r3, [r7, #14]
 8002e88:	fb03 f302 	mul.w	r3, r3, r2
 8002e8c:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <timer_voidGPWM+0xc94>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	89fa      	ldrh	r2, [r7, #14]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	81bb      	strh	r3, [r7, #12]
				 TIM3->CCR4 = Compare ;
 8002e9c:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002e9e:	89bb      	ldrh	r3, [r7, #12]
 8002ea0:	6413      	str	r3, [r2, #64]	; 0x40
			}


			/* Enable Update Event generation and Start count from 0 or new loaded value ==> Mode */
			SET_BIT(TIM3->EGR,0);
 8002ea2:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	4a16      	ldr	r2, [pc, #88]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6153      	str	r3, [r2, #20]
			/* Chose polarity of enabling Channel as active High , Enable output Channel  */
			CLR_BIT(TIM3->CCER,13);
 8002eae:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002eb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eb8:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM3->CCER,12);
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4a10      	ldr	r2, [pc, #64]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002ec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ec4:	6213      	str	r3, [r2, #32]
			/*Start Counter*/
			SET_BIT(TIM3->CR1,0);
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a0d      	ldr	r2, [pc, #52]	; (8002f00 <timer_voidGPWM+0xc98>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6013      	str	r3, [r2, #0]
		}

	case _TIM4:
		/*Update Request source from UG or Counter overflow/underflow*/
		CLR_BIT(TIM4->CR1 ,2);
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <timer_voidGPWM+0xca0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a0c      	ldr	r2, [pc, #48]	; (8002f08 <timer_voidGPWM+0xca0>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	6013      	str	r3, [r2, #0]
		/* PWM type  Edge align or center align */
		if(PWM->PWMtype == EDGE_ALIGN)	 TIM4->CR1 |= (PWM->PWMtype << 4) ;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	789b      	ldrb	r3, [r3, #2]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d112      	bne.n	8002f0c <timer_voidGPWM+0xca4>
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <timer_voidGPWM+0xca0>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	7892      	ldrb	r2, [r2, #2]
 8002eee:	0112      	lsls	r2, r2, #4
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4a05      	ldr	r2, [pc, #20]	; (8002f08 <timer_voidGPWM+0xca0>)
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	e011      	b.n	8002f1e <timer_voidGPWM+0xcb6>
 8002efa:	bf00      	nop
 8002efc:	51eb851f 	.word	0x51eb851f
 8002f00:	40000400 	.word	0x40000400
 8002f04:	000f4240 	.word	0x000f4240
 8002f08:	40000800 	.word	0x40000800
		else 							 TIM4->CR1 |= (PWM->PWMtype << 5) ;
 8002f0c:	4b97      	ldr	r3, [pc, #604]	; (800316c <timer_voidGPWM+0xf04>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	7892      	ldrb	r2, [r2, #2]
 8002f14:	0152      	lsls	r2, r2, #5
 8002f16:	4611      	mov	r1, r2
 8002f18:	4a94      	ldr	r2, [pc, #592]	; (800316c <timer_voidGPWM+0xf04>)
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	6013      	str	r3, [r2, #0]
		/*Check on Channel wanted to output the PWM*/
		if(PWM->chaannel==TIM_CHANNEL1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	785b      	ldrb	r3, [r3, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d16b      	bne.n	8002ffe <timer_voidGPWM+0xd96>
		{
			/*Channel is configuerd as output */
			CLR_BIT(TIM4->CCMR1,0);
 8002f26:	4b91      	ldr	r3, [pc, #580]	; (800316c <timer_voidGPWM+0xf04>)
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	4a90      	ldr	r2, [pc, #576]	; (800316c <timer_voidGPWM+0xf04>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6193      	str	r3, [r2, #24]
			CLR_BIT(TIM4->CCMR1,1);
 8002f32:	4b8e      	ldr	r3, [pc, #568]	; (800316c <timer_voidGPWM+0xf04>)
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	4a8d      	ldr	r2, [pc, #564]	; (800316c <timer_voidGPWM+0xf04>)
 8002f38:	f023 0302 	bic.w	r3, r3, #2
 8002f3c:	6193      	str	r3, [r2, #24]
			/*  PWM Mode Start High or LOW Then Toggle at  compare Event mode1 or mode 2 toggel at overflow or under flow event*/
			TIM4->CCMR1 |= (PWM->PWMmode<<4);
 8002f3e:	4b8b      	ldr	r3, [pc, #556]	; (800316c <timer_voidGPWM+0xf04>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	78d2      	ldrb	r2, [r2, #3]
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4a88      	ldr	r2, [pc, #544]	; (800316c <timer_voidGPWM+0xf04>)
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6193      	str	r3, [r2, #24]
			/*Enable preload of CCR1 To get valid behavior when writing on this register */
			SET_BIT(TIM4->CCMR1,3);
 8002f50:	4b86      	ldr	r3, [pc, #536]	; (800316c <timer_voidGPWM+0xf04>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	4a85      	ldr	r2, [pc, #532]	; (800316c <timer_voidGPWM+0xf04>)
 8002f56:	f043 0308 	orr.w	r3, r3, #8
 8002f5a:	6193      	str	r3, [r2, #24]
			/*Enable Auto Reload Register AAR*/
			SET_BIT(TIM4->CR1,7);
 8002f5c:	4b83      	ldr	r3, [pc, #524]	; (800316c <timer_voidGPWM+0xf04>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a82      	ldr	r2, [pc, #520]	; (800316c <timer_voidGPWM+0xf04>)
 8002f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f66:	6013      	str	r3, [r2, #0]
			 * PWM frequency  = 1 / PeriodicTime
			 * Then  ARR = 1 / PWM frequency * TickTime of the counter
			 *
			 * note: the higher the ticktime the lower frequancy you can get .
			 */
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	8892      	ldrh	r2, [r2, #4]
 8002f70:	fb02 f303 	mul.w	r3, r2, r3
 8002f74:	4a7e      	ldr	r2, [pc, #504]	; (8003170 <timer_voidGPWM+0xf08>)
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	81fb      	strh	r3, [r7, #14]
			TIM4->ARR=autoReload;
 8002f7c:	4a7b      	ldr	r2, [pc, #492]	; (800316c <timer_voidGPWM+0xf04>)
 8002f7e:	89fb      	ldrh	r3, [r7, #14]
 8002f80:	62d3      	str	r3, [r2, #44]	; 0x2c
			 * PWM output DutyCycle = ( (ARR-CCR) / ARR  ) * 100  // Ton/Ttotal or   Ttotal-Toff/Ttotal  *100
			 * Then CCR =  ARR - ( (DutyCycle  *  ARR ) /100)
			 *
			 *
			 */
			if(PWM->PWMmode==MODE1_START_HIGH)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	78db      	ldrb	r3, [r3, #3]
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d10f      	bne.n	8002faa <timer_voidGPWM+0xd42>
			{
				Compare = (u32)((PWM->duty) * autoReload)/100 ;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	7b1b      	ldrb	r3, [r3, #12]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	89fb      	ldrh	r3, [r7, #14]
 8002f92:	fb03 f302 	mul.w	r3, r3, r2
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b76      	ldr	r3, [pc, #472]	; (8003174 <timer_voidGPWM+0xf0c>)
 8002f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	81bb      	strh	r3, [r7, #12]
				 TIM4->CCR1 = Compare ;
 8002fa2:	4a72      	ldr	r2, [pc, #456]	; (800316c <timer_voidGPWM+0xf04>)
 8002fa4:	89bb      	ldrh	r3, [r7, #12]
 8002fa6:	6353      	str	r3, [r2, #52]	; 0x34
 8002fa8:	e010      	b.n	8002fcc <timer_voidGPWM+0xd64>
			}
			else
			{
				 Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7b1b      	ldrb	r3, [r3, #12]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	89fb      	ldrh	r3, [r7, #14]
 8002fb2:	fb03 f302 	mul.w	r3, r3, r2
 8002fb6:	4a6f      	ldr	r2, [pc, #444]	; (8003174 <timer_voidGPWM+0xf0c>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	89fa      	ldrh	r2, [r7, #14]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	81bb      	strh	r3, [r7, #12]
				 TIM4->CCR1 = Compare ;
 8002fc6:	4a69      	ldr	r2, [pc, #420]	; (800316c <timer_voidGPWM+0xf04>)
 8002fc8:	89bb      	ldrh	r3, [r7, #12]
 8002fca:	6353      	str	r3, [r2, #52]	; 0x34
			}


			/* Enable Update Event generation and Start count from 0 or new loaded value ==> Mode */
			SET_BIT(TIM4->EGR,0);
 8002fcc:	4b67      	ldr	r3, [pc, #412]	; (800316c <timer_voidGPWM+0xf04>)
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	4a66      	ldr	r2, [pc, #408]	; (800316c <timer_voidGPWM+0xf04>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6153      	str	r3, [r2, #20]
			/* Chose polarity of enabling Channel as active High , Enable output Channel  */
			CLR_BIT(TIM4->CCER,1);
 8002fd8:	4b64      	ldr	r3, [pc, #400]	; (800316c <timer_voidGPWM+0xf04>)
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	4a63      	ldr	r2, [pc, #396]	; (800316c <timer_voidGPWM+0xf04>)
 8002fde:	f023 0302 	bic.w	r3, r3, #2
 8002fe2:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM4->CCER,0);
 8002fe4:	4b61      	ldr	r3, [pc, #388]	; (800316c <timer_voidGPWM+0xf04>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4a60      	ldr	r2, [pc, #384]	; (800316c <timer_voidGPWM+0xf04>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6213      	str	r3, [r2, #32]
			/*Start Counter*/
			SET_BIT(TIM4->CR1,0);
 8002ff0:	4b5e      	ldr	r3, [pc, #376]	; (800316c <timer_voidGPWM+0xf04>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a5d      	ldr	r2, [pc, #372]	; (800316c <timer_voidGPWM+0xf04>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6013      	str	r3, [r2, #0]
			SET_BIT(TIM4->CCER,12);
			/*Start Counter*/
			SET_BIT(TIM4->CR1,0);
		}

		break;
 8002ffc:	e15a      	b.n	80032b4 <timer_voidGPWM+0x104c>
	  else if(PWM->chaannel==TIM_CHANNEL2)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d16b      	bne.n	80030de <timer_voidGPWM+0xe76>
			 CLR_BIT(TIM4->CCMR1,8);
 8003006:	4b59      	ldr	r3, [pc, #356]	; (800316c <timer_voidGPWM+0xf04>)
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	4a58      	ldr	r2, [pc, #352]	; (800316c <timer_voidGPWM+0xf04>)
 800300c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003010:	6193      	str	r3, [r2, #24]
			 CLR_BIT(TIM4->CCMR1,9);
 8003012:	4b56      	ldr	r3, [pc, #344]	; (800316c <timer_voidGPWM+0xf04>)
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	4a55      	ldr	r2, [pc, #340]	; (800316c <timer_voidGPWM+0xf04>)
 8003018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800301c:	6193      	str	r3, [r2, #24]
			TIM4->CCMR1 |= (PWM->PWMmode<<12);
 800301e:	4b53      	ldr	r3, [pc, #332]	; (800316c <timer_voidGPWM+0xf04>)
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	78d2      	ldrb	r2, [r2, #3]
 8003026:	0312      	lsls	r2, r2, #12
 8003028:	4611      	mov	r1, r2
 800302a:	4a50      	ldr	r2, [pc, #320]	; (800316c <timer_voidGPWM+0xf04>)
 800302c:	430b      	orrs	r3, r1
 800302e:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM4->CCMR1,11);
 8003030:	4b4e      	ldr	r3, [pc, #312]	; (800316c <timer_voidGPWM+0xf04>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	4a4d      	ldr	r2, [pc, #308]	; (800316c <timer_voidGPWM+0xf04>)
 8003036:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800303a:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM4->CR1,7);
 800303c:	4b4b      	ldr	r3, [pc, #300]	; (800316c <timer_voidGPWM+0xf04>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a4a      	ldr	r2, [pc, #296]	; (800316c <timer_voidGPWM+0xf04>)
 8003042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003046:	6013      	str	r3, [r2, #0]
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	8892      	ldrh	r2, [r2, #4]
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	4a46      	ldr	r2, [pc, #280]	; (8003170 <timer_voidGPWM+0xf08>)
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	81fb      	strh	r3, [r7, #14]
			TIM4->ARR=autoReload;
 800305c:	4a43      	ldr	r2, [pc, #268]	; (800316c <timer_voidGPWM+0xf04>)
 800305e:	89fb      	ldrh	r3, [r7, #14]
 8003060:	62d3      	str	r3, [r2, #44]	; 0x2c
			if(PWM->PWMmode==MODE1_START_HIGH)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	78db      	ldrb	r3, [r3, #3]
 8003066:	2b06      	cmp	r3, #6
 8003068:	d10f      	bne.n	800308a <timer_voidGPWM+0xe22>
				 Compare = (u32)((PWM->duty) * autoReload)/100 ;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7b1b      	ldrb	r3, [r3, #12]
 800306e:	461a      	mov	r2, r3
 8003070:	89fb      	ldrh	r3, [r7, #14]
 8003072:	fb03 f302 	mul.w	r3, r3, r2
 8003076:	461a      	mov	r2, r3
 8003078:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <timer_voidGPWM+0xf0c>)
 800307a:	fba3 2302 	umull	r2, r3, r3, r2
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	81bb      	strh	r3, [r7, #12]
				 TIM4->CCR2 = Compare ;
 8003082:	4a3a      	ldr	r2, [pc, #232]	; (800316c <timer_voidGPWM+0xf04>)
 8003084:	89bb      	ldrh	r3, [r7, #12]
 8003086:	6393      	str	r3, [r2, #56]	; 0x38
 8003088:	e010      	b.n	80030ac <timer_voidGPWM+0xe44>
				 Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	7b1b      	ldrb	r3, [r3, #12]
 800308e:	461a      	mov	r2, r3
 8003090:	89fb      	ldrh	r3, [r7, #14]
 8003092:	fb03 f302 	mul.w	r3, r3, r2
 8003096:	4a37      	ldr	r2, [pc, #220]	; (8003174 <timer_voidGPWM+0xf0c>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	b29b      	uxth	r3, r3
 80030a0:	89fa      	ldrh	r2, [r7, #14]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	81bb      	strh	r3, [r7, #12]
				 TIM4->CCR2 = Compare ;
 80030a6:	4a31      	ldr	r2, [pc, #196]	; (800316c <timer_voidGPWM+0xf04>)
 80030a8:	89bb      	ldrh	r3, [r7, #12]
 80030aa:	6393      	str	r3, [r2, #56]	; 0x38
			SET_BIT(TIM4->EGR,0);
 80030ac:	4b2f      	ldr	r3, [pc, #188]	; (800316c <timer_voidGPWM+0xf04>)
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	4a2e      	ldr	r2, [pc, #184]	; (800316c <timer_voidGPWM+0xf04>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM4->CCER,5);
 80030b8:	4b2c      	ldr	r3, [pc, #176]	; (800316c <timer_voidGPWM+0xf04>)
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	4a2b      	ldr	r2, [pc, #172]	; (800316c <timer_voidGPWM+0xf04>)
 80030be:	f023 0320 	bic.w	r3, r3, #32
 80030c2:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM4->CCER,4);
 80030c4:	4b29      	ldr	r3, [pc, #164]	; (800316c <timer_voidGPWM+0xf04>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	4a28      	ldr	r2, [pc, #160]	; (800316c <timer_voidGPWM+0xf04>)
 80030ca:	f043 0310 	orr.w	r3, r3, #16
 80030ce:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM4->CR1,0);
 80030d0:	4b26      	ldr	r3, [pc, #152]	; (800316c <timer_voidGPWM+0xf04>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a25      	ldr	r2, [pc, #148]	; (800316c <timer_voidGPWM+0xf04>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6013      	str	r3, [r2, #0]
		break;
 80030dc:	e0ea      	b.n	80032b4 <timer_voidGPWM+0x104c>
	  else if(PWM->chaannel==TIM_CHANNEL3)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	785b      	ldrb	r3, [r3, #1]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d172      	bne.n	80031cc <timer_voidGPWM+0xf64>
			CLR_BIT(TIM4->CCMR2,0);
 80030e6:	4b21      	ldr	r3, [pc, #132]	; (800316c <timer_voidGPWM+0xf04>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	4a20      	ldr	r2, [pc, #128]	; (800316c <timer_voidGPWM+0xf04>)
 80030ec:	f023 0301 	bic.w	r3, r3, #1
 80030f0:	61d3      	str	r3, [r2, #28]
			CLR_BIT(TIM4->CCMR2,1);
 80030f2:	4b1e      	ldr	r3, [pc, #120]	; (800316c <timer_voidGPWM+0xf04>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	4a1d      	ldr	r2, [pc, #116]	; (800316c <timer_voidGPWM+0xf04>)
 80030f8:	f023 0302 	bic.w	r3, r3, #2
 80030fc:	61d3      	str	r3, [r2, #28]
			TIM4->CCMR2 |= (PWM->PWMmode<<4);
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <timer_voidGPWM+0xf04>)
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	78d2      	ldrb	r2, [r2, #3]
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	4611      	mov	r1, r2
 800310a:	4a18      	ldr	r2, [pc, #96]	; (800316c <timer_voidGPWM+0xf04>)
 800310c:	430b      	orrs	r3, r1
 800310e:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM4->CCMR2,3);
 8003110:	4b16      	ldr	r3, [pc, #88]	; (800316c <timer_voidGPWM+0xf04>)
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	4a15      	ldr	r2, [pc, #84]	; (800316c <timer_voidGPWM+0xf04>)
 8003116:	f043 0308 	orr.w	r3, r3, #8
 800311a:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM4->CR1,7);
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <timer_voidGPWM+0xf04>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a12      	ldr	r2, [pc, #72]	; (800316c <timer_voidGPWM+0xf04>)
 8003122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003126:	6013      	str	r3, [r2, #0]
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	8892      	ldrh	r2, [r2, #4]
 8003130:	fb02 f303 	mul.w	r3, r2, r3
 8003134:	4a0e      	ldr	r2, [pc, #56]	; (8003170 <timer_voidGPWM+0xf08>)
 8003136:	fbb2 f3f3 	udiv	r3, r2, r3
 800313a:	81fb      	strh	r3, [r7, #14]
			TIM4->ARR=autoReload;
 800313c:	4a0b      	ldr	r2, [pc, #44]	; (800316c <timer_voidGPWM+0xf04>)
 800313e:	89fb      	ldrh	r3, [r7, #14]
 8003140:	62d3      	str	r3, [r2, #44]	; 0x2c
			if(PWM->PWMmode==MODE1_START_HIGH)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	78db      	ldrb	r3, [r3, #3]
 8003146:	2b06      	cmp	r3, #6
 8003148:	d116      	bne.n	8003178 <timer_voidGPWM+0xf10>
				 Compare = (u32)((PWM->duty) * autoReload)/100 ;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	7b1b      	ldrb	r3, [r3, #12]
 800314e:	461a      	mov	r2, r3
 8003150:	89fb      	ldrh	r3, [r7, #14]
 8003152:	fb03 f302 	mul.w	r3, r3, r2
 8003156:	461a      	mov	r2, r3
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <timer_voidGPWM+0xf0c>)
 800315a:	fba3 2302 	umull	r2, r3, r3, r2
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	81bb      	strh	r3, [r7, #12]
				 TIM4->CCR3 = Compare ;
 8003162:	4a02      	ldr	r2, [pc, #8]	; (800316c <timer_voidGPWM+0xf04>)
 8003164:	89bb      	ldrh	r3, [r7, #12]
 8003166:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003168:	e017      	b.n	800319a <timer_voidGPWM+0xf32>
 800316a:	bf00      	nop
 800316c:	40000800 	.word	0x40000800
 8003170:	000f4240 	.word	0x000f4240
 8003174:	51eb851f 	.word	0x51eb851f
				 Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7b1b      	ldrb	r3, [r3, #12]
 800317c:	461a      	mov	r2, r3
 800317e:	89fb      	ldrh	r3, [r7, #14]
 8003180:	fb03 f302 	mul.w	r3, r3, r2
 8003184:	4a4e      	ldr	r2, [pc, #312]	; (80032c0 <timer_voidGPWM+0x1058>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	b29b      	uxth	r3, r3
 800318e:	89fa      	ldrh	r2, [r7, #14]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	81bb      	strh	r3, [r7, #12]
				 TIM4->CCR3 = Compare ;
 8003194:	4a4b      	ldr	r2, [pc, #300]	; (80032c4 <timer_voidGPWM+0x105c>)
 8003196:	89bb      	ldrh	r3, [r7, #12]
 8003198:	63d3      	str	r3, [r2, #60]	; 0x3c
			SET_BIT(TIM4->EGR,0);
 800319a:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <timer_voidGPWM+0x105c>)
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4a49      	ldr	r2, [pc, #292]	; (80032c4 <timer_voidGPWM+0x105c>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM4->CCER,9);
 80031a6:	4b47      	ldr	r3, [pc, #284]	; (80032c4 <timer_voidGPWM+0x105c>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4a46      	ldr	r2, [pc, #280]	; (80032c4 <timer_voidGPWM+0x105c>)
 80031ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031b0:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM4->CCER,8);
 80031b2:	4b44      	ldr	r3, [pc, #272]	; (80032c4 <timer_voidGPWM+0x105c>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	4a43      	ldr	r2, [pc, #268]	; (80032c4 <timer_voidGPWM+0x105c>)
 80031b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031bc:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM4->CR1,0);
 80031be:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <timer_voidGPWM+0x105c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a40      	ldr	r2, [pc, #256]	; (80032c4 <timer_voidGPWM+0x105c>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	6013      	str	r3, [r2, #0]
		break;
 80031ca:	e073      	b.n	80032b4 <timer_voidGPWM+0x104c>
	  else if(PWM->chaannel==TIM_CHANNEL4)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d16f      	bne.n	80032b4 <timer_voidGPWM+0x104c>
			 CLR_BIT(TIM4->CCMR2,8);
 80031d4:	4b3b      	ldr	r3, [pc, #236]	; (80032c4 <timer_voidGPWM+0x105c>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	4a3a      	ldr	r2, [pc, #232]	; (80032c4 <timer_voidGPWM+0x105c>)
 80031da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031de:	61d3      	str	r3, [r2, #28]
			 CLR_BIT(TIM4->CCMR2,9);
 80031e0:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <timer_voidGPWM+0x105c>)
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	4a37      	ldr	r2, [pc, #220]	; (80032c4 <timer_voidGPWM+0x105c>)
 80031e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031ea:	61d3      	str	r3, [r2, #28]
			TIM4->CCMR2 |= (PWM->PWMmode<<12);
 80031ec:	4b35      	ldr	r3, [pc, #212]	; (80032c4 <timer_voidGPWM+0x105c>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	78d2      	ldrb	r2, [r2, #3]
 80031f4:	0312      	lsls	r2, r2, #12
 80031f6:	4611      	mov	r1, r2
 80031f8:	4a32      	ldr	r2, [pc, #200]	; (80032c4 <timer_voidGPWM+0x105c>)
 80031fa:	430b      	orrs	r3, r1
 80031fc:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM4->CCMR2,11);
 80031fe:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <timer_voidGPWM+0x105c>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	4a30      	ldr	r2, [pc, #192]	; (80032c4 <timer_voidGPWM+0x105c>)
 8003204:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003208:	61d3      	str	r3, [r2, #28]
			SET_BIT(TIM4->CR1,7);
 800320a:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <timer_voidGPWM+0x105c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2d      	ldr	r2, [pc, #180]	; (80032c4 <timer_voidGPWM+0x105c>)
 8003210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003214:	6013      	str	r3, [r2, #0]
			autoReload=  1000000/((PWM->Freq)*(PWM->TickTime));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	8892      	ldrh	r2, [r2, #4]
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	4a29      	ldr	r2, [pc, #164]	; (80032c8 <timer_voidGPWM+0x1060>)
 8003224:	fbb2 f3f3 	udiv	r3, r2, r3
 8003228:	81fb      	strh	r3, [r7, #14]
			TIM4->ARR=autoReload;
 800322a:	4a26      	ldr	r2, [pc, #152]	; (80032c4 <timer_voidGPWM+0x105c>)
 800322c:	89fb      	ldrh	r3, [r7, #14]
 800322e:	62d3      	str	r3, [r2, #44]	; 0x2c
			if(PWM->PWMmode==MODE1_START_HIGH)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	78db      	ldrb	r3, [r3, #3]
 8003234:	2b06      	cmp	r3, #6
 8003236:	d10f      	bne.n	8003258 <timer_voidGPWM+0xff0>
				Compare = (u32)((PWM->duty) * autoReload)/100 ;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7b1b      	ldrb	r3, [r3, #12]
 800323c:	461a      	mov	r2, r3
 800323e:	89fb      	ldrh	r3, [r7, #14]
 8003240:	fb03 f302 	mul.w	r3, r3, r2
 8003244:	461a      	mov	r2, r3
 8003246:	4b1e      	ldr	r3, [pc, #120]	; (80032c0 <timer_voidGPWM+0x1058>)
 8003248:	fba3 2302 	umull	r2, r3, r3, r2
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	81bb      	strh	r3, [r7, #12]
				 TIM4->CCR4 = Compare ;
 8003250:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <timer_voidGPWM+0x105c>)
 8003252:	89bb      	ldrh	r3, [r7, #12]
 8003254:	6413      	str	r3, [r2, #64]	; 0x40
 8003256:	e010      	b.n	800327a <timer_voidGPWM+0x1012>
				 Compare = autoReload-(((u32)(PWM->duty) * autoReload)/100) ;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	7b1b      	ldrb	r3, [r3, #12]
 800325c:	461a      	mov	r2, r3
 800325e:	89fb      	ldrh	r3, [r7, #14]
 8003260:	fb03 f302 	mul.w	r3, r3, r2
 8003264:	4a16      	ldr	r2, [pc, #88]	; (80032c0 <timer_voidGPWM+0x1058>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	b29b      	uxth	r3, r3
 800326e:	89fa      	ldrh	r2, [r7, #14]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	81bb      	strh	r3, [r7, #12]
				 TIM4->CCR4 = Compare ;
 8003274:	4a13      	ldr	r2, [pc, #76]	; (80032c4 <timer_voidGPWM+0x105c>)
 8003276:	89bb      	ldrh	r3, [r7, #12]
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
			SET_BIT(TIM4->EGR,0);
 800327a:	4b12      	ldr	r3, [pc, #72]	; (80032c4 <timer_voidGPWM+0x105c>)
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	4a11      	ldr	r2, [pc, #68]	; (80032c4 <timer_voidGPWM+0x105c>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6153      	str	r3, [r2, #20]
			CLR_BIT(TIM4->CCER,13);
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <timer_voidGPWM+0x105c>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <timer_voidGPWM+0x105c>)
 800328c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003290:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM4->CCER,12);
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <timer_voidGPWM+0x105c>)
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <timer_voidGPWM+0x105c>)
 8003298:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800329c:	6213      	str	r3, [r2, #32]
			SET_BIT(TIM4->CR1,0);
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <timer_voidGPWM+0x105c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <timer_voidGPWM+0x105c>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	6013      	str	r3, [r2, #0]
		break;
 80032aa:	e003      	b.n	80032b4 <timer_voidGPWM+0x104c>
		break;
 80032ac:	bf00      	nop
 80032ae:	e002      	b.n	80032b6 <timer_voidGPWM+0x104e>
		break;
 80032b0:	bf00      	nop
 80032b2:	e000      	b.n	80032b6 <timer_voidGPWM+0x104e>
		break;
 80032b4:	bf00      	nop
	default:;
	}

}
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	51eb851f 	.word	0x51eb851f
 80032c4:	40000800 	.word	0x40000800
 80032c8:	000f4240 	.word	0x000f4240

080032cc <TIM1_BRK_IRQHandler>:
		default:;
		}
}
/**************************************IRQ****************************************/
void TIM1_BRK_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
	/*   Clear PIF to ReEnter IRQ   */
	TIM_pfCallBack[_TIM1]();
 80032d0:	4b02      	ldr	r3, [pc, #8]	; (80032dc <TIM1_BRK_IRQHandler+0x10>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4798      	blx	r3
}
 80032d6:	bf00      	nop
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000064 	.word	0x20000064

080032e0 <TIM1_UP_IRQHandler>:

void TIM1_UP_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
	 CLR_BIT(TIM1->SR,0);
 80032e4:	4b05      	ldr	r3, [pc, #20]	; (80032fc <TIM1_UP_IRQHandler+0x1c>)
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	4a04      	ldr	r2, [pc, #16]	; (80032fc <TIM1_UP_IRQHandler+0x1c>)
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	6113      	str	r3, [r2, #16]
	TIM_pfCallBack[_TIM1]();
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <TIM1_UP_IRQHandler+0x20>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4798      	blx	r3
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40012c00 	.word	0x40012c00
 8003300:	20000064 	.word	0x20000064

08003304 <TIM1_TRG_COM_IRQHandler>:
 void TIM1_TRG_COM_IRQHandler(void)
 {
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
	 CLR_BIT(TIM1->SR,6);
 8003308:	4b05      	ldr	r3, [pc, #20]	; (8003320 <TIM1_TRG_COM_IRQHandler+0x1c>)
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	4a04      	ldr	r2, [pc, #16]	; (8003320 <TIM1_TRG_COM_IRQHandler+0x1c>)
 800330e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003312:	6113      	str	r3, [r2, #16]
	 TIM_pfCallBack[_TIM1]();
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <TIM1_TRG_COM_IRQHandler+0x20>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4798      	blx	r3
 }
 800331a:	bf00      	nop
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40012c00 	.word	0x40012c00
 8003324:	20000064 	.word	0x20000064

08003328 <TIM1_CC_IRQHandler>:

 void TIM1_CC_IRQHandler(void)
 {
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
	 if(GET_BIT(TIM1->SR,1))
 800332c:	4b36      	ldr	r3, [pc, #216]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <TIM1_CC_IRQHandler+0x1e>
		 {
			 /* CC1IF */
			 CLR_BIT(TIM1->SR,1);
 800333a:	4b33      	ldr	r3, [pc, #204]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	4a32      	ldr	r2, [pc, #200]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 8003340:	f023 0302 	bic.w	r3, r3, #2
 8003344:	6113      	str	r3, [r2, #16]
		 }
		 if(GET_BIT(TIM1->SR,2))
 8003346:	4b30      	ldr	r3, [pc, #192]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <TIM1_CC_IRQHandler+0x38>
		 {
			 /* CC2IF */
			 CLR_BIT(TIM1->SR,2);
 8003354:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	4a2b      	ldr	r2, [pc, #172]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 800335a:	f023 0304 	bic.w	r3, r3, #4
 800335e:	6113      	str	r3, [r2, #16]

		 }
		 if(GET_BIT(TIM1->SR,3))
 8003360:	4b29      	ldr	r3, [pc, #164]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	08db      	lsrs	r3, r3, #3
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <TIM1_CC_IRQHandler+0x52>
		 {
			 /* CC3IF */
			 CLR_BIT(TIM1->SR,3);
 800336e:	4b26      	ldr	r3, [pc, #152]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	4a25      	ldr	r2, [pc, #148]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 8003374:	f023 0308 	bic.w	r3, r3, #8
 8003378:	6113      	str	r3, [r2, #16]

		 }
		 if(GET_BIT(TIM1->SR,4))
 800337a:	4b23      	ldr	r3, [pc, #140]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <TIM1_CC_IRQHandler+0x6c>
		 {
			 /* CC4IF */
			 CLR_BIT(TIM1->SR,4);
 8003388:	4b1f      	ldr	r3, [pc, #124]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 800338e:	f023 0310 	bic.w	r3, r3, #16
 8003392:	6113      	str	r3, [r2, #16]

		 }
		  if(GET_BIT(TIM1->SR,9))
 8003394:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	0a5b      	lsrs	r3, r3, #9
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <TIM1_CC_IRQHandler+0x86>
			  {
			 	 /*DMA*/
			 	 CLR_BIT(TIM1->SR,9);
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	4a18      	ldr	r2, [pc, #96]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 80033a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033ac:	6113      	str	r3, [r2, #16]

			  }
			  if(GET_BIT(TIM1->SR,10))
 80033ae:	4b16      	ldr	r3, [pc, #88]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	0a9b      	lsrs	r3, r3, #10
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <TIM1_CC_IRQHandler+0xa0>
			  {
			 	 CLR_BIT(TIM1->SR,10);
 80033bc:	4b12      	ldr	r3, [pc, #72]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	4a11      	ldr	r2, [pc, #68]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 80033c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033c6:	6113      	str	r3, [r2, #16]
			  }
			  if(GET_BIT(TIM1->SR,11))
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	0adb      	lsrs	r3, r3, #11
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <TIM1_CC_IRQHandler+0xba>
			  {
			 	 CLR_BIT(TIM1->SR,11);
 80033d6:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 80033dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033e0:	6113      	str	r3, [r2, #16]
			  }
			  if(GET_BIT(TIM1->SR,12))
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	0b1b      	lsrs	r3, r3, #12
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <TIM1_CC_IRQHandler+0xd4>
			  {
			 	 CLR_BIT(TIM1->SR,12);
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	4a04      	ldr	r2, [pc, #16]	; (8003408 <TIM1_CC_IRQHandler+0xe0>)
 80033f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033fa:	6113      	str	r3, [r2, #16]
			  }
	 TIM_pfCallBack[_TIM1]();
 80033fc:	4b03      	ldr	r3, [pc, #12]	; (800340c <TIM1_CC_IRQHandler+0xe4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4798      	blx	r3
 }
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40012c00 	.word	0x40012c00
 800340c:	20000064 	.word	0x20000064

08003410 <TIM2_IRQHandler>:

 void TIM2_IRQHandler(void)
 {
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	 if(GET_BIT(TIM2->SR,0))
 8003414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <TIM2_IRQHandler+0x22>
	 		 {
	 	 /* Update interrupt flag */
	 	 CLR_BIT(TIM2->SR,0);
 8003422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6113      	str	r3, [r2, #16]
	  }
	  if(GET_BIT(TIM2->SR,1))
 8003432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <TIM2_IRQHandler+0x42>
	  {
	 	 /* CC1IF */
	 	 CLR_BIT(TIM2->SR,1);
 8003442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800344c:	f023 0302 	bic.w	r3, r3, #2
 8003450:	6113      	str	r3, [r2, #16]
	  }
	  if(GET_BIT(TIM2->SR,2))
 8003452:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <TIM2_IRQHandler+0x62>
	  {
	 	 /* CC2IF */
	 	 CLR_BIT(TIM2->SR,2);
 8003462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800346c:	f023 0304 	bic.w	r3, r3, #4
 8003470:	6113      	str	r3, [r2, #16]

	  }
	  if(GET_BIT(TIM2->SR,3))
 8003472:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	08db      	lsrs	r3, r3, #3
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <TIM2_IRQHandler+0x82>
	  {
	 	 /* CC3IF */
	 	 CLR_BIT(TIM2->SR,3);
 8003482:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800348c:	f023 0308 	bic.w	r3, r3, #8
 8003490:	6113      	str	r3, [r2, #16]

	  }
	  if(GET_BIT(TIM2->SR,4))
 8003492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d007      	beq.n	80034b2 <TIM2_IRQHandler+0xa2>
	  {
	 	 /* CC4IF */
	 	 CLR_BIT(TIM2->SR,4);
 80034a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034ac:	f023 0310 	bic.w	r3, r3, #16
 80034b0:	6113      	str	r3, [r2, #16]

	  }
	  if(GET_BIT(TIM2->SR,6))
 80034b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	099b      	lsrs	r3, r3, #6
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <TIM2_IRQHandler+0xc2>
	  {
	 	 /* TIF */
	 	 CLR_BIT(TIM2->SR,6);
 80034c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d0:	6113      	str	r3, [r2, #16]
	  }
	  if(GET_BIT(TIM2->SR,9))
 80034d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <TIM2_IRQHandler+0xe2>
	  {
	 	 /*DMA*/
	 	 CLR_BIT(TIM2->SR,9);
 80034e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034f0:	6113      	str	r3, [r2, #16]

	  }
	  if(GET_BIT(TIM2->SR,10))
 80034f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	0a9b      	lsrs	r3, r3, #10
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <TIM2_IRQHandler+0x102>
	  {
	 	 CLR_BIT(TIM2->SR,10);
 8003502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800350c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003510:	6113      	str	r3, [r2, #16]
	  }
	  if(GET_BIT(TIM2->SR,11))
 8003512:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	0adb      	lsrs	r3, r3, #11
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <TIM2_IRQHandler+0x122>
	  {
	 	 CLR_BIT(TIM2->SR,11);
 8003522:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800352c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003530:	6113      	str	r3, [r2, #16]
	  }
	  if(GET_BIT(TIM2->SR,12))
 8003532:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	0b1b      	lsrs	r3, r3, #12
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <TIM2_IRQHandler+0x142>
	  {
	 	 CLR_BIT(TIM2->SR,12);
 8003542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800354c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003550:	6113      	str	r3, [r2, #16]
	  }
	 TIM_pfCallBack[_TIM2]();
 8003552:	4b02      	ldr	r3, [pc, #8]	; (800355c <TIM2_IRQHandler+0x14c>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4798      	blx	r3
 }
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000064 	.word	0x20000064

08003560 <TIM3_IRQHandler>:


 void TIM3_IRQHandler(void)
 {
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
	if(GET_BIT(TIM3->SR,0))
 8003564:	4b42      	ldr	r3, [pc, #264]	; (8003670 <TIM3_IRQHandler+0x110>)
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <TIM3_IRQHandler+0x1c>
		 {
			 /* Update interrupt flag */
			 CLR_BIT(TIM3->SR,0);
 8003570:	4b3f      	ldr	r3, [pc, #252]	; (8003670 <TIM3_IRQHandler+0x110>)
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	4a3e      	ldr	r2, [pc, #248]	; (8003670 <TIM3_IRQHandler+0x110>)
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	6113      	str	r3, [r2, #16]
		 }
		 if(GET_BIT(TIM3->SR,1))
 800357c:	4b3c      	ldr	r3, [pc, #240]	; (8003670 <TIM3_IRQHandler+0x110>)
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <TIM3_IRQHandler+0x36>
		 {
			 /* CC1IF */
			 CLR_BIT(TIM3->SR,1);
 800358a:	4b39      	ldr	r3, [pc, #228]	; (8003670 <TIM3_IRQHandler+0x110>)
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	4a38      	ldr	r2, [pc, #224]	; (8003670 <TIM3_IRQHandler+0x110>)
 8003590:	f023 0302 	bic.w	r3, r3, #2
 8003594:	6113      	str	r3, [r2, #16]
		 }
		 if(GET_BIT(TIM3->SR,2))
 8003596:	4b36      	ldr	r3, [pc, #216]	; (8003670 <TIM3_IRQHandler+0x110>)
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <TIM3_IRQHandler+0x50>
		 {
			 /* CC2IF */
			 CLR_BIT(TIM3->SR,2);
 80035a4:	4b32      	ldr	r3, [pc, #200]	; (8003670 <TIM3_IRQHandler+0x110>)
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	4a31      	ldr	r2, [pc, #196]	; (8003670 <TIM3_IRQHandler+0x110>)
 80035aa:	f023 0304 	bic.w	r3, r3, #4
 80035ae:	6113      	str	r3, [r2, #16]

		 }
		 if(GET_BIT(TIM3->SR,3))
 80035b0:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <TIM3_IRQHandler+0x110>)
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	08db      	lsrs	r3, r3, #3
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <TIM3_IRQHandler+0x6a>
		 {
			 /* CC3IF */
			 CLR_BIT(TIM3->SR,3);
 80035be:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <TIM3_IRQHandler+0x110>)
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	4a2b      	ldr	r2, [pc, #172]	; (8003670 <TIM3_IRQHandler+0x110>)
 80035c4:	f023 0308 	bic.w	r3, r3, #8
 80035c8:	6113      	str	r3, [r2, #16]

		 }
		 if(GET_BIT(TIM3->SR,4))
 80035ca:	4b29      	ldr	r3, [pc, #164]	; (8003670 <TIM3_IRQHandler+0x110>)
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	091b      	lsrs	r3, r3, #4
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <TIM3_IRQHandler+0x84>
		 {
			 /* CC4IF */
			 CLR_BIT(TIM3->SR,4);
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <TIM3_IRQHandler+0x110>)
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	4a24      	ldr	r2, [pc, #144]	; (8003670 <TIM3_IRQHandler+0x110>)
 80035de:	f023 0310 	bic.w	r3, r3, #16
 80035e2:	6113      	str	r3, [r2, #16]

		 }
		 if(GET_BIT(TIM3->SR,6))
 80035e4:	4b22      	ldr	r3, [pc, #136]	; (8003670 <TIM3_IRQHandler+0x110>)
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	099b      	lsrs	r3, r3, #6
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <TIM3_IRQHandler+0x9e>
		 {
			 /* TIF */
			 CLR_BIT(TIM3->SR,6);
 80035f2:	4b1f      	ldr	r3, [pc, #124]	; (8003670 <TIM3_IRQHandler+0x110>)
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	4a1e      	ldr	r2, [pc, #120]	; (8003670 <TIM3_IRQHandler+0x110>)
 80035f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035fc:	6113      	str	r3, [r2, #16]
		 }
		 if(GET_BIT(TIM3->SR,9))
 80035fe:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <TIM3_IRQHandler+0x110>)
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	0a5b      	lsrs	r3, r3, #9
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <TIM3_IRQHandler+0xb8>
		 {
			 /*DMA*/
			 CLR_BIT(TIM3->SR,9);
 800360c:	4b18      	ldr	r3, [pc, #96]	; (8003670 <TIM3_IRQHandler+0x110>)
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	4a17      	ldr	r2, [pc, #92]	; (8003670 <TIM3_IRQHandler+0x110>)
 8003612:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003616:	6113      	str	r3, [r2, #16]

		 }
		 if(GET_BIT(TIM3->SR,10))
 8003618:	4b15      	ldr	r3, [pc, #84]	; (8003670 <TIM3_IRQHandler+0x110>)
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	0a9b      	lsrs	r3, r3, #10
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <TIM3_IRQHandler+0xd2>
		 {
			 CLR_BIT(TIM3->SR,10);
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <TIM3_IRQHandler+0x110>)
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	4a11      	ldr	r2, [pc, #68]	; (8003670 <TIM3_IRQHandler+0x110>)
 800362c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003630:	6113      	str	r3, [r2, #16]
		 }
		 if(GET_BIT(TIM3->SR,11))
 8003632:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <TIM3_IRQHandler+0x110>)
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	0adb      	lsrs	r3, r3, #11
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <TIM3_IRQHandler+0xec>
		 {
			 CLR_BIT(TIM3->SR,11);
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <TIM3_IRQHandler+0x110>)
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <TIM3_IRQHandler+0x110>)
 8003646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800364a:	6113      	str	r3, [r2, #16]
		 }
		 if(GET_BIT(TIM3->SR,12))
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <TIM3_IRQHandler+0x110>)
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	0b1b      	lsrs	r3, r3, #12
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <TIM3_IRQHandler+0x106>
		 {
			 CLR_BIT(TIM3->SR,12);
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <TIM3_IRQHandler+0x110>)
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	4a04      	ldr	r2, [pc, #16]	; (8003670 <TIM3_IRQHandler+0x110>)
 8003660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003664:	6113      	str	r3, [r2, #16]
		 }
	 TIM_pfCallBack[_TIM3]();
 8003666:	4b03      	ldr	r3, [pc, #12]	; (8003674 <TIM3_IRQHandler+0x114>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	4798      	blx	r3
 }
 800366c:	bf00      	nop
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40000400 	.word	0x40000400
 8003674:	20000064 	.word	0x20000064

08003678 <TIM4_IRQHandler>:

 void TIM4_IRQHandler(void)
 {
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
	 if(GET_BIT(TIM4->SR,0))
 800367c:	4b42      	ldr	r3, [pc, #264]	; (8003788 <TIM4_IRQHandler+0x110>)
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <TIM4_IRQHandler+0x1c>
	 {
		 /* Update interrupt flag */
		 CLR_BIT(TIM4->SR,0);
 8003688:	4b3f      	ldr	r3, [pc, #252]	; (8003788 <TIM4_IRQHandler+0x110>)
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	4a3e      	ldr	r2, [pc, #248]	; (8003788 <TIM4_IRQHandler+0x110>)
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	6113      	str	r3, [r2, #16]
	 }
	 if(GET_BIT(TIM4->SR,1))
 8003694:	4b3c      	ldr	r3, [pc, #240]	; (8003788 <TIM4_IRQHandler+0x110>)
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <TIM4_IRQHandler+0x36>
	 {
		 /* CC1IF */
		 CLR_BIT(TIM4->SR,1);
 80036a2:	4b39      	ldr	r3, [pc, #228]	; (8003788 <TIM4_IRQHandler+0x110>)
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	4a38      	ldr	r2, [pc, #224]	; (8003788 <TIM4_IRQHandler+0x110>)
 80036a8:	f023 0302 	bic.w	r3, r3, #2
 80036ac:	6113      	str	r3, [r2, #16]
	 }
	 if(GET_BIT(TIM4->SR,2))
 80036ae:	4b36      	ldr	r3, [pc, #216]	; (8003788 <TIM4_IRQHandler+0x110>)
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <TIM4_IRQHandler+0x50>
	 {
		 /* CC2IF */
		 CLR_BIT(TIM4->SR,2);
 80036bc:	4b32      	ldr	r3, [pc, #200]	; (8003788 <TIM4_IRQHandler+0x110>)
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	4a31      	ldr	r2, [pc, #196]	; (8003788 <TIM4_IRQHandler+0x110>)
 80036c2:	f023 0304 	bic.w	r3, r3, #4
 80036c6:	6113      	str	r3, [r2, #16]

	 }
	 if(GET_BIT(TIM4->SR,3))
 80036c8:	4b2f      	ldr	r3, [pc, #188]	; (8003788 <TIM4_IRQHandler+0x110>)
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	08db      	lsrs	r3, r3, #3
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <TIM4_IRQHandler+0x6a>
	 {
		 /* CC3IF */
		 CLR_BIT(TIM4->SR,3);
 80036d6:	4b2c      	ldr	r3, [pc, #176]	; (8003788 <TIM4_IRQHandler+0x110>)
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	4a2b      	ldr	r2, [pc, #172]	; (8003788 <TIM4_IRQHandler+0x110>)
 80036dc:	f023 0308 	bic.w	r3, r3, #8
 80036e0:	6113      	str	r3, [r2, #16]

	 }
	 if(GET_BIT(TIM4->SR,4))
 80036e2:	4b29      	ldr	r3, [pc, #164]	; (8003788 <TIM4_IRQHandler+0x110>)
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <TIM4_IRQHandler+0x84>
	 {
		 /* CC4IF */
		 CLR_BIT(TIM4->SR,4);
 80036f0:	4b25      	ldr	r3, [pc, #148]	; (8003788 <TIM4_IRQHandler+0x110>)
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	4a24      	ldr	r2, [pc, #144]	; (8003788 <TIM4_IRQHandler+0x110>)
 80036f6:	f023 0310 	bic.w	r3, r3, #16
 80036fa:	6113      	str	r3, [r2, #16]

	 }
	 if(GET_BIT(TIM4->SR,6))
 80036fc:	4b22      	ldr	r3, [pc, #136]	; (8003788 <TIM4_IRQHandler+0x110>)
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	099b      	lsrs	r3, r3, #6
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <TIM4_IRQHandler+0x9e>
	 {
		 /* TIF */
		 CLR_BIT(TIM4->SR,6);
 800370a:	4b1f      	ldr	r3, [pc, #124]	; (8003788 <TIM4_IRQHandler+0x110>)
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	4a1e      	ldr	r2, [pc, #120]	; (8003788 <TIM4_IRQHandler+0x110>)
 8003710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003714:	6113      	str	r3, [r2, #16]
	 }
	 if(GET_BIT(TIM4->SR,9))
 8003716:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <TIM4_IRQHandler+0x110>)
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	0a5b      	lsrs	r3, r3, #9
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <TIM4_IRQHandler+0xb8>
	 {
		 /*DMA*/
		 CLR_BIT(TIM4->SR,9);
 8003724:	4b18      	ldr	r3, [pc, #96]	; (8003788 <TIM4_IRQHandler+0x110>)
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4a17      	ldr	r2, [pc, #92]	; (8003788 <TIM4_IRQHandler+0x110>)
 800372a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800372e:	6113      	str	r3, [r2, #16]

	 }
	 if(GET_BIT(TIM4->SR,10))
 8003730:	4b15      	ldr	r3, [pc, #84]	; (8003788 <TIM4_IRQHandler+0x110>)
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	0a9b      	lsrs	r3, r3, #10
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <TIM4_IRQHandler+0xd2>
	 {
		 CLR_BIT(TIM4->SR,10);
 800373e:	4b12      	ldr	r3, [pc, #72]	; (8003788 <TIM4_IRQHandler+0x110>)
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	4a11      	ldr	r2, [pc, #68]	; (8003788 <TIM4_IRQHandler+0x110>)
 8003744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003748:	6113      	str	r3, [r2, #16]
	 }
	 if(GET_BIT(TIM4->SR,11))
 800374a:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <TIM4_IRQHandler+0x110>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	0adb      	lsrs	r3, r3, #11
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <TIM4_IRQHandler+0xec>
	 {
		 CLR_BIT(TIM4->SR,11);
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <TIM4_IRQHandler+0x110>)
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <TIM4_IRQHandler+0x110>)
 800375e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003762:	6113      	str	r3, [r2, #16]
	 }
	 if(GET_BIT(TIM4->SR,12))
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <TIM4_IRQHandler+0x110>)
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	0b1b      	lsrs	r3, r3, #12
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <TIM4_IRQHandler+0x106>
	 {
		 CLR_BIT(TIM4->SR,12);
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <TIM4_IRQHandler+0x110>)
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	4a04      	ldr	r2, [pc, #16]	; (8003788 <TIM4_IRQHandler+0x110>)
 8003778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800377c:	6113      	str	r3, [r2, #16]
	 }
	 TIM_pfCallBack[_TIM4]();
 800377e:	4b03      	ldr	r3, [pc, #12]	; (800378c <TIM4_IRQHandler+0x114>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	4798      	blx	r3
 }
 8003784:	bf00      	nop
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40000800 	.word	0x40000800
 800378c:	20000064 	.word	0x20000064

08003790 <UART_voidInit>:

static void (*UART_pfCallBack[NUMBER_OF_UART_UNITS])(void) ={ NULL };


void UART_voidInit(UART_init_type * uart)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	 * 				RCC ==> enable digital interface to UART prepherial .						  *
	 * 				GPIO==> TX pin must be configuard as Alternate function PP .				  *
	 * 					==> RX pin must be configuard as input floating / input pull up. 		  *
	 * ********************************************************************************************
	 */
	switch(uart->ID)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b02      	cmp	r3, #2
 800379e:	d055      	beq.n	800384c <UART_voidInit+0xbc>
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	f000 80a3 	beq.w	80038ec <UART_voidInit+0x15c>
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d000      	beq.n	80037ac <UART_voidInit+0x1c>

	default:;

	}

}
 80037aa:	e0ef      	b.n	800398c <UART_voidInit+0x1fc>
		if(uart->parity==EVEN_PARITY)       UART1-> CR1 |= (uart->word<<12)|(uart->parity<<10);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	789b      	ldrb	r3, [r3, #2]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d10d      	bne.n	80037d0 <UART_voidInit+0x40>
 80037b4:	4b78      	ldr	r3, [pc, #480]	; (8003998 <UART_voidInit+0x208>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	7852      	ldrb	r2, [r2, #1]
 80037bc:	0311      	lsls	r1, r2, #12
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	7892      	ldrb	r2, [r2, #2]
 80037c2:	0292      	lsls	r2, r2, #10
 80037c4:	430a      	orrs	r2, r1
 80037c6:	4611      	mov	r1, r2
 80037c8:	4a73      	ldr	r2, [pc, #460]	; (8003998 <UART_voidInit+0x208>)
 80037ca:	430b      	orrs	r3, r1
 80037cc:	60d3      	str	r3, [r2, #12]
 80037ce:	e00c      	b.n	80037ea <UART_voidInit+0x5a>
		else			    				UART1-> CR1 |= (uart->word<<12)|(uart->parity<<9);
 80037d0:	4b71      	ldr	r3, [pc, #452]	; (8003998 <UART_voidInit+0x208>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	7852      	ldrb	r2, [r2, #1]
 80037d8:	0311      	lsls	r1, r2, #12
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	7892      	ldrb	r2, [r2, #2]
 80037de:	0252      	lsls	r2, r2, #9
 80037e0:	430a      	orrs	r2, r1
 80037e2:	4611      	mov	r1, r2
 80037e4:	4a6c      	ldr	r2, [pc, #432]	; (8003998 <UART_voidInit+0x208>)
 80037e6:	430b      	orrs	r3, r1
 80037e8:	60d3      	str	r3, [r2, #12]
		UART1-> CR2 |= (uart->stop<<12);
 80037ea:	4b6b      	ldr	r3, [pc, #428]	; (8003998 <UART_voidInit+0x208>)
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	78d2      	ldrb	r2, [r2, #3]
 80037f2:	0312      	lsls	r2, r2, #12
 80037f4:	4611      	mov	r1, r2
 80037f6:	4a68      	ldr	r2, [pc, #416]	; (8003998 <UART_voidInit+0x208>)
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6113      	str	r3, [r2, #16]
		UART1-> CR3 |= (uart->dmaTx<<7)|(uart->dmaTx<<6);
 80037fc:	4b66      	ldr	r3, [pc, #408]	; (8003998 <UART_voidInit+0x208>)
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	7912      	ldrb	r2, [r2, #4]
 8003804:	01d1      	lsls	r1, r2, #7
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	7912      	ldrb	r2, [r2, #4]
 800380a:	0192      	lsls	r2, r2, #6
 800380c:	430a      	orrs	r2, r1
 800380e:	4611      	mov	r1, r2
 8003810:	4a61      	ldr	r2, [pc, #388]	; (8003998 <UART_voidInit+0x208>)
 8003812:	430b      	orrs	r3, r1
 8003814:	6153      	str	r3, [r2, #20]
		UART1 -> BRR |= (uart->boudrate);
 8003816:	4b60      	ldr	r3, [pc, #384]	; (8003998 <UART_voidInit+0x208>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	88d2      	ldrh	r2, [r2, #6]
 800381e:	4611      	mov	r1, r2
 8003820:	4a5d      	ldr	r2, [pc, #372]	; (8003998 <UART_voidInit+0x208>)
 8003822:	430b      	orrs	r3, r1
 8003824:	6093      	str	r3, [r2, #8]
		SET_BIT(UART1->CR1,2);
 8003826:	4b5c      	ldr	r3, [pc, #368]	; (8003998 <UART_voidInit+0x208>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4a5b      	ldr	r2, [pc, #364]	; (8003998 <UART_voidInit+0x208>)
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	60d3      	str	r3, [r2, #12]
		SET_BIT(UART1->CR1,3);
 8003832:	4b59      	ldr	r3, [pc, #356]	; (8003998 <UART_voidInit+0x208>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	4a58      	ldr	r2, [pc, #352]	; (8003998 <UART_voidInit+0x208>)
 8003838:	f043 0308 	orr.w	r3, r3, #8
 800383c:	60d3      	str	r3, [r2, #12]
		SET_BIT(UART1->CR1,13);
 800383e:	4b56      	ldr	r3, [pc, #344]	; (8003998 <UART_voidInit+0x208>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	4a55      	ldr	r2, [pc, #340]	; (8003998 <UART_voidInit+0x208>)
 8003844:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003848:	60d3      	str	r3, [r2, #12]
		break;
 800384a:	e09f      	b.n	800398c <UART_voidInit+0x1fc>
		if(uart->parity==EVEN_PARITY)   UART2-> CR1 |= (uart->word<<12)|(uart->parity<<10);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	789b      	ldrb	r3, [r3, #2]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d10d      	bne.n	8003870 <UART_voidInit+0xe0>
 8003854:	4b51      	ldr	r3, [pc, #324]	; (800399c <UART_voidInit+0x20c>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	7852      	ldrb	r2, [r2, #1]
 800385c:	0311      	lsls	r1, r2, #12
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	7892      	ldrb	r2, [r2, #2]
 8003862:	0292      	lsls	r2, r2, #10
 8003864:	430a      	orrs	r2, r1
 8003866:	4611      	mov	r1, r2
 8003868:	4a4c      	ldr	r2, [pc, #304]	; (800399c <UART_voidInit+0x20c>)
 800386a:	430b      	orrs	r3, r1
 800386c:	60d3      	str	r3, [r2, #12]
 800386e:	e00c      	b.n	800388a <UART_voidInit+0xfa>
		else							UART2-> CR1 |= (uart->word<<12)|(uart->parity<<9);
 8003870:	4b4a      	ldr	r3, [pc, #296]	; (800399c <UART_voidInit+0x20c>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	7852      	ldrb	r2, [r2, #1]
 8003878:	0311      	lsls	r1, r2, #12
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	7892      	ldrb	r2, [r2, #2]
 800387e:	0252      	lsls	r2, r2, #9
 8003880:	430a      	orrs	r2, r1
 8003882:	4611      	mov	r1, r2
 8003884:	4a45      	ldr	r2, [pc, #276]	; (800399c <UART_voidInit+0x20c>)
 8003886:	430b      	orrs	r3, r1
 8003888:	60d3      	str	r3, [r2, #12]
		UART2-> CR2 |= (uart->stop<<12);
 800388a:	4b44      	ldr	r3, [pc, #272]	; (800399c <UART_voidInit+0x20c>)
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	78d2      	ldrb	r2, [r2, #3]
 8003892:	0312      	lsls	r2, r2, #12
 8003894:	4611      	mov	r1, r2
 8003896:	4a41      	ldr	r2, [pc, #260]	; (800399c <UART_voidInit+0x20c>)
 8003898:	430b      	orrs	r3, r1
 800389a:	6113      	str	r3, [r2, #16]
		UART2-> CR3 |= (uart->dmaTx<<7)|(uart->dmaTx<<6);
 800389c:	4b3f      	ldr	r3, [pc, #252]	; (800399c <UART_voidInit+0x20c>)
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	7912      	ldrb	r2, [r2, #4]
 80038a4:	01d1      	lsls	r1, r2, #7
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	7912      	ldrb	r2, [r2, #4]
 80038aa:	0192      	lsls	r2, r2, #6
 80038ac:	430a      	orrs	r2, r1
 80038ae:	4611      	mov	r1, r2
 80038b0:	4a3a      	ldr	r2, [pc, #232]	; (800399c <UART_voidInit+0x20c>)
 80038b2:	430b      	orrs	r3, r1
 80038b4:	6153      	str	r3, [r2, #20]
		UART2 -> BRR |= (uart->boudrate);
 80038b6:	4b39      	ldr	r3, [pc, #228]	; (800399c <UART_voidInit+0x20c>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	88d2      	ldrh	r2, [r2, #6]
 80038be:	4611      	mov	r1, r2
 80038c0:	4a36      	ldr	r2, [pc, #216]	; (800399c <UART_voidInit+0x20c>)
 80038c2:	430b      	orrs	r3, r1
 80038c4:	6093      	str	r3, [r2, #8]
		SET_BIT(UART2->CR1,2);
 80038c6:	4b35      	ldr	r3, [pc, #212]	; (800399c <UART_voidInit+0x20c>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	4a34      	ldr	r2, [pc, #208]	; (800399c <UART_voidInit+0x20c>)
 80038cc:	f043 0304 	orr.w	r3, r3, #4
 80038d0:	60d3      	str	r3, [r2, #12]
		SET_BIT(UART2->CR1,3);
 80038d2:	4b32      	ldr	r3, [pc, #200]	; (800399c <UART_voidInit+0x20c>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	4a31      	ldr	r2, [pc, #196]	; (800399c <UART_voidInit+0x20c>)
 80038d8:	f043 0308 	orr.w	r3, r3, #8
 80038dc:	60d3      	str	r3, [r2, #12]
		SET_BIT(UART2->CR1,13);
 80038de:	4b2f      	ldr	r3, [pc, #188]	; (800399c <UART_voidInit+0x20c>)
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	4a2e      	ldr	r2, [pc, #184]	; (800399c <UART_voidInit+0x20c>)
 80038e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038e8:	60d3      	str	r3, [r2, #12]
		break;
 80038ea:	e04f      	b.n	800398c <UART_voidInit+0x1fc>
		if(uart->parity==EVEN_PARITY)       UART3-> CR1 |= (uart->word<<12)|(uart->parity<<10);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	789b      	ldrb	r3, [r3, #2]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d10d      	bne.n	8003910 <UART_voidInit+0x180>
 80038f4:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <UART_voidInit+0x210>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	7852      	ldrb	r2, [r2, #1]
 80038fc:	0311      	lsls	r1, r2, #12
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	7892      	ldrb	r2, [r2, #2]
 8003902:	0292      	lsls	r2, r2, #10
 8003904:	430a      	orrs	r2, r1
 8003906:	4611      	mov	r1, r2
 8003908:	4a25      	ldr	r2, [pc, #148]	; (80039a0 <UART_voidInit+0x210>)
 800390a:	430b      	orrs	r3, r1
 800390c:	60d3      	str	r3, [r2, #12]
 800390e:	e00c      	b.n	800392a <UART_voidInit+0x19a>
		else								UART3-> CR1 |= (uart->word<<12)|(uart->parity<<9);
 8003910:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <UART_voidInit+0x210>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	7852      	ldrb	r2, [r2, #1]
 8003918:	0311      	lsls	r1, r2, #12
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	7892      	ldrb	r2, [r2, #2]
 800391e:	0252      	lsls	r2, r2, #9
 8003920:	430a      	orrs	r2, r1
 8003922:	4611      	mov	r1, r2
 8003924:	4a1e      	ldr	r2, [pc, #120]	; (80039a0 <UART_voidInit+0x210>)
 8003926:	430b      	orrs	r3, r1
 8003928:	60d3      	str	r3, [r2, #12]
		UART3-> CR2 |= (uart->stop<<12);
 800392a:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <UART_voidInit+0x210>)
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	78d2      	ldrb	r2, [r2, #3]
 8003932:	0312      	lsls	r2, r2, #12
 8003934:	4611      	mov	r1, r2
 8003936:	4a1a      	ldr	r2, [pc, #104]	; (80039a0 <UART_voidInit+0x210>)
 8003938:	430b      	orrs	r3, r1
 800393a:	6113      	str	r3, [r2, #16]
		UART3-> CR3 |= (uart->dmaTx<<7)|(uart->dmaTx<<6);
 800393c:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <UART_voidInit+0x210>)
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	7912      	ldrb	r2, [r2, #4]
 8003944:	01d1      	lsls	r1, r2, #7
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	7912      	ldrb	r2, [r2, #4]
 800394a:	0192      	lsls	r2, r2, #6
 800394c:	430a      	orrs	r2, r1
 800394e:	4611      	mov	r1, r2
 8003950:	4a13      	ldr	r2, [pc, #76]	; (80039a0 <UART_voidInit+0x210>)
 8003952:	430b      	orrs	r3, r1
 8003954:	6153      	str	r3, [r2, #20]
		UART3 -> BRR |= (uart->boudrate);
 8003956:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <UART_voidInit+0x210>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	88d2      	ldrh	r2, [r2, #6]
 800395e:	4611      	mov	r1, r2
 8003960:	4a0f      	ldr	r2, [pc, #60]	; (80039a0 <UART_voidInit+0x210>)
 8003962:	430b      	orrs	r3, r1
 8003964:	6093      	str	r3, [r2, #8]
		SET_BIT(UART3->CR1,2);
 8003966:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <UART_voidInit+0x210>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <UART_voidInit+0x210>)
 800396c:	f043 0304 	orr.w	r3, r3, #4
 8003970:	60d3      	str	r3, [r2, #12]
		SET_BIT(UART3->CR1,3);
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <UART_voidInit+0x210>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <UART_voidInit+0x210>)
 8003978:	f043 0308 	orr.w	r3, r3, #8
 800397c:	60d3      	str	r3, [r2, #12]
		SET_BIT(UART3->CR1,13);
 800397e:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <UART_voidInit+0x210>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	4a07      	ldr	r2, [pc, #28]	; (80039a0 <UART_voidInit+0x210>)
 8003984:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003988:	60d3      	str	r3, [r2, #12]
		break;
 800398a:	bf00      	nop
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40013800 	.word	0x40013800
 800399c:	40004400 	.word	0x40004400
 80039a0:	40004800 	.word	0x40004800

080039a4 <UART_u8ReciveCharPeriodic>:
		}
	return 1;
}

u8 UART_u8ReciveCharPeriodic(UART_init_type * uart, u8* data)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
	u8 Local_u8_check =0 ;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]

	switch(uart->ID)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d012      	beq.n	80039e0 <UART_u8ReciveCharPeriodic+0x3c>
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d01f      	beq.n	80039fe <UART_u8ReciveCharPeriodic+0x5a>
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d131      	bne.n	8003a26 <UART_u8ReciveCharPeriodic+0x82>
	{
	case ID_UART1 :
		if (GET_BIT(UART1->SR,5))
 80039c2:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <UART_u8ReciveCharPeriodic+0x90>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d025      	beq.n	8003a1c <UART_u8ReciveCharPeriodic+0x78>
			{
				*data=UART1->DR;
 80039d0:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <UART_u8ReciveCharPeriodic+0x90>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	701a      	strb	r2, [r3, #0]
				Local_u8_check =1 ;
 80039da:	2301      	movs	r3, #1
 80039dc:	73fb      	strb	r3, [r7, #15]
			}

		break;
 80039de:	e01d      	b.n	8003a1c <UART_u8ReciveCharPeriodic+0x78>
	case ID_UART2 :
		if (GET_BIT(UART2->SR,5))
 80039e0:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <UART_u8ReciveCharPeriodic+0x94>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d018      	beq.n	8003a20 <UART_u8ReciveCharPeriodic+0x7c>
			{
				*data=UART2->DR;
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <UART_u8ReciveCharPeriodic+0x94>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	701a      	strb	r2, [r3, #0]
				Local_u8_check =1 ;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
			}

		break;
 80039fc:	e010      	b.n	8003a20 <UART_u8ReciveCharPeriodic+0x7c>
	case ID_UART3 :
		if (GET_BIT(UART3->SR,5))
 80039fe:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <UART_u8ReciveCharPeriodic+0x98>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00b      	beq.n	8003a24 <UART_u8ReciveCharPeriodic+0x80>
			{
				*data=UART3->DR;
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <UART_u8ReciveCharPeriodic+0x98>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	701a      	strb	r2, [r3, #0]
				Local_u8_check =1 ;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
			}

		break;
 8003a1a:	e003      	b.n	8003a24 <UART_u8ReciveCharPeriodic+0x80>
		break;
 8003a1c:	bf00      	nop
 8003a1e:	e002      	b.n	8003a26 <UART_u8ReciveCharPeriodic+0x82>
		break;
 8003a20:	bf00      	nop
 8003a22:	e000      	b.n	8003a26 <UART_u8ReciveCharPeriodic+0x82>
		break;
 8003a24:	bf00      	nop
	default :;
	}


	return Local_u8_check ;
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40013800 	.word	0x40013800
 8003a38:	40004400 	.word	0x40004400
 8003a3c:	40004800 	.word	0x40004800

08003a40 <USART1_IRQHandler>:

}
/****************************************IRQ***********************************/

void USART1_IRQHandler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
	if(GET_BIT(UART1->SR,0))
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <USART1_IRQHandler+0x34>)
 8003a46:	681b      	ldr	r3, [r3, #0]
	{
		/* Clearing PIF by reading SR && W/R DR Register */

	}
	if(GET_BIT(UART1->SR,1))
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <USART1_IRQHandler+0x34>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
	{
		/* Clearing PIF by reading SR && W/R DR Register */

	}
	if(GET_BIT(UART1->SR,2))
 8003a4c:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <USART1_IRQHandler+0x34>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
	{
		/* Clearing PIF by reading SR && W/R DR Register */

	}
	if(GET_BIT(UART1->SR,3))
 8003a50:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <USART1_IRQHandler+0x34>)
 8003a52:	681b      	ldr	r3, [r3, #0]
	{
		/* Clearing PIF by reading SR && W/R DR Register */

	}
	if(GET_BIT(UART1->SR,4))
 8003a54:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <USART1_IRQHandler+0x34>)
 8003a56:	681b      	ldr	r3, [r3, #0]
	{
		/* Clearing PIF by reading SR && W/R DR Register */

	}
	if(GET_BIT(UART1->SR,5))
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <USART1_IRQHandler+0x34>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
	{
		/* Clearing PIF by reading SR && W/R DR Register */

	}
	if(GET_BIT(UART1->SR,6))
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <USART1_IRQHandler+0x34>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
	{
		/* Clearing PIF by reading SR && W/R DR Register */

	}
	if(GET_BIT(UART1->SR,7))
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <USART1_IRQHandler+0x34>)
 8003a62:	681b      	ldr	r3, [r3, #0]
	{
		/* Clearing PIF by reading SR && W/R DR Register */

	}
	/*   CLear PIF by reading data register     */
		UART1->DR;
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <USART1_IRQHandler+0x34>)
 8003a66:	685b      	ldr	r3, [r3, #4]

	UART_pfCallBack[0]();
 8003a68:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <USART1_IRQHandler+0x38>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4798      	blx	r3

}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40013800 	.word	0x40013800
 8003a78:	20000074 	.word	0x20000074

08003a7c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
	if(GET_BIT(UART2->SR,0))
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <USART2_IRQHandler+0x34>)
 8003a82:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */


		}
		if(GET_BIT(UART2->SR,1))
 8003a84:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <USART2_IRQHandler+0x34>)
 8003a86:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */

		}
		if(GET_BIT(UART2->SR,2))
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <USART2_IRQHandler+0x34>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */

		}
		if(GET_BIT(UART2->SR,3))
 8003a8c:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <USART2_IRQHandler+0x34>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */

		}
		if(GET_BIT(UART2->SR,4))
 8003a90:	4b07      	ldr	r3, [pc, #28]	; (8003ab0 <USART2_IRQHandler+0x34>)
 8003a92:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */

		}
		if(GET_BIT(UART2->SR,5))
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <USART2_IRQHandler+0x34>)
 8003a96:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */

		}
		if(GET_BIT(UART2->SR,6))
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <USART2_IRQHandler+0x34>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */

		}
		if(GET_BIT(UART2->SR,7))
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <USART2_IRQHandler+0x34>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */

		}
	UART2->DR;
 8003aa0:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <USART2_IRQHandler+0x34>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
	UART_pfCallBack[1]();
 8003aa4:	4b03      	ldr	r3, [pc, #12]	; (8003ab4 <USART2_IRQHandler+0x38>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4798      	blx	r3
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40004400 	.word	0x40004400
 8003ab4:	20000074 	.word	0x20000074

08003ab8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
	   if(GET_BIT(UART3->SR,0))
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <USART3_IRQHandler+0x34>)
 8003abe:	681b      	ldr	r3, [r3, #0]

		  /* Clearing PIF by reading SR && W/R DR Register */


	    }
		if(GET_BIT(UART3->SR,1))
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <USART3_IRQHandler+0x34>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */

		}
		if(GET_BIT(UART3->SR,2))
 8003ac4:	4b09      	ldr	r3, [pc, #36]	; (8003aec <USART3_IRQHandler+0x34>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */

		}
		if(GET_BIT(UART3->SR,3))
 8003ac8:	4b08      	ldr	r3, [pc, #32]	; (8003aec <USART3_IRQHandler+0x34>)
 8003aca:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */

		}
		if(GET_BIT(UART3->SR,4))
 8003acc:	4b07      	ldr	r3, [pc, #28]	; (8003aec <USART3_IRQHandler+0x34>)
 8003ace:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */

		}
		if(GET_BIT(UART3->SR,5))
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <USART3_IRQHandler+0x34>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */

		}
		if(GET_BIT(UART3->SR,6))
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <USART3_IRQHandler+0x34>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */

		}
		if(GET_BIT(UART3->SR,7))
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <USART3_IRQHandler+0x34>)
 8003ada:	681b      	ldr	r3, [r3, #0]
		{
			/* Clearing PIF by reading SR && W/R DR Register */

		}
	UART3->DR;
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <USART3_IRQHandler+0x34>)
 8003ade:	685b      	ldr	r3, [r3, #4]
	UART_pfCallBack[2]();
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <USART3_IRQHandler+0x38>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	4798      	blx	r3
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40004800 	.word	0x40004800
 8003af0:	20000074 	.word	0x20000074

08003af4 <main>:
#define LOCK_OPEN     'O'
#define LOCK_CLOSE    'C'


int main(void)
{
 8003af4:	b590      	push	{r4, r7, lr}
 8003af6:	b093      	sub	sp, #76	; 0x4c
 8003af8:	af00      	add	r7, sp, #0
	/********************* Global declerations ******************/

	System_States  CurrentState = RECIVING_COMMANDS ;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	//static u8 Command[200]={0};
	/*	Timer declecartion && PWM Decleration  				*/
	Timer_Config_type timer3={_TIM3,  PRELOAD, UPCOUNTER , DISABLE, 8 } ;      /* prescaller 8MHz/80 =100KHz and TickTime 10us */
 8003b00:	4ad6      	ldr	r2, [pc, #856]	; (8003e5c <main+0x368>)
 8003b02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b0a:	6018      	str	r0, [r3, #0]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	8019      	strh	r1, [r3, #0]
	PWM_Config_type  PWM3_CH3={_TIM3,TIM_CHANNEL3,EDGE_ALIGN,MODE1_START_HIGH,1,50,0};    /*2% Angel 0--10% Angel 180*/
 8003b10:	4bd3      	ldr	r3, [pc, #844]	; (8003e60 <main+0x36c>)
 8003b12:	f107 0420 	add.w	r4, r7, #32
 8003b16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	PWM_Config_type  PWM3_CH4={_TIM3,TIM_CHANNEL4,EDGE_ALIGN,MODE1_START_HIGH,1,50,0};
 8003b1c:	4bd1      	ldr	r3, [pc, #836]	; (8003e64 <main+0x370>)
 8003b1e:	f107 0410 	add.w	r4, r7, #16
 8003b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/*  UART  declecartion                   				*/
	UART_init_type uart1 ={ ID_UART1 ,  STRTBIT_8DATA_NSTOPBIT , NO_PARITY,  STOP_1_BIT ,DMA_TX_DISABLE, DMA_RX_DISABLE ,RATE_9600};
 8003b28:	4acf      	ldr	r2, [pc, #828]	; (8003e68 <main+0x374>)
 8003b2a:	f107 0308 	add.w	r3, r7, #8
 8003b2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b32:	e883 0003 	stmia.w	r3, {r0, r1}
	/* 	RCC External Crystal	FCPU=8MHz		*/
	RCC_voidInit();
 8003b36:	f7fe f96d 	bl	8001e14 <RCC_voidInit>
	RCC_voidEnablePeripheralClock_EntireBus(RCC_APB2);
 8003b3a:	2002      	movs	r0, #2
 8003b3c:	f7fe f9d4 	bl	8001ee8 <RCC_voidEnablePeripheralClock_EntireBus>
	RCC_voidEnablePeripheralClock_EntireBus(RCC_APB1); /*  UART2 / UART3	*/
 8003b40:	2001      	movs	r0, #1
 8003b42:	f7fe f9d1 	bl	8001ee8 <RCC_voidEnablePeripheralClock_EntireBus>
	/*	Systick	  F=Fcpu/8 =1Mhz and tick time=1us		*/
	STK_voidInit();
 8003b46:	f7fe fa33 	bl	8001fb0 <STK_voidInit>
	/* 	GPIO 			*/
	DIO_Init();
 8003b4a:	f7fd fee7 	bl	800191c <DIO_Init>
	DIO_InitPin(PINA0, DIO_E_INPUT_ANALOG);        /* ADC Channel 0 / Potentiometer */
 8003b4e:	2100      	movs	r1, #0
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7fc fe83 	bl	800085c <DIO_InitPin>
	DIO_InitPin(PINA1, DIO_E_INPUT_ANALOG);        /* ADC Channel 1 / ldr sensor    */
 8003b56:	2100      	movs	r1, #0
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f7fc fe7f 	bl	800085c <DIO_InitPin>
	DIO_InitPin(PINA2, DIO_E_OUTPUT_2MHZ_PUSH);    /* GPIO          / LCD RS        */
 8003b5e:	2102      	movs	r1, #2
 8003b60:	2002      	movs	r0, #2
 8003b62:	f7fc fe7b 	bl	800085c <DIO_InitPin>
	DIO_InitPin(PINA3, DIO_E_OUTPUT_2MHZ_PUSH);    /* GPIO          / LCD EN        */
 8003b66:	2102      	movs	r1, #2
 8003b68:	2003      	movs	r0, #3
 8003b6a:	f7fc fe77 	bl	800085c <DIO_InitPin>
	DIO_InitPin(PINA4, DIO_E_OUTPUT_2MHZ_PUSH);    /* GPIO          / LCD D4        */
 8003b6e:	2102      	movs	r1, #2
 8003b70:	2004      	movs	r0, #4
 8003b72:	f7fc fe73 	bl	800085c <DIO_InitPin>
	DIO_InitPin(PINA5, DIO_E_OUTPUT_2MHZ_PUSH);    /* GPIO          / LCD D5        */
 8003b76:	2102      	movs	r1, #2
 8003b78:	2005      	movs	r0, #5
 8003b7a:	f7fc fe6f 	bl	800085c <DIO_InitPin>
	DIO_InitPin(PINA6, DIO_E_OUTPUT_2MHZ_PUSH);    /* GPIO          / LCD D6        */
 8003b7e:	2102      	movs	r1, #2
 8003b80:	2006      	movs	r0, #6
 8003b82:	f7fc fe6b 	bl	800085c <DIO_InitPin>
	DIO_InitPin(PINA7, DIO_E_OUTPUT_2MHZ_PUSH);    /* GPIO          / LCD D7        */
 8003b86:	2102      	movs	r1, #2
 8003b88:	2007      	movs	r0, #7
 8003b8a:	f7fc fe67 	bl	800085c <DIO_InitPin>
	DIO_InitPin(PINA8, DIO_E_OUTPUT_2MHZ_PUSH);    /* GPIO          / AVR RELAY - DOOR LOCK */
 8003b8e:	2102      	movs	r1, #2
 8003b90:	2008      	movs	r0, #8
 8003b92:	f7fc fe63 	bl	800085c <DIO_InitPin>
	/* 	UART 1 PINs Init  */
	DIO_InitPin(PINA9, DIO_E_OUTPUT_2MHZ_AF_PP);    /* TX1 */
 8003b96:	210a      	movs	r1, #10
 8003b98:	2009      	movs	r0, #9
 8003b9a:	f7fc fe5f 	bl	800085c <DIO_InitPin>
	DIO_InitPin(PINA10, DIO_E_INPUT_PULL_UP);       /* RX1 / AVR TX*/
 8003b9e:	2108      	movs	r1, #8
 8003ba0:	200a      	movs	r0, #10
 8003ba2:	f7fc fe5b 	bl	800085c <DIO_InitPin>
	/* 	Timer 2 PINs Init */
	DIO_InitPin(PINB0, DIO_E_OUTPUT_2MHZ_AF_PP);    /* TIM3 CH3 / Fan Speed      */
 8003ba6:	210a      	movs	r1, #10
 8003ba8:	2010      	movs	r0, #16
 8003baa:	f7fc fe57 	bl	800085c <DIO_InitPin>
	DIO_InitPin(PINB1, DIO_E_OUTPUT_2MHZ_AF_PP);    /* TIM3 CH4 / LEDs Adjustment */
 8003bae:	210a      	movs	r1, #10
 8003bb0:	2011      	movs	r0, #17
 8003bb2:	f7fc fe53 	bl	800085c <DIO_InitPin>
	/* 	ADC Init                     		*/
	ADC_voidInit();
 8003bb6:	f7fc fc95 	bl	80004e4 <ADC_voidInit>
	/* 	LCD Init                     		*/
	LCD_Init();
 8003bba:	f7fd ffcf 	bl	8001b5c <LCD_Init>
	/*	UART init &	Enable	*/
	UART_voidInit(&uart1);
 8003bbe:	f107 0308 	add.w	r3, r7, #8
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff fde4 	bl	8003790 <UART_voidInit>
	/*	timer init & Enable	  */
	TimerInit(&timer3);
 8003bc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe fa57 	bl	8002080 <TimerInit>
	/*  PWM init & Enable */
	timer_voidGPWM(&PWM3_CH3); /* TIM3 CH3 / Fan Speed      */
 8003bd2:	f107 0320 	add.w	r3, r7, #32
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe fb46 	bl	8002268 <timer_voidGPWM>
	timer_voidGPWM(&PWM3_CH4); /* TIM3 CH4 / LEDs Adjustment */
 8003bdc:	f107 0310 	add.w	r3, r7, #16
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe fb41 	bl	8002268 <timer_voidGPWM>
	/*variables*/
	u8 command=0,light_flag=LIGHT_MANUAL,fan_flag=FAN_MANUAL,lock_flag=LOCK_CLOSE,fan_last_manual=0,light_last_manual=0,ldr_Read=0,pot_Read=0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	71fb      	strb	r3, [r7, #7]
 8003bea:	234d      	movs	r3, #77	; 0x4d
 8003bec:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003bf0:	234d      	movs	r3, #77	; 0x4d
 8003bf2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003bf6:	2343      	movs	r3, #67	; 0x43
 8003bf8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c02:	2300      	movs	r3, #0
 8003c04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	u32 ldr_update_counter=0,pot_update_counter=0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c18:	2300      	movs	r3, #0
 8003c1a:	63bb      	str	r3, [r7, #56]	; 0x38
	LCD_WriteStringXY(0, 0, SCREEN1L0);
 8003c1c:	4a93      	ldr	r2, [pc, #588]	; (8003e6c <main+0x378>)
 8003c1e:	2100      	movs	r1, #0
 8003c20:	2000      	movs	r0, #0
 8003c22:	f7fe f8cb 	bl	8001dbc <LCD_WriteStringXY>
	LCD_WriteStringXY(1, 0, SCREEN1L1);
 8003c26:	4a92      	ldr	r2, [pc, #584]	; (8003e70 <main+0x37c>)
 8003c28:	2100      	movs	r1, #0
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f7fe f8c6 	bl	8001dbc <LCD_WriteStringXY>
	STK_voidSetBusyWait(Welcome_Screen_Delay);
 8003c30:	4890      	ldr	r0, [pc, #576]	; (8003e74 <main+0x380>)
 8003c32:	f7fe f9c9 	bl	8001fc8 <STK_voidSetBusyWait>
	LCD_WriteStringXY(0, 0, SCREEN2L0);
 8003c36:	4a90      	ldr	r2, [pc, #576]	; (8003e78 <main+0x384>)
 8003c38:	2100      	movs	r1, #0
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f7fe f8be 	bl	8001dbc <LCD_WriteStringXY>
	LCD_WriteStringXY(1, 0, SCREEN2L1);
 8003c40:	4a8e      	ldr	r2, [pc, #568]	; (8003e7c <main+0x388>)
 8003c42:	2100      	movs	r1, #0
 8003c44:	2001      	movs	r0, #1
 8003c46:	f7fe f8b9 	bl	8001dbc <LCD_WriteStringXY>
	LCD_WriteCharXY(0, 14,lock_flag);
 8003c4a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003c4e:	461a      	mov	r2, r3
 8003c50:	210e      	movs	r1, #14
 8003c52:	2000      	movs	r0, #0
 8003c54:	f7fe f89b 	bl	8001d8e <LCD_WriteCharXY>
	LCD_WriteCharXY(1, 2,light_flag);
 8003c58:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2102      	movs	r1, #2
 8003c60:	2001      	movs	r0, #1
 8003c62:	f7fe f894 	bl	8001d8e <LCD_WriteCharXY>
	if(LIGHT_MANUAL==light_flag){LCD_WriteNumberXY(1, 3,light_last_manual);}
 8003c66:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003c6a:	2b4d      	cmp	r3, #77	; 0x4d
 8003c6c:	d10a      	bne.n	8003c84 <main+0x190>
 8003c6e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003c72:	f04f 0400 	mov.w	r4, #0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4623      	mov	r3, r4
 8003c7a:	2103      	movs	r1, #3
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	f7fe f8b2 	bl	8001de6 <LCD_WriteNumberXY>
 8003c82:	e00d      	b.n	8003ca0 <main+0x1ac>
	else if(LIGHT_AUTO==light_flag){LCD_WriteNumberXY(1, 3,ldr_Read);}
 8003c84:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003c88:	2b41      	cmp	r3, #65	; 0x41
 8003c8a:	d109      	bne.n	8003ca0 <main+0x1ac>
 8003c8c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003c90:	f04f 0400 	mov.w	r4, #0
 8003c94:	461a      	mov	r2, r3
 8003c96:	4623      	mov	r3, r4
 8003c98:	2103      	movs	r1, #3
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	f7fe f8a3 	bl	8001de6 <LCD_WriteNumberXY>
	LCD_WriteCharXY(1, 10,fan_flag);
 8003ca0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	210a      	movs	r1, #10
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f7fe f870 	bl	8001d8e <LCD_WriteCharXY>
	if(FAN_MANUAL==fan_flag){LCD_WriteNumberXY(1, 11,fan_last_manual);}
 8003cae:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003cb2:	2b4d      	cmp	r3, #77	; 0x4d
 8003cb4:	d109      	bne.n	8003cca <main+0x1d6>
 8003cb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003cba:	f04f 0400 	mov.w	r4, #0
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	4623      	mov	r3, r4
 8003cc2:	210b      	movs	r1, #11
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	f7fe f88e 	bl	8001de6 <LCD_WriteNumberXY>
	if(FAN_AUTO==fan_flag){LCD_WriteNumberXY(1, 11,pot_Read);}
 8003cca:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003cce:	2b41      	cmp	r3, #65	; 0x41
 8003cd0:	d109      	bne.n	8003ce6 <main+0x1f2>
 8003cd2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003cd6:	f04f 0400 	mov.w	r4, #0
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4623      	mov	r3, r4
 8003cde:	210b      	movs	r1, #11
 8003ce0:	2001      	movs	r0, #1
 8003ce2:	f7fe f880 	bl	8001de6 <LCD_WriteNumberXY>


	while(1)
	{
		switch(CurrentState)
 8003ce6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cea:	2b12      	cmp	r3, #18
 8003cec:	f200 85fd 	bhi.w	80048ea <main+0xdf6>
 8003cf0:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <main+0x204>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d45 	.word	0x08003d45
 8003cfc:	08003f41 	.word	0x08003f41
 8003d00:	0800410f 	.word	0x0800410f
 8003d04:	080042c9 	.word	0x080042c9
 8003d08:	0800446b 	.word	0x0800446b
 8003d0c:	080044a5 	.word	0x080044a5
 8003d10:	080044d5 	.word	0x080044d5
 8003d14:	0800450f 	.word	0x0800450f
 8003d18:	08004549 	.word	0x08004549
 8003d1c:	08004583 	.word	0x08004583
 8003d20:	080045b5 	.word	0x080045b5
 8003d24:	080045f1 	.word	0x080045f1
 8003d28:	0800462d 	.word	0x0800462d
 8003d2c:	08004669 	.word	0x08004669
 8003d30:	080046c1 	.word	0x080046c1
 8003d34:	080046fb 	.word	0x080046fb
 8003d38:	08004737 	.word	0x08004737
 8003d3c:	08003d6d 	.word	0x08003d6d
 8003d40:	08004809 	.word	0x08004809
		{
		case RECIVING_COMMANDS:


			/*There is a Recived Command */
			if(UART_u8ReciveCharPeriodic(&uart1,&command))   CurrentState = CHECKING_COMMANDS_VIDALITY ;
 8003d44:	1dfa      	adds	r2, r7, #7
 8003d46:	f107 0308 	add.w	r3, r7, #8
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fe29 	bl	80039a4 <UART_u8ReciveCharPeriodic>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <main+0x26e>
 8003d58:	2311      	movs	r3, #17
 8003d5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			else          		    CurrentState = RECIVING_ADC_READINGS ;
			break;
 8003d5e:	f000 bdc8 	b.w	80048f2 <main+0xdfe>
			else          		    CurrentState = RECIVING_ADC_READINGS ;
 8003d62:	2312      	movs	r3, #18
 8003d64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8003d68:	f000 bdc3 	b.w	80048f2 <main+0xdfe>

		case CHECKING_COMMANDS_VIDALITY:
			if(OPEN_CLOSE_LOCK==command)          CurrentState = COMMAND1_VALID;
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	2b44      	cmp	r3, #68	; 0x44
 8003d70:	d103      	bne.n	8003d7a <main+0x286>
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003d78:	e0de      	b.n	8003f38 <main+0x444>
			else if(FAN_AUTO_MANUAL==command)     CurrentState = COMMAND2_VALID;
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	2b46      	cmp	r3, #70	; 0x46
 8003d7e:	d103      	bne.n	8003d88 <main+0x294>
 8003d80:	2302      	movs	r3, #2
 8003d82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003d86:	e0d7      	b.n	8003f38 <main+0x444>
			else if(LIGHT_AUTO_MANUAL==command)   CurrentState = COMMAND3_VALID;
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	2b4c      	cmp	r3, #76	; 0x4c
 8003d8c:	d103      	bne.n	8003d96 <main+0x2a2>
 8003d8e:	2303      	movs	r3, #3
 8003d90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003d94:	e0d0      	b.n	8003f38 <main+0x444>

			else if((STOP_LIGHT     ==command)&&(LIGHT_MANUAL==light_flag))    CurrentState = COMMAND4_VALID;
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	2b31      	cmp	r3, #49	; 0x31
 8003d9a:	d107      	bne.n	8003dac <main+0x2b8>
 8003d9c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003da0:	2b4d      	cmp	r3, #77	; 0x4d
 8003da2:	d103      	bne.n	8003dac <main+0x2b8>
 8003da4:	2304      	movs	r3, #4
 8003da6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003daa:	e0c5      	b.n	8003f38 <main+0x444>
			else if((START_LIGHT_100==command)&&(LIGHT_MANUAL==light_flag))    CurrentState = COMMAND5_VALID;
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	2b36      	cmp	r3, #54	; 0x36
 8003db0:	d107      	bne.n	8003dc2 <main+0x2ce>
 8003db2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003db6:	2b4d      	cmp	r3, #77	; 0x4d
 8003db8:	d103      	bne.n	8003dc2 <main+0x2ce>
 8003dba:	2305      	movs	r3, #5
 8003dbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003dc0:	e0ba      	b.n	8003f38 <main+0x444>
			else if((START_LIGHT_75 ==command)&&(LIGHT_MANUAL==light_flag))    CurrentState = COMMAND6_VALID;
 8003dc2:	79fb      	ldrb	r3, [r7, #7]
 8003dc4:	2b35      	cmp	r3, #53	; 0x35
 8003dc6:	d107      	bne.n	8003dd8 <main+0x2e4>
 8003dc8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003dcc:	2b4d      	cmp	r3, #77	; 0x4d
 8003dce:	d103      	bne.n	8003dd8 <main+0x2e4>
 8003dd0:	2306      	movs	r3, #6
 8003dd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003dd6:	e0af      	b.n	8003f38 <main+0x444>
			else if((START_LIGHT_50 ==command)&&(LIGHT_MANUAL==light_flag))    CurrentState = COMMAND7_VALID;
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	2b34      	cmp	r3, #52	; 0x34
 8003ddc:	d107      	bne.n	8003dee <main+0x2fa>
 8003dde:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003de2:	2b4d      	cmp	r3, #77	; 0x4d
 8003de4:	d103      	bne.n	8003dee <main+0x2fa>
 8003de6:	2307      	movs	r3, #7
 8003de8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003dec:	e0a4      	b.n	8003f38 <main+0x444>
			else if((START_LIGHT_25 ==command)&&(LIGHT_MANUAL==light_flag))    CurrentState = COMMAND8_VALID;
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	2b33      	cmp	r3, #51	; 0x33
 8003df2:	d107      	bne.n	8003e04 <main+0x310>
 8003df4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003df8:	2b4d      	cmp	r3, #77	; 0x4d
 8003dfa:	d103      	bne.n	8003e04 <main+0x310>
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003e02:	e099      	b.n	8003f38 <main+0x444>
			else if((START_LIGHT_10 ==command)&&(LIGHT_MANUAL==light_flag))    CurrentState = COMMAND14_VALID;
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	2b32      	cmp	r3, #50	; 0x32
 8003e08:	d107      	bne.n	8003e1a <main+0x326>
 8003e0a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003e0e:	2b4d      	cmp	r3, #77	; 0x4d
 8003e10:	d103      	bne.n	8003e1a <main+0x326>
 8003e12:	230e      	movs	r3, #14
 8003e14:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003e18:	e08e      	b.n	8003f38 <main+0x444>

			else if((START_FAN_100  ==command)&&(FAN_MANUAL==fan_flag))        CurrentState = COMMAND9_VALID;
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	2b43      	cmp	r3, #67	; 0x43
 8003e1e:	d107      	bne.n	8003e30 <main+0x33c>
 8003e20:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003e24:	2b4d      	cmp	r3, #77	; 0x4d
 8003e26:	d103      	bne.n	8003e30 <main+0x33c>
 8003e28:	2309      	movs	r3, #9
 8003e2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003e2e:	e083      	b.n	8003f38 <main+0x444>
			else if((START_FAN_75   ==command)&&(FAN_MANUAL==fan_flag))        CurrentState = COMMAND10_VALID;
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	2b42      	cmp	r3, #66	; 0x42
 8003e34:	d107      	bne.n	8003e46 <main+0x352>
 8003e36:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003e3a:	2b4d      	cmp	r3, #77	; 0x4d
 8003e3c:	d103      	bne.n	8003e46 <main+0x352>
 8003e3e:	230a      	movs	r3, #10
 8003e40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003e44:	e078      	b.n	8003f38 <main+0x444>
			else if((START_FAN_50   ==command)&&(FAN_MANUAL==fan_flag))        CurrentState = COMMAND11_VALID;
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	2b41      	cmp	r3, #65	; 0x41
 8003e4a:	d119      	bne.n	8003e80 <main+0x38c>
 8003e4c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003e50:	2b4d      	cmp	r3, #77	; 0x4d
 8003e52:	d115      	bne.n	8003e80 <main+0x38c>
 8003e54:	230b      	movs	r3, #11
 8003e56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003e5a:	e06d      	b.n	8003f38 <main+0x444>
 8003e5c:	08004ad4 	.word	0x08004ad4
 8003e60:	08004adc 	.word	0x08004adc
 8003e64:	08004aec 	.word	0x08004aec
 8003e68:	08004afc 	.word	0x08004afc
 8003e6c:	080049cc 	.word	0x080049cc
 8003e70:	080049e0 	.word	0x080049e0
 8003e74:	002dc6c0 	.word	0x002dc6c0
 8003e78:	080049f4 	.word	0x080049f4
 8003e7c:	08004a08 	.word	0x08004a08
			else if((START_FAN_25   ==command)&&(FAN_MANUAL==fan_flag))        CurrentState = COMMAND12_VALID;
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	2b39      	cmp	r3, #57	; 0x39
 8003e84:	d107      	bne.n	8003e96 <main+0x3a2>
 8003e86:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003e8a:	2b4d      	cmp	r3, #77	; 0x4d
 8003e8c:	d103      	bne.n	8003e96 <main+0x3a2>
 8003e8e:	230c      	movs	r3, #12
 8003e90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003e94:	e050      	b.n	8003f38 <main+0x444>
			else if((STOP_FAN       ==command)&&(FAN_MANUAL==fan_flag))        CurrentState = COMMAND13_VALID;
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	2b37      	cmp	r3, #55	; 0x37
 8003e9a:	d107      	bne.n	8003eac <main+0x3b8>
 8003e9c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003ea0:	2b4d      	cmp	r3, #77	; 0x4d
 8003ea2:	d103      	bne.n	8003eac <main+0x3b8>
 8003ea4:	230d      	movs	r3, #13
 8003ea6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003eaa:	e045      	b.n	8003f38 <main+0x444>
			else if((START_FAN_10   ==command)&&(FAN_MANUAL==fan_flag))        CurrentState = COMMAND15_VALID;
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	2b38      	cmp	r3, #56	; 0x38
 8003eb0:	d107      	bne.n	8003ec2 <main+0x3ce>
 8003eb2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003eb6:	2b4d      	cmp	r3, #77	; 0x4d
 8003eb8:	d103      	bne.n	8003ec2 <main+0x3ce>
 8003eba:	230f      	movs	r3, #15
 8003ebc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003ec0:	e03a      	b.n	8003f38 <main+0x444>



			else if((CurrentState!=COMMAND1_VALID    || CurrentState!=COMMAND2_VALID     || CurrentState!=COMMAND3_VALID
 8003ec2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d12f      	bne.n	8003f2a <main+0x436>
 8003eca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d12b      	bne.n	8003f2a <main+0x436>
 8003ed2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d127      	bne.n	8003f2a <main+0x436>
					|| CurrentState!=COMMAND4_VALID  || CurrentState!=COMMAND5_VALID || CurrentState!=COMMAND6_VALID
 8003eda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d123      	bne.n	8003f2a <main+0x436>
 8003ee2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ee6:	2b05      	cmp	r3, #5
 8003ee8:	d11f      	bne.n	8003f2a <main+0x436>
 8003eea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d11b      	bne.n	8003f2a <main+0x436>
					|| CurrentState!=COMMAND7_VALID  || CurrentState!=COMMAND8_VALID || CurrentState!=COMMAND9_VALID
 8003ef2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ef6:	2b07      	cmp	r3, #7
 8003ef8:	d117      	bne.n	8003f2a <main+0x436>
 8003efa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d113      	bne.n	8003f2a <main+0x436>
 8003f02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f06:	2b09      	cmp	r3, #9
 8003f08:	d10f      	bne.n	8003f2a <main+0x436>
					|| CurrentState!=COMMAND10_VALID || CurrentState!=COMMAND11_VALID|| CurrentState!=COMMAND12_VALID
 8003f0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f0e:	2b0a      	cmp	r3, #10
 8003f10:	d10b      	bne.n	8003f2a <main+0x436>
 8003f12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f16:	2b0b      	cmp	r3, #11
 8003f18:	d107      	bne.n	8003f2a <main+0x436>
 8003f1a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	d103      	bne.n	8003f2a <main+0x436>
					|| CurrentState!=COMMAND13_VALID )&& CurrentState==CHECKING_COMMANDS_VIDALITY  )
 8003f22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f26:	2b0d      	cmp	r3, #13
 8003f28:	d006      	beq.n	8003f38 <main+0x444>
 8003f2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f2e:	2b11      	cmp	r3, #17
 8003f30:	d102      	bne.n	8003f38 <main+0x444>
				CurrentState=COMMANDS_UNVALID;
 8003f32:	2310      	movs	r3, #16
 8003f34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			command=0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	71fb      	strb	r3, [r7, #7]

			break;
 8003f3c:	f000 bcd9 	b.w	80048f2 <main+0xdfe>

		case COMMAND1_VALID:
			/*OPEN or Close Lock*/
			if(LOCK_OPEN==lock_flag)
 8003f40:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003f44:	2b4f      	cmp	r3, #79	; 0x4f
 8003f46:	d16d      	bne.n	8004024 <main+0x530>
			{
				DIO_WritePin(PINA8,HIGH);                                                /* CLOSE relay          */
 8003f48:	2101      	movs	r1, #1
 8003f4a:	2008      	movs	r0, #8
 8003f4c:	f7fd fc66 	bl	800181c <DIO_WritePin>
				lock_flag=LOCK_CLOSE;                                                    /* CHANGE LOCK Flag to CLOSE  */
 8003f50:	2343      	movs	r3, #67	; 0x43
 8003f52:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

				LCD_WriteStringXY(0, 0, SCREEN4L0);                                      /* DOOR Opened Screen   */
 8003f56:	4ad3      	ldr	r2, [pc, #844]	; (80042a4 <main+0x7b0>)
 8003f58:	2100      	movs	r1, #0
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	f7fd ff2e 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteStringXY(1, 0, SCREEN4L1_2);                                    /* DOOR Opened Screen   */
 8003f60:	4ad1      	ldr	r2, [pc, #836]	; (80042a8 <main+0x7b4>)
 8003f62:	2100      	movs	r1, #0
 8003f64:	2001      	movs	r0, #1
 8003f66:	f7fd ff29 	bl	8001dbc <LCD_WriteStringXY>
				STK_voidSetBusyWait(Events_Screen_Delay);                                /* DOOR Opened Screen delay */
 8003f6a:	48d0      	ldr	r0, [pc, #832]	; (80042ac <main+0x7b8>)
 8003f6c:	f7fe f82c 	bl	8001fc8 <STK_voidSetBusyWait>
				LCD_WriteStringXY(0, 0, SCREEN2L0);                                      /* MAIN Screen   */
 8003f70:	4acf      	ldr	r2, [pc, #828]	; (80042b0 <main+0x7bc>)
 8003f72:	2100      	movs	r1, #0
 8003f74:	2000      	movs	r0, #0
 8003f76:	f7fd ff21 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteStringXY(1, 0, SCREEN2L1);                                      /* MAIN Screen   */
 8003f7a:	4ace      	ldr	r2, [pc, #824]	; (80042b4 <main+0x7c0>)
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	2001      	movs	r0, #1
 8003f80:	f7fd ff1c 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteCharXY(0, 14,lock_flag);                                        /* Update Lock Flag   */
 8003f84:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003f88:	461a      	mov	r2, r3
 8003f8a:	210e      	movs	r1, #14
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	f7fd fefe 	bl	8001d8e <LCD_WriteCharXY>
				LCD_WriteCharXY(1, 2,light_flag);                                        /* Update light Flag   */
 8003f92:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003f96:	461a      	mov	r2, r3
 8003f98:	2102      	movs	r1, #2
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	f7fd fef7 	bl	8001d8e <LCD_WriteCharXY>
				if(LIGHT_MANUAL==light_flag){LCD_WriteNumberXY(1, 3,light_last_manual);} /* Update LIGHT PERCENTAGE for MANUAL  */
 8003fa0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003fa4:	2b4d      	cmp	r3, #77	; 0x4d
 8003fa6:	d10a      	bne.n	8003fbe <main+0x4ca>
 8003fa8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003fac:	f04f 0400 	mov.w	r4, #0
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4623      	mov	r3, r4
 8003fb4:	2103      	movs	r1, #3
 8003fb6:	2001      	movs	r0, #1
 8003fb8:	f7fd ff15 	bl	8001de6 <LCD_WriteNumberXY>
 8003fbc:	e00d      	b.n	8003fda <main+0x4e6>
				else if(LIGHT_AUTO==light_flag){LCD_WriteNumberXY(1, 3,ldr_Read);}       /* Update LIGHT PERCENTAGE for AUTO  */
 8003fbe:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003fc2:	2b41      	cmp	r3, #65	; 0x41
 8003fc4:	d109      	bne.n	8003fda <main+0x4e6>
 8003fc6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003fca:	f04f 0400 	mov.w	r4, #0
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4623      	mov	r3, r4
 8003fd2:	2103      	movs	r1, #3
 8003fd4:	2001      	movs	r0, #1
 8003fd6:	f7fd ff06 	bl	8001de6 <LCD_WriteNumberXY>
				LCD_WriteCharXY(1, 10,fan_flag);                                         /* Update FAN Flag   */
 8003fda:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003fde:	461a      	mov	r2, r3
 8003fe0:	210a      	movs	r1, #10
 8003fe2:	2001      	movs	r0, #1
 8003fe4:	f7fd fed3 	bl	8001d8e <LCD_WriteCharXY>
				if(FAN_MANUAL==fan_flag){LCD_WriteNumberXY(1, 11,fan_last_manual);}      /* Update FAN PERCENTAGE for MANUAL  */
 8003fe8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003fec:	2b4d      	cmp	r3, #77	; 0x4d
 8003fee:	d10a      	bne.n	8004006 <main+0x512>
 8003ff0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003ff4:	f04f 0400 	mov.w	r4, #0
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	210b      	movs	r1, #11
 8003ffe:	2001      	movs	r0, #1
 8004000:	f7fd fef1 	bl	8001de6 <LCD_WriteNumberXY>
 8004004:	e07f      	b.n	8004106 <main+0x612>
				else if(FAN_AUTO==fan_flag){LCD_WriteNumberXY(1, 11,pot_Read);}          /* Update FAN PERCENTAGE for AUTO  */
 8004006:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800400a:	2b41      	cmp	r3, #65	; 0x41
 800400c:	d17b      	bne.n	8004106 <main+0x612>
 800400e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004012:	f04f 0400 	mov.w	r4, #0
 8004016:	461a      	mov	r2, r3
 8004018:	4623      	mov	r3, r4
 800401a:	210b      	movs	r1, #11
 800401c:	2001      	movs	r0, #1
 800401e:	f7fd fee2 	bl	8001de6 <LCD_WriteNumberXY>
 8004022:	e070      	b.n	8004106 <main+0x612>
			}
			else if (LOCK_CLOSE==lock_flag)
 8004024:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004028:	2b43      	cmp	r3, #67	; 0x43
 800402a:	d16c      	bne.n	8004106 <main+0x612>
			{
				DIO_WritePin(PINA8,LOW);                                                 /* OPEN relay          */
 800402c:	2100      	movs	r1, #0
 800402e:	2008      	movs	r0, #8
 8004030:	f7fd fbf4 	bl	800181c <DIO_WritePin>
				lock_flag=LOCK_OPEN;                                                     /* CHANGE LOCK Flag to OPEN  */
 8004034:	234f      	movs	r3, #79	; 0x4f
 8004036:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

				LCD_WriteStringXY(0, 0, SCREEN4L0);                                      /* DOOR Closed Screen   */
 800403a:	4a9a      	ldr	r2, [pc, #616]	; (80042a4 <main+0x7b0>)
 800403c:	2100      	movs	r1, #0
 800403e:	2000      	movs	r0, #0
 8004040:	f7fd febc 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteStringXY(1, 0, SCREEN4L1);                                      /* DOOR Closed Screen   */
 8004044:	4a9c      	ldr	r2, [pc, #624]	; (80042b8 <main+0x7c4>)
 8004046:	2100      	movs	r1, #0
 8004048:	2001      	movs	r0, #1
 800404a:	f7fd feb7 	bl	8001dbc <LCD_WriteStringXY>
				STK_voidSetBusyWait(Events_Screen_Delay);                                /* DOOR Closed Screen delay */
 800404e:	4897      	ldr	r0, [pc, #604]	; (80042ac <main+0x7b8>)
 8004050:	f7fd ffba 	bl	8001fc8 <STK_voidSetBusyWait>
				LCD_WriteStringXY(0, 0, SCREEN2L0);                                      /* MAIN Screen   */
 8004054:	4a96      	ldr	r2, [pc, #600]	; (80042b0 <main+0x7bc>)
 8004056:	2100      	movs	r1, #0
 8004058:	2000      	movs	r0, #0
 800405a:	f7fd feaf 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteStringXY(1, 0, SCREEN2L1);                                      /* MAIN Screen   */
 800405e:	4a95      	ldr	r2, [pc, #596]	; (80042b4 <main+0x7c0>)
 8004060:	2100      	movs	r1, #0
 8004062:	2001      	movs	r0, #1
 8004064:	f7fd feaa 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteCharXY(0, 14,lock_flag);                                        /* Update Lock Flag   */
 8004068:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800406c:	461a      	mov	r2, r3
 800406e:	210e      	movs	r1, #14
 8004070:	2000      	movs	r0, #0
 8004072:	f7fd fe8c 	bl	8001d8e <LCD_WriteCharXY>
				LCD_WriteCharXY(1, 2,light_flag);                                        /* Update light Flag   */
 8004076:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800407a:	461a      	mov	r2, r3
 800407c:	2102      	movs	r1, #2
 800407e:	2001      	movs	r0, #1
 8004080:	f7fd fe85 	bl	8001d8e <LCD_WriteCharXY>
				if(LIGHT_MANUAL==light_flag){LCD_WriteNumberXY(1, 3,light_last_manual);} /* Update LIGHT PERCENTAGE for MANUAL  */
 8004084:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004088:	2b4d      	cmp	r3, #77	; 0x4d
 800408a:	d10a      	bne.n	80040a2 <main+0x5ae>
 800408c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004090:	f04f 0400 	mov.w	r4, #0
 8004094:	461a      	mov	r2, r3
 8004096:	4623      	mov	r3, r4
 8004098:	2103      	movs	r1, #3
 800409a:	2001      	movs	r0, #1
 800409c:	f7fd fea3 	bl	8001de6 <LCD_WriteNumberXY>
 80040a0:	e00d      	b.n	80040be <main+0x5ca>
				else if(LIGHT_AUTO==light_flag){LCD_WriteNumberXY(1, 3,ldr_Read);}       /* Update LIGHT PERCENTAGE for AUTO  */
 80040a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80040a6:	2b41      	cmp	r3, #65	; 0x41
 80040a8:	d109      	bne.n	80040be <main+0x5ca>
 80040aa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80040ae:	f04f 0400 	mov.w	r4, #0
 80040b2:	461a      	mov	r2, r3
 80040b4:	4623      	mov	r3, r4
 80040b6:	2103      	movs	r1, #3
 80040b8:	2001      	movs	r0, #1
 80040ba:	f7fd fe94 	bl	8001de6 <LCD_WriteNumberXY>
				LCD_WriteCharXY(1, 10,fan_flag);                                         /* Update FAN Flag   */
 80040be:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80040c2:	461a      	mov	r2, r3
 80040c4:	210a      	movs	r1, #10
 80040c6:	2001      	movs	r0, #1
 80040c8:	f7fd fe61 	bl	8001d8e <LCD_WriteCharXY>
				if(FAN_MANUAL==fan_flag){LCD_WriteNumberXY(1, 11,fan_last_manual);}      /* Update FAN PERCENTAGE for MANUAL  */
 80040cc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80040d0:	2b4d      	cmp	r3, #77	; 0x4d
 80040d2:	d10a      	bne.n	80040ea <main+0x5f6>
 80040d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80040d8:	f04f 0400 	mov.w	r4, #0
 80040dc:	461a      	mov	r2, r3
 80040de:	4623      	mov	r3, r4
 80040e0:	210b      	movs	r1, #11
 80040e2:	2001      	movs	r0, #1
 80040e4:	f7fd fe7f 	bl	8001de6 <LCD_WriteNumberXY>
 80040e8:	e00d      	b.n	8004106 <main+0x612>
				else if(FAN_AUTO==fan_flag){LCD_WriteNumberXY(1, 11,pot_Read);}          /* Update FAN PERCENTAGE for AUTO  */
 80040ea:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80040ee:	2b41      	cmp	r3, #65	; 0x41
 80040f0:	d109      	bne.n	8004106 <main+0x612>
 80040f2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80040f6:	f04f 0400 	mov.w	r4, #0
 80040fa:	461a      	mov	r2, r3
 80040fc:	4623      	mov	r3, r4
 80040fe:	210b      	movs	r1, #11
 8004100:	2001      	movs	r0, #1
 8004102:	f7fd fe70 	bl	8001de6 <LCD_WriteNumberXY>


			}
			CurrentState=RECIVING_ADC_READINGS;
 8004106:	2312      	movs	r3, #18
 8004108:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 800410c:	e3f1      	b.n	80048f2 <main+0xdfe>
		case COMMAND2_VALID:
			/*Fan Auto or Manual*/
			if(FAN_AUTO==fan_flag)
 800410e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004112:	2b41      	cmp	r3, #65	; 0x41
 8004114:	d15f      	bne.n	80041d6 <main+0x6e2>
			{
				//fan_last_manual  make pwm of tim3 ch4 at last manual value
				PWM3_CH3.duty=fan_last_manual;
 8004116:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800411a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				timer_voidGPWM(&PWM3_CH3);
 800411e:	f107 0320 	add.w	r3, r7, #32
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe f8a0 	bl	8002268 <timer_voidGPWM>
				fan_flag=FAN_MANUAL;
 8004128:	234d      	movs	r3, #77	; 0x4d
 800412a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				LCD_WriteStringXY(0, 0, SCREEN5L0);                                      /* FAN MANUAL Screen   */
 800412e:	4a63      	ldr	r2, [pc, #396]	; (80042bc <main+0x7c8>)
 8004130:	2100      	movs	r1, #0
 8004132:	2000      	movs	r0, #0
 8004134:	f7fd fe42 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteStringXY(1, 0, SCREEN5L1);                                      /* FAN MANUAL Screen   */
 8004138:	4a61      	ldr	r2, [pc, #388]	; (80042c0 <main+0x7cc>)
 800413a:	2100      	movs	r1, #0
 800413c:	2001      	movs	r0, #1
 800413e:	f7fd fe3d 	bl	8001dbc <LCD_WriteStringXY>
				STK_voidSetBusyWait(Events_Screen_Delay);                                /* FAN MANUAL Screen delay */
 8004142:	485a      	ldr	r0, [pc, #360]	; (80042ac <main+0x7b8>)
 8004144:	f7fd ff40 	bl	8001fc8 <STK_voidSetBusyWait>
				LCD_WriteStringXY(0, 0, SCREEN2L0);                                      /* MAIN Screen   */
 8004148:	4a59      	ldr	r2, [pc, #356]	; (80042b0 <main+0x7bc>)
 800414a:	2100      	movs	r1, #0
 800414c:	2000      	movs	r0, #0
 800414e:	f7fd fe35 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteStringXY(1, 0, SCREEN2L1);                                      /* MAIN Screen   */
 8004152:	4a58      	ldr	r2, [pc, #352]	; (80042b4 <main+0x7c0>)
 8004154:	2100      	movs	r1, #0
 8004156:	2001      	movs	r0, #1
 8004158:	f7fd fe30 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteCharXY(0, 14,lock_flag);                                        /* Update Lock Flag   */
 800415c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004160:	461a      	mov	r2, r3
 8004162:	210e      	movs	r1, #14
 8004164:	2000      	movs	r0, #0
 8004166:	f7fd fe12 	bl	8001d8e <LCD_WriteCharXY>
				LCD_WriteCharXY(1, 2,light_flag);                                        /* Update light Flag   */
 800416a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800416e:	461a      	mov	r2, r3
 8004170:	2102      	movs	r1, #2
 8004172:	2001      	movs	r0, #1
 8004174:	f7fd fe0b 	bl	8001d8e <LCD_WriteCharXY>
				if(LIGHT_MANUAL==light_flag){LCD_WriteNumberXY(1, 3,light_last_manual);} /* Update LIGHT PERCENTAGE for MANUAL  */
 8004178:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800417c:	2b4d      	cmp	r3, #77	; 0x4d
 800417e:	d10a      	bne.n	8004196 <main+0x6a2>
 8004180:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004184:	f04f 0400 	mov.w	r4, #0
 8004188:	461a      	mov	r2, r3
 800418a:	4623      	mov	r3, r4
 800418c:	2103      	movs	r1, #3
 800418e:	2001      	movs	r0, #1
 8004190:	f7fd fe29 	bl	8001de6 <LCD_WriteNumberXY>
 8004194:	e00d      	b.n	80041b2 <main+0x6be>
				else if(LIGHT_AUTO==light_flag){LCD_WriteNumberXY(1, 3,ldr_Read);}       /* Update LIGHT PERCENTAGE for AUTO  */
 8004196:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800419a:	2b41      	cmp	r3, #65	; 0x41
 800419c:	d109      	bne.n	80041b2 <main+0x6be>
 800419e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80041a2:	f04f 0400 	mov.w	r4, #0
 80041a6:	461a      	mov	r2, r3
 80041a8:	4623      	mov	r3, r4
 80041aa:	2103      	movs	r1, #3
 80041ac:	2001      	movs	r0, #1
 80041ae:	f7fd fe1a 	bl	8001de6 <LCD_WriteNumberXY>
				LCD_WriteCharXY(1, 10,fan_flag);                                         /* Update FAN Flag   */
 80041b2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80041b6:	461a      	mov	r2, r3
 80041b8:	210a      	movs	r1, #10
 80041ba:	2001      	movs	r0, #1
 80041bc:	f7fd fde7 	bl	8001d8e <LCD_WriteCharXY>
				LCD_WriteNumberXY(1, 11,fan_last_manual);                                /* Update FAN PERCENTAGE for MANUAL  */
 80041c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80041c4:	f04f 0400 	mov.w	r4, #0
 80041c8:	461a      	mov	r2, r3
 80041ca:	4623      	mov	r3, r4
 80041cc:	210b      	movs	r1, #11
 80041ce:	2001      	movs	r0, #1
 80041d0:	f7fd fe09 	bl	8001de6 <LCD_WriteNumberXY>
 80041d4:	e062      	b.n	800429c <main+0x7a8>
			}
			else if (FAN_MANUAL==fan_flag)
 80041d6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80041da:	2b4d      	cmp	r3, #77	; 0x4d
 80041dc:	d15e      	bne.n	800429c <main+0x7a8>
			{
				//make pwm of tim3 ch3 at the adc READ Equivalent
				PWM3_CH3.duty=pot_Read;
 80041de:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80041e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				timer_voidGPWM(&PWM3_CH3);
 80041e6:	f107 0320 	add.w	r3, r7, #32
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe f83c 	bl	8002268 <timer_voidGPWM>
				fan_flag=FAN_AUTO;
 80041f0:	2341      	movs	r3, #65	; 0x41
 80041f2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				LCD_WriteStringXY(0, 0, SCREEN5L0);                                      /* FAN AUTO Screen   */
 80041f6:	4a31      	ldr	r2, [pc, #196]	; (80042bc <main+0x7c8>)
 80041f8:	2100      	movs	r1, #0
 80041fa:	2000      	movs	r0, #0
 80041fc:	f7fd fdde 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteStringXY(1, 0, SCREEN5L1_2);                                    /* FAN AUTO Screen   */
 8004200:	4a30      	ldr	r2, [pc, #192]	; (80042c4 <main+0x7d0>)
 8004202:	2100      	movs	r1, #0
 8004204:	2001      	movs	r0, #1
 8004206:	f7fd fdd9 	bl	8001dbc <LCD_WriteStringXY>
				STK_voidSetBusyWait(Events_Screen_Delay);                                /* FAN AUTO Screen delay */
 800420a:	4828      	ldr	r0, [pc, #160]	; (80042ac <main+0x7b8>)
 800420c:	f7fd fedc 	bl	8001fc8 <STK_voidSetBusyWait>
				LCD_WriteStringXY(0, 0, SCREEN2L0);                                      /* MAIN Screen   */
 8004210:	4a27      	ldr	r2, [pc, #156]	; (80042b0 <main+0x7bc>)
 8004212:	2100      	movs	r1, #0
 8004214:	2000      	movs	r0, #0
 8004216:	f7fd fdd1 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteStringXY(1, 0, SCREEN2L1);                                      /* MAIN Screen   */
 800421a:	4a26      	ldr	r2, [pc, #152]	; (80042b4 <main+0x7c0>)
 800421c:	2100      	movs	r1, #0
 800421e:	2001      	movs	r0, #1
 8004220:	f7fd fdcc 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteCharXY(0, 14,lock_flag);                                        /* Update Lock Flag   */
 8004224:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004228:	461a      	mov	r2, r3
 800422a:	210e      	movs	r1, #14
 800422c:	2000      	movs	r0, #0
 800422e:	f7fd fdae 	bl	8001d8e <LCD_WriteCharXY>
				LCD_WriteCharXY(1, 2,light_flag);                                        /* Update light Flag   */
 8004232:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004236:	461a      	mov	r2, r3
 8004238:	2102      	movs	r1, #2
 800423a:	2001      	movs	r0, #1
 800423c:	f7fd fda7 	bl	8001d8e <LCD_WriteCharXY>
				if(LIGHT_MANUAL==light_flag){LCD_WriteNumberXY(1, 3,light_last_manual);} /* Update LIGHT PERCENTAGE for MANUAL  */
 8004240:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004244:	2b4d      	cmp	r3, #77	; 0x4d
 8004246:	d10a      	bne.n	800425e <main+0x76a>
 8004248:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800424c:	f04f 0400 	mov.w	r4, #0
 8004250:	461a      	mov	r2, r3
 8004252:	4623      	mov	r3, r4
 8004254:	2103      	movs	r1, #3
 8004256:	2001      	movs	r0, #1
 8004258:	f7fd fdc5 	bl	8001de6 <LCD_WriteNumberXY>
 800425c:	e00d      	b.n	800427a <main+0x786>
				else if(LIGHT_AUTO==light_flag){LCD_WriteNumberXY(1, 3,ldr_Read);}       /* Update LIGHT PERCENTAGE for AUTO  */
 800425e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004262:	2b41      	cmp	r3, #65	; 0x41
 8004264:	d109      	bne.n	800427a <main+0x786>
 8004266:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800426a:	f04f 0400 	mov.w	r4, #0
 800426e:	461a      	mov	r2, r3
 8004270:	4623      	mov	r3, r4
 8004272:	2103      	movs	r1, #3
 8004274:	2001      	movs	r0, #1
 8004276:	f7fd fdb6 	bl	8001de6 <LCD_WriteNumberXY>
				LCD_WriteCharXY(1, 10,fan_flag);                                         /* Update FAN Flag   */
 800427a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800427e:	461a      	mov	r2, r3
 8004280:	210a      	movs	r1, #10
 8004282:	2001      	movs	r0, #1
 8004284:	f7fd fd83 	bl	8001d8e <LCD_WriteCharXY>
				LCD_WriteNumberXY(1, 11,pot_Read);                                       /* Update FAN PERCENTAGE for AUTO  */
 8004288:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800428c:	f04f 0400 	mov.w	r4, #0
 8004290:	461a      	mov	r2, r3
 8004292:	4623      	mov	r3, r4
 8004294:	210b      	movs	r1, #11
 8004296:	2001      	movs	r0, #1
 8004298:	f7fd fda5 	bl	8001de6 <LCD_WriteNumberXY>
			}
			CurrentState=RECIVING_ADC_READINGS;
 800429c:	2312      	movs	r3, #18
 800429e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 80042a2:	e326      	b.n	80048f2 <main+0xdfe>
 80042a4:	08004a1c 	.word	0x08004a1c
 80042a8:	08004a30 	.word	0x08004a30
 80042ac:	000f4240 	.word	0x000f4240
 80042b0:	080049f4 	.word	0x080049f4
 80042b4:	08004a08 	.word	0x08004a08
 80042b8:	08004a44 	.word	0x08004a44
 80042bc:	08004a58 	.word	0x08004a58
 80042c0:	08004a6c 	.word	0x08004a6c
 80042c4:	08004a80 	.word	0x08004a80
		case COMMAND3_VALID:
			if(LIGHT_AUTO==light_flag)
 80042c8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80042cc:	2b41      	cmp	r3, #65	; 0x41
 80042ce:	d162      	bne.n	8004396 <main+0x8a2>
			{
				//Light_last_manual  make pwm of tim3 ch4 at last manual value
				PWM3_CH4.duty=light_last_manual;
 80042d0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80042d4:	773b      	strb	r3, [r7, #28]
				timer_voidGPWM(&PWM3_CH4);
 80042d6:	f107 0310 	add.w	r3, r7, #16
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fd ffc4 	bl	8002268 <timer_voidGPWM>
				light_flag=LIGHT_MANUAL;
 80042e0:	234d      	movs	r3, #77	; 0x4d
 80042e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

				LCD_WriteStringXY(0, 0, SCREEN5L0_2);                                    /* LIGHTS MANUAL Screen   */
 80042e6:	4aef      	ldr	r2, [pc, #956]	; (80046a4 <main+0xbb0>)
 80042e8:	2100      	movs	r1, #0
 80042ea:	2000      	movs	r0, #0
 80042ec:	f7fd fd66 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteStringXY(1, 0, SCREEN5L1);                                      /* LIGHTS MANUAL Screen   */
 80042f0:	4aed      	ldr	r2, [pc, #948]	; (80046a8 <main+0xbb4>)
 80042f2:	2100      	movs	r1, #0
 80042f4:	2001      	movs	r0, #1
 80042f6:	f7fd fd61 	bl	8001dbc <LCD_WriteStringXY>
				STK_voidSetBusyWait(Events_Screen_Delay);                                /* LIGHTS MANUAL Screen delay */
 80042fa:	48ec      	ldr	r0, [pc, #944]	; (80046ac <main+0xbb8>)
 80042fc:	f7fd fe64 	bl	8001fc8 <STK_voidSetBusyWait>
				LCD_WriteStringXY(0, 0, SCREEN2L0);                                      /* MAIN Screen   */
 8004300:	4aeb      	ldr	r2, [pc, #940]	; (80046b0 <main+0xbbc>)
 8004302:	2100      	movs	r1, #0
 8004304:	2000      	movs	r0, #0
 8004306:	f7fd fd59 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteStringXY(1, 0, SCREEN2L1);                                      /* MAIN Screen   */
 800430a:	4aea      	ldr	r2, [pc, #936]	; (80046b4 <main+0xbc0>)
 800430c:	2100      	movs	r1, #0
 800430e:	2001      	movs	r0, #1
 8004310:	f7fd fd54 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteCharXY(0, 14,lock_flag);                                        /* Update Lock Flag   */
 8004314:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004318:	461a      	mov	r2, r3
 800431a:	210e      	movs	r1, #14
 800431c:	2000      	movs	r0, #0
 800431e:	f7fd fd36 	bl	8001d8e <LCD_WriteCharXY>
				LCD_WriteCharXY(1, 2,light_flag);                                        /* Update light Flag   */
 8004322:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004326:	461a      	mov	r2, r3
 8004328:	2102      	movs	r1, #2
 800432a:	2001      	movs	r0, #1
 800432c:	f7fd fd2f 	bl	8001d8e <LCD_WriteCharXY>
				LCD_WriteNumberXY(1, 3,light_last_manual);                               /* Update LIGHT PERCENTAGE for MANUAL  */
 8004330:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004334:	f04f 0400 	mov.w	r4, #0
 8004338:	461a      	mov	r2, r3
 800433a:	4623      	mov	r3, r4
 800433c:	2103      	movs	r1, #3
 800433e:	2001      	movs	r0, #1
 8004340:	f7fd fd51 	bl	8001de6 <LCD_WriteNumberXY>
				LCD_WriteCharXY(1, 10,fan_flag);                                         /* Update FAN Flag   */
 8004344:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004348:	461a      	mov	r2, r3
 800434a:	210a      	movs	r1, #10
 800434c:	2001      	movs	r0, #1
 800434e:	f7fd fd1e 	bl	8001d8e <LCD_WriteCharXY>
				if(FAN_MANUAL==fan_flag){LCD_WriteNumberXY(1, 11,fan_last_manual);}      /* Update FAN PERCENTAGE for MANUAL  */
 8004352:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004356:	2b4d      	cmp	r3, #77	; 0x4d
 8004358:	d109      	bne.n	800436e <main+0x87a>
 800435a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800435e:	f04f 0400 	mov.w	r4, #0
 8004362:	461a      	mov	r2, r3
 8004364:	4623      	mov	r3, r4
 8004366:	210b      	movs	r1, #11
 8004368:	2001      	movs	r0, #1
 800436a:	f7fd fd3c 	bl	8001de6 <LCD_WriteNumberXY>
				if(FAN_AUTO==fan_flag){LCD_WriteNumberXY(1, 11,pot_Read);LCD_WriteCharXY(1,5,' ');}               /* Update FAN PERCENTAGE for AUTO  */
 800436e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004372:	2b41      	cmp	r3, #65	; 0x41
 8004374:	d175      	bne.n	8004462 <main+0x96e>
 8004376:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800437a:	f04f 0400 	mov.w	r4, #0
 800437e:	461a      	mov	r2, r3
 8004380:	4623      	mov	r3, r4
 8004382:	210b      	movs	r1, #11
 8004384:	2001      	movs	r0, #1
 8004386:	f7fd fd2e 	bl	8001de6 <LCD_WriteNumberXY>
 800438a:	2220      	movs	r2, #32
 800438c:	2105      	movs	r1, #5
 800438e:	2001      	movs	r0, #1
 8004390:	f7fd fcfd 	bl	8001d8e <LCD_WriteCharXY>
 8004394:	e065      	b.n	8004462 <main+0x96e>
			}
			else if (LIGHT_MANUAL==light_flag)
 8004396:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800439a:	2b4d      	cmp	r3, #77	; 0x4d
 800439c:	d161      	bne.n	8004462 <main+0x96e>
			{
				//make pwm of tim3 ch4 at the adc READ Equivalent
				PWM3_CH4.duty=ldr_Read;
 800439e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80043a2:	773b      	strb	r3, [r7, #28]
				timer_voidGPWM(&PWM3_CH4);
 80043a4:	f107 0310 	add.w	r3, r7, #16
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fd ff5d 	bl	8002268 <timer_voidGPWM>
				light_flag=LIGHT_AUTO;
 80043ae:	2341      	movs	r3, #65	; 0x41
 80043b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

				LCD_WriteStringXY(0, 0, SCREEN5L0_2);                                    /* LIGHTS AUTO Screen   */
 80043b4:	4abb      	ldr	r2, [pc, #748]	; (80046a4 <main+0xbb0>)
 80043b6:	2100      	movs	r1, #0
 80043b8:	2000      	movs	r0, #0
 80043ba:	f7fd fcff 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteStringXY(1, 0, SCREEN5L1_2);                                    /* LIGHTS AUTO Screen   */
 80043be:	4abe      	ldr	r2, [pc, #760]	; (80046b8 <main+0xbc4>)
 80043c0:	2100      	movs	r1, #0
 80043c2:	2001      	movs	r0, #1
 80043c4:	f7fd fcfa 	bl	8001dbc <LCD_WriteStringXY>
				STK_voidSetBusyWait(Events_Screen_Delay);                                /* LIGHTS AUTO Screen delay */
 80043c8:	48b8      	ldr	r0, [pc, #736]	; (80046ac <main+0xbb8>)
 80043ca:	f7fd fdfd 	bl	8001fc8 <STK_voidSetBusyWait>
				LCD_WriteStringXY(0, 0, SCREEN2L0);                                      /* MAIN Screen   */
 80043ce:	4ab8      	ldr	r2, [pc, #736]	; (80046b0 <main+0xbbc>)
 80043d0:	2100      	movs	r1, #0
 80043d2:	2000      	movs	r0, #0
 80043d4:	f7fd fcf2 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteStringXY(1, 0, SCREEN2L1);                                      /* MAIN Screen   */
 80043d8:	4ab6      	ldr	r2, [pc, #728]	; (80046b4 <main+0xbc0>)
 80043da:	2100      	movs	r1, #0
 80043dc:	2001      	movs	r0, #1
 80043de:	f7fd fced 	bl	8001dbc <LCD_WriteStringXY>
				LCD_WriteCharXY(0, 14,lock_flag);                                        /* Update Lock Flag   */
 80043e2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80043e6:	461a      	mov	r2, r3
 80043e8:	210e      	movs	r1, #14
 80043ea:	2000      	movs	r0, #0
 80043ec:	f7fd fccf 	bl	8001d8e <LCD_WriteCharXY>
				LCD_WriteCharXY(1, 2,light_flag);                                        /* Update light Flag   */
 80043f0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80043f4:	461a      	mov	r2, r3
 80043f6:	2102      	movs	r1, #2
 80043f8:	2001      	movs	r0, #1
 80043fa:	f7fd fcc8 	bl	8001d8e <LCD_WriteCharXY>
				LCD_WriteNumberXY(1, 3,ldr_Read);                                        /* Update LIGHT PERCENTAGE for AUTO  */
 80043fe:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8004402:	f04f 0400 	mov.w	r4, #0
 8004406:	461a      	mov	r2, r3
 8004408:	4623      	mov	r3, r4
 800440a:	2103      	movs	r1, #3
 800440c:	2001      	movs	r0, #1
 800440e:	f7fd fcea 	bl	8001de6 <LCD_WriteNumberXY>
				LCD_WriteCharXY(1, 10,fan_flag);                                         /* Update FAN Flag   */
 8004412:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004416:	461a      	mov	r2, r3
 8004418:	210a      	movs	r1, #10
 800441a:	2001      	movs	r0, #1
 800441c:	f7fd fcb7 	bl	8001d8e <LCD_WriteCharXY>
				if(FAN_MANUAL==fan_flag){LCD_WriteNumberXY(1, 11,fan_last_manual);}      /* Update FAN PERCENTAGE for MANUAL  */
 8004420:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004424:	2b4d      	cmp	r3, #77	; 0x4d
 8004426:	d109      	bne.n	800443c <main+0x948>
 8004428:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800442c:	f04f 0400 	mov.w	r4, #0
 8004430:	461a      	mov	r2, r3
 8004432:	4623      	mov	r3, r4
 8004434:	210b      	movs	r1, #11
 8004436:	2001      	movs	r0, #1
 8004438:	f7fd fcd5 	bl	8001de6 <LCD_WriteNumberXY>
				if(FAN_AUTO==fan_flag){LCD_WriteNumberXY(1, 11,pot_Read);LCD_WriteCharXY(1,5,' ');}               /* Update FAN PERCENTAGE for AUTO  */
 800443c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004440:	2b41      	cmp	r3, #65	; 0x41
 8004442:	d10e      	bne.n	8004462 <main+0x96e>
 8004444:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004448:	f04f 0400 	mov.w	r4, #0
 800444c:	461a      	mov	r2, r3
 800444e:	4623      	mov	r3, r4
 8004450:	210b      	movs	r1, #11
 8004452:	2001      	movs	r0, #1
 8004454:	f7fd fcc7 	bl	8001de6 <LCD_WriteNumberXY>
 8004458:	2220      	movs	r2, #32
 800445a:	2105      	movs	r1, #5
 800445c:	2001      	movs	r0, #1
 800445e:	f7fd fc96 	bl	8001d8e <LCD_WriteCharXY>

			}
			CurrentState=RECIVING_ADC_READINGS;
 8004462:	2312      	movs	r3, #18
 8004464:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8004468:	e243      	b.n	80048f2 <main+0xdfe>
		case COMMAND4_VALID:
			/*stop Lights*/
			//make pwm of tim3 ch4 at 0
			PWM3_CH4.duty=0;
 800446a:	2300      	movs	r3, #0
 800446c:	773b      	strb	r3, [r7, #28]
			timer_voidGPWM(&PWM3_CH4);
 800446e:	f107 0310 	add.w	r3, r7, #16
 8004472:	4618      	mov	r0, r3
 8004474:	f7fd fef8 	bl	8002268 <timer_voidGPWM>
			light_last_manual=0;
 8004478:	2300      	movs	r3, #0
 800447a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			LCD_WriteNumberXY(1, 3,light_last_manual);                               /* Update LIGHT PERCENTAGE for MANUAL  */
 800447e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004482:	f04f 0400 	mov.w	r4, #0
 8004486:	461a      	mov	r2, r3
 8004488:	4623      	mov	r3, r4
 800448a:	2103      	movs	r1, #3
 800448c:	2001      	movs	r0, #1
 800448e:	f7fd fcaa 	bl	8001de6 <LCD_WriteNumberXY>
			LCD_WriteStringXY(1,4,"  ");
 8004492:	4a8a      	ldr	r2, [pc, #552]	; (80046bc <main+0xbc8>)
 8004494:	2104      	movs	r1, #4
 8004496:	2001      	movs	r0, #1
 8004498:	f7fd fc90 	bl	8001dbc <LCD_WriteStringXY>
			CurrentState=RECIVING_ADC_READINGS;
 800449c:	2312      	movs	r3, #18
 800449e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 80044a2:	e226      	b.n	80048f2 <main+0xdfe>
		case COMMAND5_VALID:
			/*START_LIGHT_100*/
			//make pwm of tim3 ch4 at 100
			PWM3_CH4.duty=100;
 80044a4:	2364      	movs	r3, #100	; 0x64
 80044a6:	773b      	strb	r3, [r7, #28]
			timer_voidGPWM(&PWM3_CH4);
 80044a8:	f107 0310 	add.w	r3, r7, #16
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fd fedb 	bl	8002268 <timer_voidGPWM>
			light_last_manual=100;
 80044b2:	2364      	movs	r3, #100	; 0x64
 80044b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			LCD_WriteNumberXY(1, 3,light_last_manual);                               /* Update LIGHT PERCENTAGE for MANUAL  */
 80044b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80044bc:	f04f 0400 	mov.w	r4, #0
 80044c0:	461a      	mov	r2, r3
 80044c2:	4623      	mov	r3, r4
 80044c4:	2103      	movs	r1, #3
 80044c6:	2001      	movs	r0, #1
 80044c8:	f7fd fc8d 	bl	8001de6 <LCD_WriteNumberXY>

			CurrentState=RECIVING_ADC_READINGS;
 80044cc:	2312      	movs	r3, #18
 80044ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 80044d2:	e20e      	b.n	80048f2 <main+0xdfe>
		case COMMAND6_VALID:
			/*START_LIGHT_75*/
			//make pwm of tim3 ch4 at 75
			PWM3_CH4.duty=75;
 80044d4:	234b      	movs	r3, #75	; 0x4b
 80044d6:	773b      	strb	r3, [r7, #28]
			timer_voidGPWM(&PWM3_CH4);
 80044d8:	f107 0310 	add.w	r3, r7, #16
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fd fec3 	bl	8002268 <timer_voidGPWM>
			light_last_manual=75;
 80044e2:	234b      	movs	r3, #75	; 0x4b
 80044e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			LCD_WriteNumberXY(1, 3,light_last_manual);                               /* Update LIGHT PERCENTAGE for MANUAL  */
 80044e8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80044ec:	f04f 0400 	mov.w	r4, #0
 80044f0:	461a      	mov	r2, r3
 80044f2:	4623      	mov	r3, r4
 80044f4:	2103      	movs	r1, #3
 80044f6:	2001      	movs	r0, #1
 80044f8:	f7fd fc75 	bl	8001de6 <LCD_WriteNumberXY>
			LCD_WriteCharXY(1,5,' ');
 80044fc:	2220      	movs	r2, #32
 80044fe:	2105      	movs	r1, #5
 8004500:	2001      	movs	r0, #1
 8004502:	f7fd fc44 	bl	8001d8e <LCD_WriteCharXY>
			CurrentState=RECIVING_ADC_READINGS;
 8004506:	2312      	movs	r3, #18
 8004508:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 800450c:	e1f1      	b.n	80048f2 <main+0xdfe>
		case COMMAND7_VALID:
			/*START_LIGHT_50*/
			//make pwm of tim3 ch4 at 50
			PWM3_CH4.duty=50;
 800450e:	2332      	movs	r3, #50	; 0x32
 8004510:	773b      	strb	r3, [r7, #28]
			timer_voidGPWM(&PWM3_CH4);
 8004512:	f107 0310 	add.w	r3, r7, #16
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd fea6 	bl	8002268 <timer_voidGPWM>
			light_last_manual=50;
 800451c:	2332      	movs	r3, #50	; 0x32
 800451e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			LCD_WriteNumberXY(1, 3,light_last_manual);                               /* Update LIGHT PERCENTAGE for MANUAL  */
 8004522:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004526:	f04f 0400 	mov.w	r4, #0
 800452a:	461a      	mov	r2, r3
 800452c:	4623      	mov	r3, r4
 800452e:	2103      	movs	r1, #3
 8004530:	2001      	movs	r0, #1
 8004532:	f7fd fc58 	bl	8001de6 <LCD_WriteNumberXY>
			LCD_WriteCharXY(1,5,' ');
 8004536:	2220      	movs	r2, #32
 8004538:	2105      	movs	r1, #5
 800453a:	2001      	movs	r0, #1
 800453c:	f7fd fc27 	bl	8001d8e <LCD_WriteCharXY>
			CurrentState=RECIVING_ADC_READINGS;
 8004540:	2312      	movs	r3, #18
 8004542:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8004546:	e1d4      	b.n	80048f2 <main+0xdfe>
		case COMMAND8_VALID:
			/*START_LIGHT_25*/
			//make pwm of tim3 ch4 at 25
			PWM3_CH4.duty=25;
 8004548:	2319      	movs	r3, #25
 800454a:	773b      	strb	r3, [r7, #28]
			timer_voidGPWM(&PWM3_CH4);
 800454c:	f107 0310 	add.w	r3, r7, #16
 8004550:	4618      	mov	r0, r3
 8004552:	f7fd fe89 	bl	8002268 <timer_voidGPWM>
			light_last_manual=25;
 8004556:	2319      	movs	r3, #25
 8004558:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			LCD_WriteNumberXY(1, 3,light_last_manual);                               /* Update LIGHT PERCENTAGE for MANUAL  */
 800455c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004560:	f04f 0400 	mov.w	r4, #0
 8004564:	461a      	mov	r2, r3
 8004566:	4623      	mov	r3, r4
 8004568:	2103      	movs	r1, #3
 800456a:	2001      	movs	r0, #1
 800456c:	f7fd fc3b 	bl	8001de6 <LCD_WriteNumberXY>
			LCD_WriteCharXY(1,5,' ');
 8004570:	2220      	movs	r2, #32
 8004572:	2105      	movs	r1, #5
 8004574:	2001      	movs	r0, #1
 8004576:	f7fd fc0a 	bl	8001d8e <LCD_WriteCharXY>
			CurrentState=RECIVING_ADC_READINGS;
 800457a:	2312      	movs	r3, #18
 800457c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8004580:	e1b7      	b.n	80048f2 <main+0xdfe>
		case COMMAND9_VALID:
			/*START_FAN_100*/
			PWM3_CH3.duty=100;
 8004582:	2364      	movs	r3, #100	; 0x64
 8004584:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			timer_voidGPWM(&PWM3_CH3);
 8004588:	f107 0320 	add.w	r3, r7, #32
 800458c:	4618      	mov	r0, r3
 800458e:	f7fd fe6b 	bl	8002268 <timer_voidGPWM>
			fan_last_manual=100;
 8004592:	2364      	movs	r3, #100	; 0x64
 8004594:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			LCD_WriteNumberXY(1, 11,fan_last_manual);                                /* Update FAN PERCENTAGE for MANUAL  */
 8004598:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800459c:	f04f 0400 	mov.w	r4, #0
 80045a0:	461a      	mov	r2, r3
 80045a2:	4623      	mov	r3, r4
 80045a4:	210b      	movs	r1, #11
 80045a6:	2001      	movs	r0, #1
 80045a8:	f7fd fc1d 	bl	8001de6 <LCD_WriteNumberXY>
			CurrentState=RECIVING_ADC_READINGS;
 80045ac:	2312      	movs	r3, #18
 80045ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 80045b2:	e19e      	b.n	80048f2 <main+0xdfe>
		case COMMAND10_VALID:
			/*START_FAN_75*/
			PWM3_CH3.duty=75;
 80045b4:	234b      	movs	r3, #75	; 0x4b
 80045b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			timer_voidGPWM(&PWM3_CH3);
 80045ba:	f107 0320 	add.w	r3, r7, #32
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fd fe52 	bl	8002268 <timer_voidGPWM>
			fan_last_manual=75;
 80045c4:	234b      	movs	r3, #75	; 0x4b
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			LCD_WriteNumberXY(1, 11,fan_last_manual);                                /* Update FAN PERCENTAGE for MANUAL  */
 80045ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80045ce:	f04f 0400 	mov.w	r4, #0
 80045d2:	461a      	mov	r2, r3
 80045d4:	4623      	mov	r3, r4
 80045d6:	210b      	movs	r1, #11
 80045d8:	2001      	movs	r0, #1
 80045da:	f7fd fc04 	bl	8001de6 <LCD_WriteNumberXY>
			LCD_WriteCharXY(1,13,' ');
 80045de:	2220      	movs	r2, #32
 80045e0:	210d      	movs	r1, #13
 80045e2:	2001      	movs	r0, #1
 80045e4:	f7fd fbd3 	bl	8001d8e <LCD_WriteCharXY>
			CurrentState=RECIVING_ADC_READINGS;
 80045e8:	2312      	movs	r3, #18
 80045ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 80045ee:	e180      	b.n	80048f2 <main+0xdfe>
		case COMMAND11_VALID:
			/*START_FAN_50*/
			PWM3_CH3.duty=50;
 80045f0:	2332      	movs	r3, #50	; 0x32
 80045f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			timer_voidGPWM(&PWM3_CH3);
 80045f6:	f107 0320 	add.w	r3, r7, #32
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fd fe34 	bl	8002268 <timer_voidGPWM>
			fan_last_manual=50;
 8004600:	2332      	movs	r3, #50	; 0x32
 8004602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			LCD_WriteNumberXY(1, 11,fan_last_manual);                                /* Update FAN PERCENTAGE for MANUAL  */
 8004606:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800460a:	f04f 0400 	mov.w	r4, #0
 800460e:	461a      	mov	r2, r3
 8004610:	4623      	mov	r3, r4
 8004612:	210b      	movs	r1, #11
 8004614:	2001      	movs	r0, #1
 8004616:	f7fd fbe6 	bl	8001de6 <LCD_WriteNumberXY>
			LCD_WriteCharXY(1,13,' ');
 800461a:	2220      	movs	r2, #32
 800461c:	210d      	movs	r1, #13
 800461e:	2001      	movs	r0, #1
 8004620:	f7fd fbb5 	bl	8001d8e <LCD_WriteCharXY>
			CurrentState=RECIVING_ADC_READINGS;
 8004624:	2312      	movs	r3, #18
 8004626:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 800462a:	e162      	b.n	80048f2 <main+0xdfe>
		case COMMAND12_VALID:
			/*START_FAN_25*/
			PWM3_CH3.duty=25;
 800462c:	2319      	movs	r3, #25
 800462e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			timer_voidGPWM(&PWM3_CH3);
 8004632:	f107 0320 	add.w	r3, r7, #32
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fe16 	bl	8002268 <timer_voidGPWM>
			fan_last_manual=25;
 800463c:	2319      	movs	r3, #25
 800463e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			LCD_WriteNumberXY(1, 11,fan_last_manual);                                /* Update FAN PERCENTAGE for MANUAL  */
 8004642:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004646:	f04f 0400 	mov.w	r4, #0
 800464a:	461a      	mov	r2, r3
 800464c:	4623      	mov	r3, r4
 800464e:	210b      	movs	r1, #11
 8004650:	2001      	movs	r0, #1
 8004652:	f7fd fbc8 	bl	8001de6 <LCD_WriteNumberXY>
			LCD_WriteCharXY(1,13,' ');
 8004656:	2220      	movs	r2, #32
 8004658:	210d      	movs	r1, #13
 800465a:	2001      	movs	r0, #1
 800465c:	f7fd fb97 	bl	8001d8e <LCD_WriteCharXY>
			CurrentState=RECIVING_ADC_READINGS;
 8004660:	2312      	movs	r3, #18
 8004662:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8004666:	e144      	b.n	80048f2 <main+0xdfe>
		case COMMAND13_VALID:
			/*STOP_FAN*/
			PWM3_CH3.duty=0;
 8004668:	2300      	movs	r3, #0
 800466a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			timer_voidGPWM(&PWM3_CH3);
 800466e:	f107 0320 	add.w	r3, r7, #32
 8004672:	4618      	mov	r0, r3
 8004674:	f7fd fdf8 	bl	8002268 <timer_voidGPWM>
			fan_last_manual=0;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			LCD_WriteNumberXY(1, 11,fan_last_manual);                                /* Update FAN PERCENTAGE for MANUAL  */
 800467e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004682:	f04f 0400 	mov.w	r4, #0
 8004686:	461a      	mov	r2, r3
 8004688:	4623      	mov	r3, r4
 800468a:	210b      	movs	r1, #11
 800468c:	2001      	movs	r0, #1
 800468e:	f7fd fbaa 	bl	8001de6 <LCD_WriteNumberXY>
			LCD_WriteStringXY(1,12,"  ");
 8004692:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <main+0xbc8>)
 8004694:	210c      	movs	r1, #12
 8004696:	2001      	movs	r0, #1
 8004698:	f7fd fb90 	bl	8001dbc <LCD_WriteStringXY>
			CurrentState=RECIVING_ADC_READINGS;
 800469c:	2312      	movs	r3, #18
 800469e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 80046a2:	e126      	b.n	80048f2 <main+0xdfe>
 80046a4:	08004a94 	.word	0x08004a94
 80046a8:	08004a6c 	.word	0x08004a6c
 80046ac:	000f4240 	.word	0x000f4240
 80046b0:	080049f4 	.word	0x080049f4
 80046b4:	08004a08 	.word	0x08004a08
 80046b8:	08004a80 	.word	0x08004a80
 80046bc:	08004aa8 	.word	0x08004aa8
		case COMMAND14_VALID:
			/*START_LIGHT_10*/
			//make pwm of tim3 ch4 at 10
			PWM3_CH4.duty=10;
 80046c0:	230a      	movs	r3, #10
 80046c2:	773b      	strb	r3, [r7, #28]
			timer_voidGPWM(&PWM3_CH4);
 80046c4:	f107 0310 	add.w	r3, r7, #16
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fd fdcd 	bl	8002268 <timer_voidGPWM>
			light_last_manual=10;
 80046ce:	230a      	movs	r3, #10
 80046d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			LCD_WriteNumberXY(1, 3,light_last_manual);                               /* Update LIGHT PERCENTAGE for MANUAL  */
 80046d4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80046d8:	f04f 0400 	mov.w	r4, #0
 80046dc:	461a      	mov	r2, r3
 80046de:	4623      	mov	r3, r4
 80046e0:	2103      	movs	r1, #3
 80046e2:	2001      	movs	r0, #1
 80046e4:	f7fd fb7f 	bl	8001de6 <LCD_WriteNumberXY>
			LCD_WriteCharXY(1,5,' ');
 80046e8:	2220      	movs	r2, #32
 80046ea:	2105      	movs	r1, #5
 80046ec:	2001      	movs	r0, #1
 80046ee:	f7fd fb4e 	bl	8001d8e <LCD_WriteCharXY>
			CurrentState=RECIVING_ADC_READINGS;
 80046f2:	2312      	movs	r3, #18
 80046f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 80046f8:	e0fb      	b.n	80048f2 <main+0xdfe>
		case COMMAND15_VALID:
			/*START_FAN_10*/
			PWM3_CH3.duty=10;
 80046fa:	230a      	movs	r3, #10
 80046fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			timer_voidGPWM(&PWM3_CH3);
 8004700:	f107 0320 	add.w	r3, r7, #32
 8004704:	4618      	mov	r0, r3
 8004706:	f7fd fdaf 	bl	8002268 <timer_voidGPWM>
			fan_last_manual=10;
 800470a:	230a      	movs	r3, #10
 800470c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			LCD_WriteNumberXY(1, 11,fan_last_manual);                                /* Update FAN PERCENTAGE for MANUAL  */
 8004710:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004714:	f04f 0400 	mov.w	r4, #0
 8004718:	461a      	mov	r2, r3
 800471a:	4623      	mov	r3, r4
 800471c:	210b      	movs	r1, #11
 800471e:	2001      	movs	r0, #1
 8004720:	f7fd fb61 	bl	8001de6 <LCD_WriteNumberXY>
			LCD_WriteCharXY(1,13,' ');
 8004724:	2220      	movs	r2, #32
 8004726:	210d      	movs	r1, #13
 8004728:	2001      	movs	r0, #1
 800472a:	f7fd fb30 	bl	8001d8e <LCD_WriteCharXY>
			CurrentState=RECIVING_ADC_READINGS;
 800472e:	2312      	movs	r3, #18
 8004730:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8004734:	e0dd      	b.n	80048f2 <main+0xdfe>

		case COMMANDS_UNVALID:
			/*no command happens*/
			LCD_WriteStringXY(0, 0, SCREEN3L0);                                      /* INVALID COMMAND Screen   */
 8004736:	4a70      	ldr	r2, [pc, #448]	; (80048f8 <main+0xe04>)
 8004738:	2100      	movs	r1, #0
 800473a:	2000      	movs	r0, #0
 800473c:	f7fd fb3e 	bl	8001dbc <LCD_WriteStringXY>
			LCD_WriteStringXY(1, 0, SCREEN3L1);                                      /* INVALID COMMAND Screen   */
 8004740:	4a6e      	ldr	r2, [pc, #440]	; (80048fc <main+0xe08>)
 8004742:	2100      	movs	r1, #0
 8004744:	2001      	movs	r0, #1
 8004746:	f7fd fb39 	bl	8001dbc <LCD_WriteStringXY>
			STK_voidSetBusyWait(Events_Screen_Delay);                                /* INVALID COMMAND Screen delay */
 800474a:	486d      	ldr	r0, [pc, #436]	; (8004900 <main+0xe0c>)
 800474c:	f7fd fc3c 	bl	8001fc8 <STK_voidSetBusyWait>
			LCD_WriteStringXY(0, 0, SCREEN2L0);                                      /* MAIN Screen   */
 8004750:	4a6c      	ldr	r2, [pc, #432]	; (8004904 <main+0xe10>)
 8004752:	2100      	movs	r1, #0
 8004754:	2000      	movs	r0, #0
 8004756:	f7fd fb31 	bl	8001dbc <LCD_WriteStringXY>
			LCD_WriteStringXY(1, 0, SCREEN2L1);                                      /* MAIN Screen   */
 800475a:	4a6b      	ldr	r2, [pc, #428]	; (8004908 <main+0xe14>)
 800475c:	2100      	movs	r1, #0
 800475e:	2001      	movs	r0, #1
 8004760:	f7fd fb2c 	bl	8001dbc <LCD_WriteStringXY>
			LCD_WriteCharXY(0, 14,lock_flag);                                        /* Update Lock Flag   */
 8004764:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004768:	461a      	mov	r2, r3
 800476a:	210e      	movs	r1, #14
 800476c:	2000      	movs	r0, #0
 800476e:	f7fd fb0e 	bl	8001d8e <LCD_WriteCharXY>
			LCD_WriteCharXY(1, 2,light_flag);                                        /* Update light Flag   */
 8004772:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004776:	461a      	mov	r2, r3
 8004778:	2102      	movs	r1, #2
 800477a:	2001      	movs	r0, #1
 800477c:	f7fd fb07 	bl	8001d8e <LCD_WriteCharXY>
			if(LIGHT_MANUAL==light_flag){LCD_WriteNumberXY(1, 3,light_last_manual);} /* Update LIGHT PERCENTAGE for MANUAL  */
 8004780:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004784:	2b4d      	cmp	r3, #77	; 0x4d
 8004786:	d10a      	bne.n	800479e <main+0xcaa>
 8004788:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800478c:	f04f 0400 	mov.w	r4, #0
 8004790:	461a      	mov	r2, r3
 8004792:	4623      	mov	r3, r4
 8004794:	2103      	movs	r1, #3
 8004796:	2001      	movs	r0, #1
 8004798:	f7fd fb25 	bl	8001de6 <LCD_WriteNumberXY>
 800479c:	e00d      	b.n	80047ba <main+0xcc6>
			else if(LIGHT_AUTO==light_flag){LCD_WriteNumberXY(1, 3,ldr_Read);}       /* Update LIGHT PERCENTAGE for AUTO  */
 800479e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80047a2:	2b41      	cmp	r3, #65	; 0x41
 80047a4:	d109      	bne.n	80047ba <main+0xcc6>
 80047a6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80047aa:	f04f 0400 	mov.w	r4, #0
 80047ae:	461a      	mov	r2, r3
 80047b0:	4623      	mov	r3, r4
 80047b2:	2103      	movs	r1, #3
 80047b4:	2001      	movs	r0, #1
 80047b6:	f7fd fb16 	bl	8001de6 <LCD_WriteNumberXY>
			LCD_WriteCharXY(1, 10,fan_flag);                                         /* Update FAN Flag   */
 80047ba:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80047be:	461a      	mov	r2, r3
 80047c0:	210a      	movs	r1, #10
 80047c2:	2001      	movs	r0, #1
 80047c4:	f7fd fae3 	bl	8001d8e <LCD_WriteCharXY>
			if(FAN_MANUAL==fan_flag){LCD_WriteNumberXY(1, 11,fan_last_manual);}      /* Update FAN PERCENTAGE for MANUAL  */
 80047c8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80047cc:	2b4d      	cmp	r3, #77	; 0x4d
 80047ce:	d109      	bne.n	80047e4 <main+0xcf0>
 80047d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80047d4:	f04f 0400 	mov.w	r4, #0
 80047d8:	461a      	mov	r2, r3
 80047da:	4623      	mov	r3, r4
 80047dc:	210b      	movs	r1, #11
 80047de:	2001      	movs	r0, #1
 80047e0:	f7fd fb01 	bl	8001de6 <LCD_WriteNumberXY>
			if(FAN_AUTO==fan_flag){LCD_WriteNumberXY(1, 11,pot_Read);}               /* Update FAN PERCENTAGE for AUTO  */
 80047e4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80047e8:	2b41      	cmp	r3, #65	; 0x41
 80047ea:	d109      	bne.n	8004800 <main+0xd0c>
 80047ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80047f0:	f04f 0400 	mov.w	r4, #0
 80047f4:	461a      	mov	r2, r3
 80047f6:	4623      	mov	r3, r4
 80047f8:	210b      	movs	r1, #11
 80047fa:	2001      	movs	r0, #1
 80047fc:	f7fd faf3 	bl	8001de6 <LCD_WriteNumberXY>
			CurrentState=RECIVING_ADC_READINGS;
 8004800:	2312      	movs	r3, #18
 8004802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			break;
 8004806:	e074      	b.n	80048f2 <main+0xdfe>
		case RECIVING_ADC_READINGS:
			/* ADC api for LDR */
			/* if different readings appear change Light , CurrentState = ADJUSTING_LIGHT  */


			if(pot_update_counter==0)
 8004808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480a:	2b00      	cmp	r3, #0
 800480c:	d125      	bne.n	800485a <main+0xd66>
			{
				pot_Read=POT_PercentRead(1);
 800480e:	2001      	movs	r0, #1
 8004810:	f7fb fec0 	bl	8000594 <POT_PercentRead>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				if(FAN_AUTO==fan_flag)
 800481a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800481e:	2b41      	cmp	r3, #65	; 0x41
 8004820:	d117      	bne.n	8004852 <main+0xd5e>
				{
					PWM3_CH3.duty=pot_Read;
 8004822:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004826:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					timer_voidGPWM(&PWM3_CH3);
 800482a:	f107 0320 	add.w	r3, r7, #32
 800482e:	4618      	mov	r0, r3
 8004830:	f7fd fd1a 	bl	8002268 <timer_voidGPWM>
					LCD_WriteStringXY(1,12,"  ");
 8004834:	4a35      	ldr	r2, [pc, #212]	; (800490c <main+0xe18>)
 8004836:	210c      	movs	r1, #12
 8004838:	2001      	movs	r0, #1
 800483a:	f7fd fabf 	bl	8001dbc <LCD_WriteStringXY>
					LCD_WriteNumberXY(1,11,pot_Read);                                 /* Update FAN PERCENTAGE for AUTO  */
 800483e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004842:	f04f 0400 	mov.w	r4, #0
 8004846:	461a      	mov	r2, r3
 8004848:	4623      	mov	r3, r4
 800484a:	210b      	movs	r1, #11
 800484c:	2001      	movs	r0, #1
 800484e:	f7fd faca 	bl	8001de6 <LCD_WriteNumberXY>
				}
				pot_update_counter++;
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	3301      	adds	r3, #1
 8004856:	63bb      	str	r3, [r7, #56]	; 0x38
 8004858:	e00f      	b.n	800487a <main+0xd86>
			}
			else if(pot_update_counter<POT_UPDATE_COUNT) {pot_update_counter++;}
 800485a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004860:	4293      	cmp	r3, r2
 8004862:	d803      	bhi.n	800486c <main+0xd78>
 8004864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004866:	3301      	adds	r3, #1
 8004868:	63bb      	str	r3, [r7, #56]	; 0x38
 800486a:	e006      	b.n	800487a <main+0xd86>
			else if(pot_update_counter==POT_UPDATE_COUNT) {pot_update_counter=0;}
 800486c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004872:	4293      	cmp	r3, r2
 8004874:	d101      	bne.n	800487a <main+0xd86>
 8004876:	2300      	movs	r3, #0
 8004878:	63bb      	str	r3, [r7, #56]	; 0x38
			if(ldr_update_counter==0)
 800487a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d122      	bne.n	80048c6 <main+0xdd2>
			{
				ldr_Read=100-LDR_PercentRead(0);
 8004880:	2000      	movs	r0, #0
 8004882:	f7fb fea1 	bl	80005c8 <LDR_PercentRead>
 8004886:	4603      	mov	r3, r0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800488e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				if(LIGHT_AUTO==light_flag)
 8004892:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004896:	2b41      	cmp	r3, #65	; 0x41
 8004898:	d111      	bne.n	80048be <main+0xdca>
				{
					PWM3_CH4.duty=ldr_Read;
 800489a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800489e:	773b      	strb	r3, [r7, #28]
					timer_voidGPWM(&PWM3_CH4);
 80048a0:	f107 0310 	add.w	r3, r7, #16
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fd fcdf 	bl	8002268 <timer_voidGPWM>

					LCD_WriteNumberXY(1,3,ldr_Read);                                  /* Update LIGHT PERCENTAGE for AUTO  */
 80048aa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80048ae:	f04f 0400 	mov.w	r4, #0
 80048b2:	461a      	mov	r2, r3
 80048b4:	4623      	mov	r3, r4
 80048b6:	2103      	movs	r1, #3
 80048b8:	2001      	movs	r0, #1
 80048ba:	f7fd fa94 	bl	8001de6 <LCD_WriteNumberXY>
				}
				ldr_update_counter++;
 80048be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c0:	3301      	adds	r3, #1
 80048c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c4:	e00d      	b.n	80048e2 <main+0xdee>
			}
			else if(ldr_update_counter<LDR_UPDATE_COUNT) {ldr_update_counter++;}
 80048c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c8:	4a11      	ldr	r2, [pc, #68]	; (8004910 <main+0xe1c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d803      	bhi.n	80048d6 <main+0xde2>
 80048ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d0:	3301      	adds	r3, #1
 80048d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d4:	e005      	b.n	80048e2 <main+0xdee>
			else if(ldr_update_counter==LDR_UPDATE_COUNT) {ldr_update_counter=0;}
 80048d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d8:	4a0e      	ldr	r2, [pc, #56]	; (8004914 <main+0xe20>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d101      	bne.n	80048e2 <main+0xdee>
 80048de:	2300      	movs	r3, #0
 80048e0:	63fb      	str	r3, [r7, #60]	; 0x3c


			     CurrentState = RECIVING_COMMANDS;       break;
 80048e2:	2300      	movs	r3, #0
 80048e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80048e8:	e003      	b.n	80048f2 <main+0xdfe>
		default: CurrentState = RECIVING_ADC_READINGS ;  break;
 80048ea:	2312      	movs	r3, #18
 80048ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80048f0:	bf00      	nop
		switch(CurrentState)
 80048f2:	f7ff b9f8 	b.w	8003ce6 <main+0x1f2>
 80048f6:	bf00      	nop
 80048f8:	08004aac 	.word	0x08004aac
 80048fc:	08004ac0 	.word	0x08004ac0
 8004900:	000f4240 	.word	0x000f4240
 8004904:	080049f4 	.word	0x080049f4
 8004908:	08004a08 	.word	0x08004a08
 800490c:	08004aa8 	.word	0x08004aa8
 8004910:	0001869f 	.word	0x0001869f
 8004914:	000186a0 	.word	0x000186a0

08004918 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004918:	480d      	ldr	r0, [pc, #52]	; (8004950 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800491a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800491c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004920:	480c      	ldr	r0, [pc, #48]	; (8004954 <LoopForever+0x6>)
  ldr r1, =_edata
 8004922:	490d      	ldr	r1, [pc, #52]	; (8004958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004924:	4a0d      	ldr	r2, [pc, #52]	; (800495c <LoopForever+0xe>)
  movs r3, #0
 8004926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004928:	e002      	b.n	8004930 <LoopCopyDataInit>

0800492a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800492a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800492c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800492e:	3304      	adds	r3, #4

08004930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004934:	d3f9      	bcc.n	800492a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004936:	4a0a      	ldr	r2, [pc, #40]	; (8004960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004938:	4c0a      	ldr	r4, [pc, #40]	; (8004964 <LoopForever+0x16>)
  movs r3, #0
 800493a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800493c:	e001      	b.n	8004942 <LoopFillZerobss>

0800493e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800493e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004940:	3204      	adds	r2, #4

08004942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004944:	d3fb      	bcc.n	800493e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004946:	f000 f811 	bl	800496c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800494a:	f7ff f8d3 	bl	8003af4 <main>

0800494e <LoopForever>:

LoopForever:
    b LoopForever
 800494e:	e7fe      	b.n	800494e <LoopForever>
  ldr   r0, =_estack
 8004950:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004958:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800495c:	08004b70 	.word	0x08004b70
  ldr r2, =_sbss
 8004960:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8004964:	20000080 	.word	0x20000080

08004968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004968:	e7fe      	b.n	8004968 <ADC1_2_IRQHandler>
	...

0800496c <__libc_init_array>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	2500      	movs	r5, #0
 8004970:	4e0c      	ldr	r6, [pc, #48]	; (80049a4 <__libc_init_array+0x38>)
 8004972:	4c0d      	ldr	r4, [pc, #52]	; (80049a8 <__libc_init_array+0x3c>)
 8004974:	1ba4      	subs	r4, r4, r6
 8004976:	10a4      	asrs	r4, r4, #2
 8004978:	42a5      	cmp	r5, r4
 800497a:	d109      	bne.n	8004990 <__libc_init_array+0x24>
 800497c:	f000 f81a 	bl	80049b4 <_init>
 8004980:	2500      	movs	r5, #0
 8004982:	4e0a      	ldr	r6, [pc, #40]	; (80049ac <__libc_init_array+0x40>)
 8004984:	4c0a      	ldr	r4, [pc, #40]	; (80049b0 <__libc_init_array+0x44>)
 8004986:	1ba4      	subs	r4, r4, r6
 8004988:	10a4      	asrs	r4, r4, #2
 800498a:	42a5      	cmp	r5, r4
 800498c:	d105      	bne.n	800499a <__libc_init_array+0x2e>
 800498e:	bd70      	pop	{r4, r5, r6, pc}
 8004990:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004994:	4798      	blx	r3
 8004996:	3501      	adds	r5, #1
 8004998:	e7ee      	b.n	8004978 <__libc_init_array+0xc>
 800499a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800499e:	4798      	blx	r3
 80049a0:	3501      	adds	r5, #1
 80049a2:	e7f2      	b.n	800498a <__libc_init_array+0x1e>
 80049a4:	08004b68 	.word	0x08004b68
 80049a8:	08004b68 	.word	0x08004b68
 80049ac:	08004b68 	.word	0x08004b68
 80049b0:	08004b6c 	.word	0x08004b6c

080049b4 <_init>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	bf00      	nop
 80049b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ba:	bc08      	pop	{r3}
 80049bc:	469e      	mov	lr, r3
 80049be:	4770      	bx	lr

080049c0 <_fini>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	bf00      	nop
 80049c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c6:	bc08      	pop	{r3}
 80049c8:	469e      	mov	lr, r3
 80049ca:	4770      	bx	lr
